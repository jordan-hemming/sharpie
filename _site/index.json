{
  "README.html": {
    "href": "README.html",
    "title": "Sharpie | sharpie",
    "summary": "Sharpie Sharpie is a terminal manipulation library based on NCurses and targeting .NET 6 (dotnet core) and above. Or, if you prefer the Snake game... Platforms Sharpie supports any platform that .NET 6.0+, ncurses, pdcurses and pdcurses-mod support. This essentially means that Linux, Macos and Windows are supported on both x64 and ARM64 architectures. For more information on supported platforms visit .NET Supported Platforms Page and NCurses Packages Page. Sharpie provides unofficial builds for all the supported libraries located in the lib directory Installation Install the main library by adding the NuGet package: dotnet add package Sharpie-Curses Additionally, one can install packages containing prebuilt native libraries. These packages are useful when targeting platforms that do not bundle a supported curses library by default (e.g. Windows). dotnet add package Sharpie-Libs-PdCurses dotnet add package Sharpie-Libs-PdCursesMod dotnet add package Sharpie-Libs-NCurses Features Almost all of Curses functionality is exposed through Sharpie. What follows is a list of suppoerted features: Terminal allows interfacing with terminal functionality exposed by Curses, Screen abstracts away the screen handling, Pad abstracts away the off-screen windows (known as pads), SubPad and SubWindow carves out areas of their respective parents for easy management, EventPump allows developers to listen for Curses events such as key presses, mouse moves and resizes, ColorManager abstracts away the management of colors, Even SoftLabelKeys are supported (though antiquated), In addition to wrapping NCurses, this library also adds numerous quality-of-life improvements such as: Management of overlapping Windows within a Screen, Proper Window resizing and placement during terminal resizing events, Automatic Screen refresh management and support for atomic refreshes, Supports SynchronizationContext-type execution, Supports protected/synchronized or raw access to all classes, And other small additions here and there... Reasons There are a number of libraries out there that already offer bindings to NCurses. One of the more popular one is Terminal.Gui; and others such as dotnet-curses also exist. So why another one? The are many reasons, but the most important ones are: There is no .NET, object-oriented version of NCurses bindings, Existing versions are old, or are targeting old versions of .NET which do not benefit from numerous advances in the .NET platform, No other library exposes most of Curses functionality, Testing is either very limited or completely non-existent. And finally -- because I wanted to dabble in Curses. How To What follows is a small example of how to use the library: // Create the terminal instance without any non-standard settings. using var terminal = new Terminal(CursesBackend.Load(), new(ManagedWindows: true)); // Set the main screen attributes for text and drawings. terminal.Screen.ColorMixture = terminal.Colors.MixColors(StandardColor.Green, StandardColor.Blue); // Draw a border on the screen. terminal.Screen.DrawBorder(); // Force a refresh so that all drawings will be actually pushed to teh screen. terminal.Screen.Refresh(); // Create a child window within the terminal to operate within. // The other cells contain the border so we don't want to overwrite those. var subWindow = terminal.Screen.SubWindow( new(1, 1, terminal.Screen.Size.Width - 2, terminal.Screen.Size.Height - 2)); // Process all events coming from the terminal. foreach (var @event in terminal.Events.Listen(subWindow)) { // Write the event that occured. subWindow.WriteText($\"{@event}\\n\"); // If the event is a resize, change the size of the child window // to allow for the screen to maintain its border. // And then redraw the border of the main screen. if (@event is TerminalResizeEvent re) { subWindow.Size = new(re.Size.Width - 2, re.Size.Height - 2); terminal.Screen.DrawBorder(); } // If the user pressed CTRL+C, break the loop. if (@event is KeyEvent { Key: Key.Character, Char.IsAscii: true, Char.Value: 'C', Modifiers: ModifierKey.Ctrl }) { break; } } As you can imagine, there are numerous other uses built into the library. Start out by reading Setting Up The Terminal wiki page."
  },
  "api/Sharpie.Abstractions.IAsciiFont.html": {
    "href": "api/Sharpie.Abstractions.IAsciiFont.html",
    "title": "Interface IAsciiFont | sharpie",
    "summary": "Interface IAsciiFont Namespace Sharpie.Abstractions Assembly sharpie.dll Defines the traits implemented by ASCII font providers. [PublicAPI] public interface IAsciiFont Properties Baseline The font baseline. int Baseline { get; } Property Value int Height The font height. int Height { get; } Property Value int Layout The font's layout. AsciiFontLayout Layout { get; } Property Value AsciiFontLayout Name The font's name. string Name { get; } Property Value string Methods GetGlyph(Rune, Style) Tries to get a glyph for a given char. IDrawable GetGlyph(Rune @char, Style style) Parameters char Rune The character. style Style The style to apply to the glyph. Returns IDrawable The output glyph, if found. Otherwise, the font will substitute the glyph with something else. GetGlyphs(ReadOnlySpan<Rune>, Style) Tries to get a drawing for a given list of chars. IDrawable GetGlyphs(ReadOnlySpan<Rune> chars, Style style) Parameters chars ReadOnlySpan<Rune> The characters. style Style The style to apply to the glyphs. Returns IDrawable The output glyphs. Exceptions ArgumentException Thrown if chars is empty. GetGlyphs(string, Style) Tries to get a drawing for a given text. IDrawable GetGlyphs(string text, Style style) Parameters text string The text. style Style The style to apply to the glyphs. Returns IDrawable The output glyphs. Exceptions ArgumentException Thrown if text is empty. HasGlyph(Rune) Checks if the font contains a given glyph. bool HasGlyph(Rune @char) Parameters char Rune The character. Returns bool true if the font contains the given glyph; false otherwise."
  },
  "api/Sharpie.Abstractions.IColorManager.html": {
    "href": "api/Sharpie.Abstractions.IColorManager.html",
    "title": "Interface IColorManager | sharpie",
    "summary": "Interface IColorManager Namespace Sharpie.Abstractions Assembly sharpie.dll Defines the traits needed to implement ColorManager. [PublicAPI] public interface IColorManager Properties CanRedefineColors Specifies whether the terminal supports redefining colors. bool CanRedefineColors { get; } Property Value bool Mode Specifies the color mode if this terminal. ColorMode Mode { get; } Property Value ColorMode Terminal The terminal this manager belongs to. ITerminal Terminal { get; } Property Value ITerminal Methods BreakdownColor(StandardColor) Extracts the RBG attributes from a standard color. (short red, short green, short blue) BreakdownColor(StandardColor color) Parameters color StandardColor The color to get the RGB from. Returns (short red, short green, short blue) Remarks Before calling this function make sure that terminal supports this functionality by checking CanRedefineColors. This operation is not thread safe. Exceptions NotSupportedException If the terminal does not support redefining colors. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. BreakdownColor(short) Extracts the RBG attributes from a color. (short red, short green, short blue) BreakdownColor(short color) Parameters color short The color to get the RGB from. Returns (short red, short green, short blue) Remarks Before calling this function make sure that terminal supports this functionality by checking CanRedefineColors. This operation is not thread safe. Exceptions NotSupportedException If the terminal does not support redefining colors. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. MixColors(StandardColor, StandardColor) Creates a new color mixture from the given standard colors. ColorMixture MixColors(StandardColor fgColor, StandardColor bgColor) Parameters fgColor StandardColor The foreground color. bgColor StandardColor The background color. Returns ColorMixture A new color mixture. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. MixColors(short, short) Creates a new color mixture from the given colors. ColorMixture MixColors(short fgColor, short bgColor) Parameters fgColor short The foreground color. bgColor short The background color. Returns ColorMixture A new color mixture. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. RedefineColor(StandardColor, short, short, short) Redefines the standard color's RGB attributes (if supported). void RedefineColor(StandardColor color, short red, short green, short blue) Parameters color StandardColor The color to redefine. red short The value of red (0-1000). green short The value of green (0-1000). blue short The value of blue (0-1000). Remarks Before calling this function make sure that terminal supports this functionality by checking CanRedefineColors. This operation is not thread safe. Exceptions ArgumentOutOfRangeException If any of the three components is greater than 1000. NotSupportedException If the terminal does not support redefining colors. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. RedefineColor(short, short, short, short) Redefines the color's RGB attributes (if supported). void RedefineColor(short color, short red, short green, short blue) Parameters color short The color to redefine. red short The value of red (0-1000). green short The value of green (0-1000). blue short The value of blue (0-1000). Remarks Before calling this function make sure that terminal supports this functionality by checking CanRedefineColors. This operation is not thread safe. Exceptions NotSupportedException If the terminal does not support redefining colors. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. RemixColors(ColorMixture, StandardColor, StandardColor) Redefines an existing color pair with the given standard colors. void RemixColors(ColorMixture mixture, StandardColor fgColor, StandardColor bgColor) Parameters mixture ColorMixture The color mixture to redefine. fgColor StandardColor The foreground color. bgColor StandardColor The background color. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. RemixColors(ColorMixture, short, short) Redefines an existing color pair with the given colors. void RemixColors(ColorMixture mixture, short fgColor, short bgColor) Parameters mixture ColorMixture The color mixture to redefine. fgColor short The foreground color. bgColor short The background color. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. RemixDefaultColors(StandardColor, StandardColor) Redefines the default colors of the terminal. void RemixDefaultColors(StandardColor fgColor, StandardColor bgColor) Parameters fgColor StandardColor The foreground color. bgColor StandardColor The background color. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. RemixDefaultColors(short, short) Redefines the default colors of the terminal. void RemixDefaultColors(short fgColor, short bgColor) Parameters fgColor short The foreground color. bgColor short The background color. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. UnMixColors(ColorMixture) Extracts the colors of a color mixture. (short fgColor, short bgColor) UnMixColors(ColorMixture mixture) Parameters mixture ColorMixture The color mixture to get the colors from. Returns (short fgColor, short bgColor) Remarks This operation is not thread safe. Exceptions NotSupportedException If the terminal does not support redefining colors. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't."
  },
  "api/Sharpie.Abstractions.ICursesBackend.html": {
    "href": "api/Sharpie.Abstractions.ICursesBackend.html",
    "title": "Interface ICursesBackend | sharpie",
    "summary": "Interface ICursesBackend Namespace Sharpie.Abstractions Assembly sharpie.dll Interface provides access to the Curses functionality. Use the Sharpie.Backend.NCursesBackend property to access the actual implementation. [PublicAPI] public interface ICursesBackend Methods assume_default_colors(int, int) int assume_default_colors(int fgColor, int bgColor) Parameters fgColor int bgColor int Returns int baudrate() int baudrate() Returns int beep() int beep() Returns int can_change_color() bool can_change_color() Returns bool cbreak() int cbreak() Returns int color_content(short, out short, out short, out short) int color_content(short color, out short red, out short green, out short blue) Parameters color short red short green short blue short Returns int copywin(IntPtr, IntPtr, int, int, int, int, int, int, int) int copywin(IntPtr fromWindow, IntPtr toWindow, int srcStartLine, int srcStartCol, int destStartLine, int destStartCol, int destEndLine, int destEndCol, int overlay) Parameters fromWindow IntPtr toWindow IntPtr srcStartLine int srcStartCol int destStartLine int destStartCol int destEndLine int destEndCol int overlay int Returns int curs_set(int) int curs_set(int level) Parameters level int Returns int curses_version() string? curses_version() Returns string delwin(IntPtr) int delwin(IntPtr window) Parameters window IntPtr Returns int derwin(IntPtr, int, int, int, int) IntPtr derwin(IntPtr window, int lines, int cols, int beginLine, int beginCol) Parameters window IntPtr lines int cols int beginLine int beginCol int Returns IntPtr doupdate() int doupdate() Returns int dupwin(IntPtr) IntPtr dupwin(IntPtr window) Parameters window IntPtr Returns IntPtr echo() int echo() Returns int endwin() int endwin() Returns int erasewchar(out uint) int erasewchar(out uint @char) Parameters char uint Returns int flash() int flash() Returns int getbegx(IntPtr) int getbegx(IntPtr window) Parameters window IntPtr Returns int getbegy(IntPtr) int getbegy(IntPtr window) Parameters window IntPtr Returns int getcchar(ComplexChar, StringBuilder, out VideoAttribute, out short, IntPtr) int getcchar(ComplexChar @char, StringBuilder dest, out VideoAttribute attributes, out short colorPair, IntPtr reserved) Parameters char ComplexChar dest StringBuilder attributes VideoAttribute colorPair short reserved IntPtr Returns int getcurx(IntPtr) int getcurx(IntPtr window) Parameters window IntPtr Returns int getcury(IntPtr) int getcury(IntPtr window) Parameters window IntPtr Returns int getmaxx(IntPtr) int getmaxx(IntPtr window) Parameters window IntPtr Returns int getmaxy(IntPtr) int getmaxy(IntPtr window) Parameters window IntPtr Returns int getmouse(out CursesMouseState) int getmouse(out CursesMouseState state) Parameters state CursesMouseState Returns int getparx(IntPtr) int getparx(IntPtr window) Parameters window IntPtr Returns int getpary(IntPtr) int getpary(IntPtr window) Parameters window IntPtr Returns int has_colors() bool has_colors() Returns bool immedok(IntPtr, bool) void immedok(IntPtr window, bool set) Parameters window IntPtr set bool init_color(short, short, short, short) int init_color(short color, short red, short green, short blue) Parameters color short red short green short blue short Returns int init_pair(short, short, short) int init_pair(short colorPair, short fgColor, short bgColor) Parameters colorPair short fgColor short bgColor short Returns int initscr() IntPtr initscr() Returns IntPtr intrflush(IntPtr, bool) int intrflush(IntPtr window, bool set) Parameters window IntPtr set bool Returns int is_immedok(IntPtr) bool is_immedok(IntPtr window) Parameters window IntPtr Returns bool is_leaveok(IntPtr) bool is_leaveok(IntPtr window) Parameters window IntPtr Returns bool is_linetouched(IntPtr, int) bool is_linetouched(IntPtr window, int line) Parameters window IntPtr line int Returns bool is_scrollok(IntPtr) bool is_scrollok(IntPtr window) Parameters window IntPtr Returns bool is_wintouched(IntPtr) bool is_wintouched(IntPtr window) Parameters window IntPtr Returns bool key_name(uint) string? key_name(uint @char) Parameters char uint Returns string keypad(IntPtr, bool) int keypad(IntPtr window, bool set) Parameters window IntPtr set bool Returns int killwchar(out uint) int killwchar(out uint @char) Parameters char uint Returns int leaveok(IntPtr, bool) int leaveok(IntPtr window, bool set) Parameters window IntPtr set bool Returns int longname() string? longname() Returns string meta(IntPtr, bool) int meta(IntPtr window, bool set) Parameters window IntPtr set bool Returns int mouseinterval(int) int mouseinterval(int millis) Parameters millis int Returns int mousemask(uint, out uint) int mousemask(uint newMask, out uint oldMask) Parameters newMask uint oldMask uint Returns int mvderwin(IntPtr, int, int) int mvderwin(IntPtr window, int parentLine, int parentCol) Parameters window IntPtr parentLine int parentCol int Returns int mvwin(IntPtr, int, int) int mvwin(IntPtr window, int toLine, int toCol) Parameters window IntPtr toLine int toCol int Returns int newpad(int, int) IntPtr newpad(int lines, int cols) Parameters lines int cols int Returns IntPtr newwin(int, int, int, int) IntPtr newwin(int lines, int cols, int atLine, int atCol) Parameters lines int cols int atLine int atCol int Returns IntPtr nl() int nl() Returns int nocbreak() int nocbreak() Returns int nodelay(IntPtr, bool) int nodelay(IntPtr window, bool set) Parameters window IntPtr set bool Returns int noecho() int noecho() Returns int nonl() int nonl() Returns int noqiflush() void noqiflush() noraw() int noraw() Returns int notimeout(IntPtr, bool) int notimeout(IntPtr window, bool set) Parameters window IntPtr set bool Returns int overlay(IntPtr, IntPtr) int overlay(IntPtr srcWindow, IntPtr destWindow) Parameters srcWindow IntPtr destWindow IntPtr Returns int overwrite(IntPtr, IntPtr) int overwrite(IntPtr srcWindow, IntPtr destWindow) Parameters srcWindow IntPtr destWindow IntPtr Returns int pair_content(short, out short, out short) int pair_content(short colorPair, out short fgColor, out short bgColor) Parameters colorPair short fgColor short bgColor short Returns int pnoutrefresh(IntPtr, int, int, int, int, int, int) int pnoutrefresh(IntPtr pad, int padMinLine, int padMinCol, int scrMinLine, int scrMinCol, int scrMaxLine, int scrMaxCol) Parameters pad IntPtr padMinLine int padMinCol int scrMinLine int scrMinCol int scrMaxLine int scrMaxCol int Returns int prefresh(IntPtr, int, int, int, int, int, int) int prefresh(IntPtr pad, int padMinLine, int padMinCol, int scrMinLine, int scrMinCol, int scrMaxLine, int scrMaxCol) Parameters pad IntPtr padMinLine int padMinCol int scrMinLine int scrMinCol int scrMaxLine int scrMaxCol int Returns int qiflush() void qiflush() raw() int raw() Returns int ripoffline(int, ripoffline_callback) int ripoffline(int lines, ICursesBackend.ripoffline_callback callback) Parameters lines int callback ICursesBackend.ripoffline_callback Returns int scrollok(IntPtr, bool) int scrollok(IntPtr window, bool set) Parameters window IntPtr set bool Returns int set_title(string) void set_title(string title) Parameters title string setcchar(out ComplexChar, string, VideoAttribute, short, IntPtr) int setcchar(out ComplexChar @char, string text, VideoAttribute attributes, short colorPair, IntPtr reserved) Parameters char ComplexChar text string attributes VideoAttribute colorPair short reserved IntPtr Returns int slk_attr(out VideoAttribute, out short) int slk_attr(out VideoAttribute attributes, out short colorPair) Parameters attributes VideoAttribute colorPair short Returns int slk_attr_off(VideoAttribute, IntPtr) int slk_attr_off(VideoAttribute attributes, IntPtr reserved) Parameters attributes VideoAttribute reserved IntPtr Returns int slk_attr_on(VideoAttribute, IntPtr) int slk_attr_on(VideoAttribute attributes, IntPtr reserved) Parameters attributes VideoAttribute reserved IntPtr Returns int slk_attr_set(VideoAttribute, short, IntPtr) int slk_attr_set(VideoAttribute attributes, short colorPair, IntPtr reserved) Parameters attributes VideoAttribute colorPair short reserved IntPtr Returns int slk_clear() int slk_clear() Returns int slk_color(short) int slk_color(short colorPair) Parameters colorPair short Returns int slk_init(int) int slk_init(int format) Parameters format int Returns int slk_noutrefresh() int slk_noutrefresh() Returns int slk_refresh() int slk_refresh() Returns int slk_restore() int slk_restore() Returns int slk_set(int, string, int) int slk_set(int labelIndex, string title, int align) Parameters labelIndex int title string align int Returns int slk_touch() int slk_touch() Returns int start_color() int start_color() Returns int subpad(IntPtr, int, int, int, int) IntPtr subpad(IntPtr pad, int lines, int cols, int atLine, int atCol) Parameters pad IntPtr lines int cols int atLine int atCol int Returns IntPtr syncok(IntPtr, bool) int syncok(IntPtr window, bool set) Parameters window IntPtr set bool Returns int term_attrs(out VideoAttribute) int term_attrs(out VideoAttribute attributes) Parameters attributes VideoAttribute Returns int termname() string? termname() Returns string use_default_colors() int use_default_colors() Returns int use_env(bool) void use_env(bool set) Parameters set bool wadd_wch(IntPtr, ComplexChar) int wadd_wch(IntPtr window, ComplexChar @char) Parameters window IntPtr char ComplexChar Returns int wattr_get(IntPtr, out VideoAttribute, out short, IntPtr) int wattr_get(IntPtr window, out VideoAttribute attributes, out short colorPair, IntPtr reserved) Parameters window IntPtr attributes VideoAttribute colorPair short reserved IntPtr Returns int wattr_off(IntPtr, VideoAttribute, IntPtr) int wattr_off(IntPtr window, VideoAttribute attributes, IntPtr reserved) Parameters window IntPtr attributes VideoAttribute reserved IntPtr Returns int wattr_on(IntPtr, VideoAttribute, IntPtr) int wattr_on(IntPtr window, VideoAttribute attributes, IntPtr reserved) Parameters window IntPtr attributes VideoAttribute reserved IntPtr Returns int wattr_set(IntPtr, VideoAttribute, short, IntPtr) int wattr_set(IntPtr window, VideoAttribute attributes, short colorPair, IntPtr reserved) Parameters window IntPtr attributes VideoAttribute colorPair short reserved IntPtr Returns int wbkgrnd(IntPtr, ComplexChar) int wbkgrnd(IntPtr window, ComplexChar @char) Parameters window IntPtr char ComplexChar Returns int wborder(IntPtr, uint, uint, uint, uint, uint, uint, uint, uint) int wborder(IntPtr window, uint leftSide, uint rightSide, uint topSide, uint bottomSide, uint topLeftCorner, uint topRightCorner, uint bottomLeftCorner, uint bottomRightCorner) Parameters window IntPtr leftSide uint rightSide uint topSide uint bottomSide uint topLeftCorner uint topRightCorner uint bottomLeftCorner uint bottomRightCorner uint Returns int wborder_set(IntPtr, ComplexChar, ComplexChar, ComplexChar, ComplexChar, ComplexChar, ComplexChar, ComplexChar, ComplexChar) int wborder_set(IntPtr window, ComplexChar leftSide, ComplexChar rightSide, ComplexChar topSide, ComplexChar bottomSide, ComplexChar topLeftCorner, ComplexChar topRightCorner, ComplexChar bottomLeftCorner, ComplexChar bottomRightCorner) Parameters window IntPtr leftSide ComplexChar rightSide ComplexChar topSide ComplexChar bottomSide ComplexChar topLeftCorner ComplexChar topRightCorner ComplexChar bottomLeftCorner ComplexChar bottomRightCorner ComplexChar Returns int wchgat(IntPtr, int, VideoAttribute, short, IntPtr) int wchgat(IntPtr window, int count, VideoAttribute attributes, short colorPair, IntPtr reserved) Parameters window IntPtr count int attributes VideoAttribute colorPair short reserved IntPtr Returns int wclrtobot(IntPtr) int wclrtobot(IntPtr window) Parameters window IntPtr Returns int wclrtoeol(IntPtr) int wclrtoeol(IntPtr window) Parameters window IntPtr Returns int wcolor_set(IntPtr, short, IntPtr) int wcolor_set(IntPtr window, short colorPair, IntPtr reserved) Parameters window IntPtr colorPair short reserved IntPtr Returns int wdelch(IntPtr) int wdelch(IntPtr window) Parameters window IntPtr Returns int werase(IntPtr) int werase(IntPtr window) Parameters window IntPtr Returns int wget_event(IntPtr, int, out CursesEvent?) int wget_event(IntPtr window, int delay, out CursesEvent? @event) Parameters window IntPtr delay int event CursesEvent Returns int wget_wch(IntPtr, out uint) int wget_wch(IntPtr window, out uint @char) Parameters window IntPtr char uint Returns int wgetbkgrnd(IntPtr, out ComplexChar) int wgetbkgrnd(IntPtr window, out ComplexChar @char) Parameters window IntPtr char ComplexChar Returns int whline(IntPtr, uint, int) int whline(IntPtr window, uint @char, int count) Parameters window IntPtr char uint count int Returns int whline_set(IntPtr, ComplexChar, int) int whline_set(IntPtr window, ComplexChar @char, int count) Parameters window IntPtr char ComplexChar count int Returns int win_wch(IntPtr, out ComplexChar) int win_wch(IntPtr window, out ComplexChar @char) Parameters window IntPtr char ComplexChar Returns int winsdelln(IntPtr, int) int winsdelln(IntPtr window, int count) Parameters window IntPtr count int Returns int wmove(IntPtr, int, int) int wmove(IntPtr window, int newLine, int newCol) Parameters window IntPtr newLine int newCol int Returns int wnoutrefresh(IntPtr) int wnoutrefresh(IntPtr window) Parameters window IntPtr Returns int wredrawln(IntPtr, int, int) int wredrawln(IntPtr window, int startLine, int lineCount) Parameters window IntPtr startLine int lineCount int Returns int wrefresh(IntPtr) int wrefresh(IntPtr window) Parameters window IntPtr Returns int wresize(IntPtr, int, int) int wresize(IntPtr window, int lines, int columns) Parameters window IntPtr lines int columns int Returns int wscrl(IntPtr, int) int wscrl(IntPtr window, int count) Parameters window IntPtr count int Returns int wtimeout(IntPtr, int) void wtimeout(IntPtr window, int delay) Parameters window IntPtr delay int wtouchln(IntPtr, int, int, int) int wtouchln(IntPtr window, int line, int count, int changed) Parameters window IntPtr line int count int changed int Returns int wvline(IntPtr, uint, int) int wvline(IntPtr window, uint @char, int count) Parameters window IntPtr char uint count int Returns int wvline_set(IntPtr, ComplexChar, int) int wvline_set(IntPtr window, ComplexChar @char, int count) Parameters window IntPtr char ComplexChar count int Returns int"
  },
  "api/Sharpie.Abstractions.ICursesBackend.ripoffline_callback.html": {
    "href": "api/Sharpie.Abstractions.ICursesBackend.ripoffline_callback.html",
    "title": "Delegate ICursesBackend.ripoffline_callback | sharpie",
    "summary": "Delegate ICursesBackend.ripoffline_callback Namespace Sharpie.Abstractions Assembly sharpie.dll public delegate int ICursesBackend.ripoffline_callback(IntPtr window, int columns) Parameters window IntPtr columns int Returns int"
  },
  "api/Sharpie.Abstractions.IDrawSurface.html": {
    "href": "api/Sharpie.Abstractions.IDrawSurface.html",
    "title": "Interface IDrawSurface | sharpie",
    "summary": "Interface IDrawSurface Namespace Sharpie.Abstractions Assembly sharpie.dll Defines the traits needed by an object to draw a IDrawable onto. public interface IDrawSurface Properties Size The total size of the draw surface. Size Size { get; } Property Value Size Methods DrawCell(Point, Rune, Style) Draws a rune at a location using the given style. void DrawCell(Point location, Rune rune, Style style) Parameters location Point The location to draw to. rune Rune The rune to draw. style Style The cell style."
  },
  "api/Sharpie.Abstractions.IDrawable.html": {
    "href": "api/Sharpie.Abstractions.IDrawable.html",
    "title": "Interface IDrawable | sharpie",
    "summary": "Interface IDrawable Namespace Sharpie.Abstractions Assembly sharpie.dll Defines the trains required for an object to be drawable onto a IDrawSurface. [PublicAPI] public interface IDrawable Properties Size The size of the drawable. Size Size { get; } Property Value Size Methods DrawOnto(IDrawSurface, Rectangle, Point) Draws the drawable onto a given surface. void DrawOnto(IDrawSurface destination, Rectangle srcArea, Point destLocation) Parameters destination IDrawSurface The surface to draw on. srcArea Rectangle The source area to draw. destLocation Point The destination location. Exceptions ArgumentNullException Thrown if destination is null."
  },
  "api/Sharpie.Abstractions.IEventPump.html": {
    "href": "api/Sharpie.Abstractions.IEventPump.html",
    "title": "Interface IEventPump | sharpie",
    "summary": "Interface IEventPump Namespace Sharpie.Abstractions Assembly sharpie.dll Defines the traits needed to implement EventPump. [PublicAPI] public interface IEventPump Properties Terminal The terminal this pump belongs to. ITerminal Terminal { get; } Property Value ITerminal Methods Listen() Gets an enumerable that is used to get enumerate events from Curses as they are generated. IEnumerable<Event> Listen() Returns IEnumerable<Event> The event listening enumerable. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Listen(ISurface) Gets an enumerable that is used to get enumerate events from Curses as they are generated. IEnumerable<Event> Listen(ISurface surface) Parameters surface ISurface The surface to refresh during event processing. Returns IEnumerable<Event> The event listening enumerable. Remarks This operation is not thread safe. Exceptions ArgumentNullException Thrown if surface is null. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Listen(ISurface, CancellationToken) Gets an enumerable that is used to get enumerate events from Curses as they are generated. IEnumerable<Event> Listen(ISurface surface, CancellationToken cancellationToken) Parameters surface ISurface The surface to refresh during event processing. cancellationToken CancellationToken Cancellation token used to interrupt the process. Returns IEnumerable<Event> The event listening enumerable. Remarks This operation is not thread safe. Exceptions ArgumentNullException Thrown if surface is null. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Listen(CancellationToken) Gets an enumerable that is used to get enumerate events from Curses as they are generated. IEnumerable<Event> Listen(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Cancellation token used to interrupt the process. Returns IEnumerable<Event> The event listening enumerable. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Use(ResolveEscapeSequenceFunc) Registers a key sequence resolver into the input pipeline. void Use(ResolveEscapeSequenceFunc resolver) Parameters resolver ResolveEscapeSequenceFunc The resolver to register. Remarks This operation is not thread safe. Exceptions ArgumentNullException Thrown is resolver is null. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Uses(ResolveEscapeSequenceFunc) Checks if the screen has a given key sequence resolver registered. bool Uses(ResolveEscapeSequenceFunc resolver) Parameters resolver ResolveEscapeSequenceFunc The resolver to check. Returns bool true if the resolver is registered; false otherwise. Remarks This operation is not thread safe. Exceptions ArgumentNullException Thrown is resolver is null. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't."
  },
  "api/Sharpie.Abstractions.IInterval.html": {
    "href": "api/Sharpie.Abstractions.IInterval.html",
    "title": "Interface IInterval | sharpie",
    "summary": "Interface IInterval Namespace Sharpie.Abstractions Assembly sharpie.dll Describes a timed interval. [PublicAPI] public interface IInterval : IDisposable Inherited Members IDisposable.Dispose() Methods Stop() Stops the interval from repeating/executing at the next tick. void Stop()"
  },
  "api/Sharpie.Abstractions.IPad.html": {
    "href": "api/Sharpie.Abstractions.IPad.html",
    "title": "Interface IPad | sharpie",
    "summary": "Interface IPad Namespace Sharpie.Abstractions Assembly sharpie.dll Describes the traits specific to the Pad. [PublicAPI] public interface IPad : ISurface, IDrawSurface Inherited Members ISurface.Handle ISurface.Disposed ISurface.Scrollable ISurface.Style ISurface.ColorMixture ISurface.Background ISurface.CaretLocation ISurface.Dirty ISurface.ManagedCaret ISurface.EnableAttributes(VideoAttribute) ISurface.DisableAttributes(VideoAttribute) ISurface.ScrollUp(int) ISurface.ScrollDown(int) ISurface.InsertEmptyLines(int) ISurface.DeleteLines(int) ISurface.ChangeTextStyle(int, Style) ISurface.WriteText(StyledText, bool) ISurface.WriteText(string, Style, bool) ISurface.WriteText(string, bool) ISurface.NextLine() ISurface.DrawText(IAsciiFont, string, Style, bool, bool) ISurface.DrawText(IAsciiFont, string, bool, bool) ISurface.DrawVerticalLine(int, Rune, Style) ISurface.DrawVerticalLine(int) ISurface.DrawHorizontalLine(int, Rune, Style) ISurface.DrawHorizontalLine(int) ISurface.DrawBorder(Rune, Rune, Rune, Rune, Rune, Rune, Rune, Rune, Style) ISurface.DrawBorder() ISurface.RemoveText(int) ISurface.GetText(int) ISurface.Clear(ClearStrategy) ISurface.Replace(ISurface, ReplaceStrategy) ISurface.Replace(ISurface, Rectangle, Point, ReplaceStrategy) ISurface.MarkDirty(int, int) ISurface.MarkDirty() ISurface.IsPointWithin(Point) ISurface.IsRectangleWithin(Rectangle) ISurface.Draw(Point, Rectangle, IDrawable) ISurface.Draw(Point, IDrawable) ISurface.LineDirty(int) ISurface.Destroy() IDrawSurface.DrawCell(Point, Rune, Style) Properties Screen The parent screen of this pad. IScreen Screen { get; } Property Value IScreen Size Gets or sets the size of the window. Size Size { get; set; } Property Value Size Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException The value is outside the bounds. ObjectDisposedException Window is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. SubPads Gets the sub-pads of this pad. IEnumerable<ISubPad> SubPads { get; } Property Value IEnumerable<ISubPad> Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Methods Duplicate() Duplicates and existing pad, including its attributes. IPad Duplicate() Returns IPad A new pad object. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Screen is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Refresh(Point) Redraws an area of the screen with the contents of the pad. void Refresh(Point destLocation) Parameters destLocation Point The point on the screen to place that rectangle. Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal of the given window have been disposed. ArgumentOutOfRangeException Thrown if destLocation is out of bounds. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Refresh(Rectangle, Point) Redraws an area of the screen with the contents of the pad. void Refresh(Rectangle srcArea, Point destLocation) Parameters srcArea Rectangle The rectangle of the pad to place onto the screen. destLocation Point The point on the screen to place that rectangle. Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal of the given window have been disposed. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. SubPad(Rectangle) Creates a new sub-pad in the parent pad. ISubPad SubPad(Rectangle area) Parameters area Rectangle The area of the pad to put the sub-pad in. Returns ISubPad A new pad object. Exceptions ObjectDisposedException Screen is no longer usable. ArgumentOutOfRangeException The area is outside the bounds of the parent. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't."
  },
  "api/Sharpie.Abstractions.IScreen.html": {
    "href": "api/Sharpie.Abstractions.IScreen.html",
    "title": "Interface IScreen | sharpie",
    "summary": "Interface IScreen Namespace Sharpie.Abstractions Assembly sharpie.dll Defines the traits that a Screen implements. [PublicAPI] public interface IScreen : ITerminalSurface, ISurface, IDrawSurface Inherited Members ITerminalSurface.Terminal ITerminalSurface.ImmediateRefresh ITerminalSurface.Refresh() ITerminalSurface.Refresh(int, int) ISurface.Handle ISurface.Disposed ISurface.Scrollable ISurface.Style ISurface.ColorMixture ISurface.Background ISurface.Size ISurface.CaretLocation ISurface.Dirty ISurface.ManagedCaret ISurface.EnableAttributes(VideoAttribute) ISurface.DisableAttributes(VideoAttribute) ISurface.ScrollUp(int) ISurface.ScrollDown(int) ISurface.InsertEmptyLines(int) ISurface.DeleteLines(int) ISurface.ChangeTextStyle(int, Style) ISurface.WriteText(StyledText, bool) ISurface.WriteText(string, Style, bool) ISurface.WriteText(string, bool) ISurface.NextLine() ISurface.DrawText(IAsciiFont, string, Style, bool, bool) ISurface.DrawText(IAsciiFont, string, bool, bool) ISurface.DrawVerticalLine(int, Rune, Style) ISurface.DrawVerticalLine(int) ISurface.DrawHorizontalLine(int, Rune, Style) ISurface.DrawHorizontalLine(int) ISurface.DrawBorder(Rune, Rune, Rune, Rune, Rune, Rune, Rune, Rune, Style) ISurface.DrawBorder() ISurface.RemoveText(int) ISurface.GetText(int) ISurface.Clear(ClearStrategy) ISurface.Replace(ISurface, ReplaceStrategy) ISurface.Replace(ISurface, Rectangle, Point, ReplaceStrategy) ISurface.MarkDirty(int, int) ISurface.MarkDirty() ISurface.IsPointWithin(Point) ISurface.IsRectangleWithin(Rectangle) ISurface.Draw(Point, Rectangle, IDrawable) ISurface.Draw(Point, IDrawable) ISurface.LineDirty(int) ISurface.Destroy() IDrawSurface.DrawCell(Point, Rune, Style) Properties Pads Gets all child pads on this screen. IEnumerable<IPad> Pads { get; } Property Value IEnumerable<IPad> Remarks This operation is not thread safe. Exceptions ObjectDisposedException Screen is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Windows Gets all child windows on this screen. IEnumerable<IWindow> Windows { get; } Property Value IEnumerable<IWindow> Remarks This operation is not thread safe. Exceptions ObjectDisposedException Screen is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Methods Pad(Size) Creates a new pad. IPad Pad(Size size) Parameters size Size The pad size. Returns IPad A new pad object. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Screen is no longer usable. ArgumentOutOfRangeException The size is invalid. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Window(Rectangle) Creates a new sub-window in the parent window. IWindow Window(Rectangle area) Parameters area Rectangle The area of the window to put the sub-window in. Returns IWindow A new window object. Exceptions ObjectDisposedException Screen is no longer usable. ArgumentOutOfRangeException The area is outside the bounds of the parent. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't."
  },
  "api/Sharpie.Abstractions.ISoftLabelKeyManager.html": {
    "href": "api/Sharpie.Abstractions.ISoftLabelKeyManager.html",
    "title": "Interface ISoftLabelKeyManager | sharpie",
    "summary": "Interface ISoftLabelKeyManager Namespace Sharpie.Abstractions Assembly sharpie.dll Defines the traits needed to implement SoftLabelKeyManager. [PublicAPI] public interface ISoftLabelKeyManager Properties ColorMixture Gets or sets the color mixture of the window. ColorMixture ColorMixture { get; set; } Property Value ColorMixture Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal or the current window have been disposed. NotSupportedException The soft key labels are disabled. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Enabled Specifies if the manager is enabled. bool Enabled { get; } Property Value bool LabelCount Gets the number of labels within the soft key label panel. int LabelCount { get; } Property Value int Exceptions NotSupportedException The soft key labels are disabled. Style Gets or sets the style of the window. Style Style { get; set; } Property Value Style Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal or the current window have been disposed. NotSupportedException The soft key labels are disabled. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Terminal The terminal this manager belongs to. ITerminal Terminal { get; } Property Value ITerminal Methods Clear() Clears the soft key labels from the screen. They can be restored by calling Restore() method. void Clear() Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal or the current window have been disposed. NotSupportedException The soft key labels are disabled. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. DisableAttributes(VideoAttribute) Disables specified attributes and keep the others untouched. void DisableAttributes(VideoAttribute attributes) Parameters attributes VideoAttribute The attributes to disable. Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal or the current window have been disposed. NotSupportedException The soft key labels are disabled. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. EnableAttributes(VideoAttribute) Enables specified attributes and keep the others untouched. void EnableAttributes(VideoAttribute attributes) Parameters attributes VideoAttribute The attributes to enable. Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal or the current window have been disposed. NotSupportedException The soft key labels are disabled. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. MarkDirty() Marks the the soft key labels as dirty, and thus, eligible for refresh. void MarkDirty() Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal or the current window have been disposed. NotSupportedException The soft key labels are disabled. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Refresh() Refreshes the soft label keys. void Refresh() Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal or the current window have been disposed. NotSupportedException The soft key labels are disabled. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Restore() Restores the soft key labels to the screen. They can be cleared by calling Clear() method. void Restore() Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal or the current window have been disposed. NotSupportedException The soft key labels are disabled. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. SetLabel(int, string, SoftLabelKeyAlignment) Sets a given label within the soft key label panel. void SetLabel(int index, string title, SoftLabelKeyAlignment align) Parameters index int The index of the label. title string The title of the label. align SoftLabelKeyAlignment Alignment of the label title. Remarks This operation is not thread safe. Exceptions ArgumentNullException The title is null. ArgumentOutOfRangeException The index negative or greater than LabelCount. ObjectDisposedException The terminal has been disposed. NotSupportedException The soft key labels are disabled. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't."
  },
  "api/Sharpie.Abstractions.ISubPad.html": {
    "href": "api/Sharpie.Abstractions.ISubPad.html",
    "title": "Interface ISubPad | sharpie",
    "summary": "Interface ISubPad Namespace Sharpie.Abstractions Assembly sharpie.dll Describes the traits specific to the SubPad. [PublicAPI] public interface ISubPad : ISurface, IDrawSurface Inherited Members ISurface.Handle ISurface.Disposed ISurface.Scrollable ISurface.Style ISurface.ColorMixture ISurface.Background ISurface.CaretLocation ISurface.Dirty ISurface.ManagedCaret ISurface.EnableAttributes(VideoAttribute) ISurface.DisableAttributes(VideoAttribute) ISurface.ScrollUp(int) ISurface.ScrollDown(int) ISurface.InsertEmptyLines(int) ISurface.DeleteLines(int) ISurface.ChangeTextStyle(int, Style) ISurface.WriteText(StyledText, bool) ISurface.WriteText(string, Style, bool) ISurface.WriteText(string, bool) ISurface.NextLine() ISurface.DrawText(IAsciiFont, string, Style, bool, bool) ISurface.DrawText(IAsciiFont, string, bool, bool) ISurface.DrawVerticalLine(int, Rune, Style) ISurface.DrawVerticalLine(int) ISurface.DrawHorizontalLine(int, Rune, Style) ISurface.DrawHorizontalLine(int) ISurface.DrawBorder(Rune, Rune, Rune, Rune, Rune, Rune, Rune, Rune, Style) ISurface.DrawBorder() ISurface.RemoveText(int) ISurface.GetText(int) ISurface.Clear(ClearStrategy) ISurface.Replace(ISurface, ReplaceStrategy) ISurface.Replace(ISurface, Rectangle, Point, ReplaceStrategy) ISurface.MarkDirty(int, int) ISurface.MarkDirty() ISurface.IsPointWithin(Point) ISurface.IsRectangleWithin(Rectangle) ISurface.Draw(Point, Rectangle, IDrawable) ISurface.Draw(Point, IDrawable) ISurface.LineDirty(int) ISurface.Destroy() IDrawSurface.DrawCell(Point, Rune, Style) Properties Location Gets or sets the location of the sub-pad within its parent pad. Point Location { get; set; } Property Value Point Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException The value is outside the parent's bounds. ObjectDisposedException Sub-pad is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Pad The parent pad of this sub-pad. IPad Pad { get; } Property Value IPad Size Gets or sets the size of the sub-pad. Size Size { get; set; } Property Value Size Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException The value is outside the bounds. ObjectDisposedException Sub-pad is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Methods Duplicate() Duplicates and existing sub-pad, including its attributes. ISubPad Duplicate() Returns ISubPad A new sub-pad object. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Sub-pad is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't."
  },
  "api/Sharpie.Abstractions.ISubWindow.html": {
    "href": "api/Sharpie.Abstractions.ISubWindow.html",
    "title": "Interface ISubWindow | sharpie",
    "summary": "Interface ISubWindow Namespace Sharpie.Abstractions Assembly sharpie.dll Defines the traits implemented by the SubWindow class. [PublicAPI] public interface ISubWindow : ISurface, IDrawSurface Inherited Members ISurface.Handle ISurface.Disposed ISurface.Scrollable ISurface.Style ISurface.ColorMixture ISurface.Background ISurface.CaretLocation ISurface.Dirty ISurface.ManagedCaret ISurface.EnableAttributes(VideoAttribute) ISurface.DisableAttributes(VideoAttribute) ISurface.ScrollUp(int) ISurface.ScrollDown(int) ISurface.InsertEmptyLines(int) ISurface.DeleteLines(int) ISurface.ChangeTextStyle(int, Style) ISurface.WriteText(StyledText, bool) ISurface.WriteText(string, Style, bool) ISurface.WriteText(string, bool) ISurface.NextLine() ISurface.DrawText(IAsciiFont, string, Style, bool, bool) ISurface.DrawText(IAsciiFont, string, bool, bool) ISurface.DrawVerticalLine(int, Rune, Style) ISurface.DrawVerticalLine(int) ISurface.DrawHorizontalLine(int, Rune, Style) ISurface.DrawHorizontalLine(int) ISurface.DrawBorder(Rune, Rune, Rune, Rune, Rune, Rune, Rune, Rune, Style) ISurface.DrawBorder() ISurface.RemoveText(int) ISurface.GetText(int) ISurface.Clear(ClearStrategy) ISurface.Replace(ISurface, ReplaceStrategy) ISurface.Replace(ISurface, Rectangle, Point, ReplaceStrategy) ISurface.MarkDirty(int, int) ISurface.MarkDirty() ISurface.IsPointWithin(Point) ISurface.IsRectangleWithin(Rectangle) ISurface.Draw(Point, Rectangle, IDrawable) ISurface.Draw(Point, IDrawable) ISurface.LineDirty(int) ISurface.Destroy() IDrawSurface.DrawCell(Point, Rune, Style) Properties Location Gets or sets the location of the sub-window within its parent window. Point Location { get; set; } Property Value Point Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException The value is outside the parent's bounds. ObjectDisposedException Window is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Size Gets or sets the size of the sub-window. Size Size { get; set; } Property Value Size Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException The value is outside the bounds. ObjectDisposedException Window is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Window The parent window of this sub-window. IWindow Window { get; } Property Value IWindow Methods Duplicate() Duplicates this sub-window, including its attributes. ISubWindow Duplicate() Returns ISubWindow A new window object. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Screen is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't."
  },
  "api/Sharpie.Abstractions.ISurface.html": {
    "href": "api/Sharpie.Abstractions.ISurface.html",
    "title": "Interface ISurface | sharpie",
    "summary": "Interface ISurface Namespace Sharpie.Abstractions Assembly sharpie.dll Defines the base traits required for Window, Screen and Pad classes. [PublicAPI] public interface ISurface : IDrawSurface Inherited Members IDrawSurface.DrawCell(Point, Rune, Style) Properties Background Gets or sets the surface background. (Rune @char, Style style) Background { get; set; } Property Value (Rune char, Style style) Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CaretLocation Gets or sets the current position of the caret within the surface. Point CaretLocation { get; set; } Property Value Point Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException The value is outside the surface bounds. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. ColorMixture Gets or sets the color mixture of the surface. ColorMixture ColorMixture { get; set; } Property Value ColorMixture Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Dirty Specifies whether the surface has some \"dirty\" parts that need to be synchronized to the console. bool Dirty { get; } Property Value bool Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Disposed Checks if the surface has been disposed and is no longer usable. bool Disposed { get; } Property Value bool Handle The Curses handle for the surface. IntPtr Handle { get; } Property Value IntPtr Exceptions ObjectDisposedException Surface is no longer usable. ManagedCaret Controls whether the caret is managed by the application and should not be managed by the hardware. bool ManagedCaret { get; set; } Property Value bool Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Scrollable Gets or sets the ability of the surface to scroll its contents when writing needs a new line. bool Scrollable { get; set; } Property Value bool Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Size Gets the size of the surface. Size Size { get; } Property Value Size Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Style Gets or sets the style of the surface. Style Style { get; set; } Property Value Style Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Methods ChangeTextStyle(int, Style) Changes the style of the text on the current line and starting from the caret position. void ChangeTextStyle(int width, Style style) Parameters width int The number of characters to change. style Style The applied style. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Clear(ClearStrategy) Clears the contents of the row/surface. void Clear(ClearStrategy strategy = ClearStrategy.Full) Parameters strategy ClearStrategy The strategy to use. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. DeleteLines(int) Deletes lines lines starting with the current caret position. All lines below move up. void DeleteLines(int lines) Parameters lines int Number of lines to inserts. Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException The lines is less than one or greater than the size of the surface. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Destroy() Removes the surface form the parent, destroys all children and itself. void Destroy() Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. DisableAttributes(VideoAttribute) Disables specified attributes and keep the others untouched. void DisableAttributes(VideoAttribute attributes) Parameters attributes VideoAttribute The attributes to disable. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Draw(Point, IDrawable) Draws a given drawable to the surface. void Draw(Point location, IDrawable drawable) Parameters location Point The location of the drawing. drawable IDrawable The drawing to draw. Remarks This operation is not thread safe. Exceptions ArgumentNullException Thrown if drawable is null. ArgumentOutOfRangeException Thrown if location is out of bounds. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Draw(Point, Rectangle, IDrawable) Draws a given drawable to the surface. void Draw(Point location, Rectangle area, IDrawable drawable) Parameters location Point The location of the drawing. area Rectangle The area of the drawing to draw. drawable IDrawable The drawing to draw. Remarks This operation is not thread safe. Exceptions ArgumentNullException Thrown if drawable is null. ArgumentOutOfRangeException Thrown if location or area are out of bounds. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. DrawBorder() Draws a border around the surface's edges using standard characters. void DrawBorder() Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. DrawBorder(Rune, Rune, Rune, Rune, Rune, Rune, Rune, Rune, Style) Draws a vertical line from the current caret position downwards. void DrawBorder(Rune leftSideChar, Rune rightSideChar, Rune topSideChar, Rune bottomSideChar, Rune topLeftCornerChar, Rune topRightCornerChar, Rune bottomLeftCornerChar, Rune bottomRightCornerChar, Style style) Parameters leftSideChar Rune The left-side character. rightSideChar Rune The right-side character. topSideChar Rune The top-side character. bottomSideChar Rune The bottom-side character. topLeftCornerChar Rune The top-left corner character. topRightCornerChar Rune The top-right corner character. bottomLeftCornerChar Rune The bottom-left corner character. bottomRightCornerChar Rune The bottom-right corner character. style Style The style to use. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. DrawHorizontalLine(int) Draws a horizontal line using the standard line character from the current caret position downwards. void DrawHorizontalLine(int length) Parameters length int The length of the line. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. DrawHorizontalLine(int, Rune, Style) Draws a horizontal line from the current caret position downwards. void DrawHorizontalLine(int length, Rune @char, Style style) Parameters length int The length of the line. char Rune The character to use for the line. style Style The style to use. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. DrawText(IAsciiFont, string, Style, bool, bool) Draws text using an ASCII font at the caret position at the current surface and advances the caret. void DrawText(IAsciiFont font, string text, Style style, bool interpretSpecialChars = true, bool wrap = true) Parameters font IAsciiFont The ASCII font to draw with. text string The text to write. style Style The style of the text. interpretSpecialChars bool If true, special characters will be treated as such (e.g. \\n) wrap bool If true, text will be wrapped automatically to next line. Remarks This operation is not thread safe. Exceptions ArgumentNullException Thrown if font or text are null. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. DrawText(IAsciiFont, string, bool, bool) Draws text using an ASCII font at the caret position at the current surface and advances the caret. void DrawText(IAsciiFont font, string text, bool interpretSpecialChars = true, bool wrap = true) Parameters font IAsciiFont The ASCII font to draw with. text string The text to write. interpretSpecialChars bool If true, special characters will be treated as such (e.g. \\n) wrap bool If true, text will be wrapped automatically to next line. Remarks This operation is not thread safe. Exceptions ArgumentNullException Thrown if font or text are null. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. DrawVerticalLine(int) Draws a vertical line using the standard line character from the current caret position downwards. void DrawVerticalLine(int length) Parameters length int The length of the line. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. DrawVerticalLine(int, Rune, Style) Draws a vertical line from the current caret position downwards. void DrawVerticalLine(int length, Rune @char, Style style) Parameters length int The length of the line. char Rune The character to use for the line. style Style The style to use. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. EnableAttributes(VideoAttribute) Enables specified attributes and keep the others untouched. void EnableAttributes(VideoAttribute attributes) Parameters attributes VideoAttribute The attributes to enable. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. GetText(int) Gets the text from the surface at the caret position to the right. (Rune @char, Style style)[] GetText(int count) Parameters count int The number of characters to get. Returns (Rune char, Style style)[] Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. InsertEmptyLines(int) Inserts lines empty lines at the current caret position. void InsertEmptyLines(int lines) Parameters lines int Number of lines to inserts. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. IsPointWithin(Point) Checks if a given point fits within the current surface. bool IsPointWithin(Point point) Parameters point Point Returns bool The result of the check. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. IsRectangleWithin(Rectangle) Checks if a given rectangle fits within the current surface. bool IsRectangleWithin(Rectangle rect) Parameters rect Rectangle Returns bool The result of the check. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. LineDirty(int) Checks if the line at y is dirty. bool LineDirty(int y) Parameters y int Returns bool Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. MarkDirty() Marks the entire contents of the surface as Dirty. void MarkDirty() Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. MarkDirty(int, int) Marks a number of lines within the surface as Dirty. void MarkDirty(int y, int count) Parameters y int The line to start with. count int The count of lines to mark dirty. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. NextLine() Helper method that moves the caret to the start of the next line. If the surface is Scrollable, and the caret if on the last line, it will push the contents of the surface up by one line. void NextLine() Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. RemoveText(int) Removes the text under the caret and moves the contents of the line to the left. void RemoveText(int count) Parameters count int The number of characters to remove. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Replace(ISurface, ReplaceStrategy) Replaces the content of a given surface with the contents of the current surface. void Replace(ISurface surface, ReplaceStrategy strategy) Parameters surface ISurface The surface to copy contents to. strategy ReplaceStrategy The used strategy. Remarks This operation is not thread safe. Exceptions ArgumentNullException The surface is null. ArgumentException The contents of surface cannot be replaced. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Replace(ISurface, Rectangle, Point, ReplaceStrategy) Replaces the content of a given surface with the contents of the current surface. void Replace(ISurface surface, Rectangle srcRect, Point destPos, ReplaceStrategy strategy) Parameters surface ISurface The surface to copy contents to. srcRect Rectangle The source rectangle to copy. destPos Point The destination position. strategy ReplaceStrategy The used strategy. Remarks This operation is not thread safe. Exceptions ArgumentNullException The surface is null. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. ScrollDown(int) Scrolls the contents of the surface lines down. Only works for scrollable surfaces. void ScrollDown(int lines) Parameters lines int Number of lines to scroll. Remarks This operation is not thread safe. Exceptions NotSupportedException The Scrollable is false. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. ScrollUp(int) Scrolls the contents of the surface lines up. Only works for scrollable surfaces. void ScrollUp(int lines) Parameters lines int Number of lines to scroll. Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException The lines is less than one or greater than the size of the surface. NotSupportedException The Scrollable is false. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. WriteText(StyledText, bool) Writes a text at the caret position at the current surface and advances the caret. void WriteText(StyledText text, bool wrap = true) Parameters text StyledText The styled text to write. wrap bool If true, text will be wrapped automatically to next line. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. WriteText(string, Style, bool) Writes a text at the caret position at the current surface and advances the caret. void WriteText(string text, Style style, bool wrap = true) Parameters text string The text to write. style Style The style of the text. wrap bool If true, text will be wrapped automatically to next line. Remarks This operation is not thread safe. Exceptions ArgumentNullException The text is null. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. WriteText(string, bool) Writes a text at the caret position at the current surface and advances the caret. void WriteText(string text, bool wrap = true) Parameters text string The text to write. wrap bool If true, text will be wrapped automatically to next line. Remarks This operation is not thread safe. Exceptions ArgumentNullException The text is null. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't."
  },
  "api/Sharpie.Abstractions.ITerminal.html": {
    "href": "api/Sharpie.Abstractions.ITerminal.html",
    "title": "Interface ITerminal | sharpie",
    "summary": "Interface ITerminal Namespace Sharpie.Abstractions Assembly sharpie.dll Defines the traits needed to implement a terminal. The only existing implementation of this interface is Terminal class. [PublicAPI] public interface ITerminal Properties BaudRate Gets the terminal's baud rate. int BaudRate { get; } Property Value int Colors Provides access to the terminal's color management. IColorManager Colors { get; } Property Value IColorManager Exceptions ObjectDisposedException The terminal has been disposed. CurrentEraseChar Gets the currently defined erase character. null is returned if none is defined. Rune? CurrentEraseChar { get; } Property Value Rune? CurrentKillChar Gets the currently defined kill character. null is returned if none is defined. Rune? CurrentKillChar { get; } Property Value Rune? Curses The Curses backend. ICursesBackend Curses { get; } Property Value ICursesBackend CursesVersion Returns the version of the Curses library in use. string? CursesVersion { get; } Property Value string Description Returns the long description of the terminal. string? Description { get; } Property Value string Disposed Checks whether the terminal has been disposed of and is no longer usable. bool Disposed { get; } Property Value bool Events The event pump instance that can be used to read events from the terminal. IEventPump Events { get; } Property Value IEventPump Exceptions ObjectDisposedException The terminal has been disposed. Footer The footer surface. Only initialized if AllocateFooter was set. ITerminalSurface? Footer { get; } Property Value ITerminalSurface Exceptions ObjectDisposedException The terminal has been disposed. Header The header surface. Only initialized if AllocateHeader was set. ITerminalSurface? Header { get; } Property Value ITerminalSurface Exceptions ObjectDisposedException The terminal has been disposed. Name Returns the name of the terminal. string? Name { get; } Property Value string Screen The screen instance. Use this property to access the entire screen functionality. IScreen Screen { get; } Property Value IScreen Exceptions ObjectDisposedException The terminal has been disposed. SoftLabelKeys Provides access to the terminal's color management. ISoftLabelKeyManager SoftLabelKeys { get; } Property Value ISoftLabelKeyManager Exceptions ObjectDisposedException The terminal has been disposed. SupportedAttributes Gets the combination of supported terminal attributes. VideoAttribute SupportedAttributes { get; } Property Value VideoAttribute Methods Alert(bool) Attempts to notify the user with audio or flashing alert. void Alert(bool silent) Parameters silent bool The alert mode. Remarks The actual notification depends on terminal support. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. AtomicRefresh() Creates a batch update lock. All refreshes are batched together until the batch is disposed. IDisposable AtomicRefresh() Returns IDisposable A disposable object that need to be disposed to release the batch update lock. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Delay(Func<Terminal, Task>, int) Sets up a delayed action that is to be executed after some time. IInterval Delay(Func<Terminal, Task> action, int delayMillis) Parameters action Func<Terminal, Task> The action to be executed. delayMillis int The delay in milliseconds. Returns IInterval The interval object. Exceptions ArgumentOutOfRangeException Thrown if delayMillis is negative. Delay<TState>(Func<Terminal, TState?, Task>, int, TState?) Sets up a delayed action that is to be executed after some time. IInterval Delay<TState>(Func<Terminal, TState?, Task> action, int delayMillis, TState? state) Parameters action Func<Terminal, TState, Task> The action to be executed. delayMillis int The delay in milliseconds. state TState User-supplied state object. Returns IInterval The interval object. Type Parameters TState The type of the state object. Exceptions ArgumentOutOfRangeException Thrown if delayMillis is negative. Delegate(Func<Task>) Delegates an action to be executed on the main thread. void Delegate(Func<Task> action) Parameters action Func<Task> The action to execute. Exceptions ArgumentNullException Thrown if action is null. ObjectDisposedException The terminal has been disposed. Repeat(Func<Terminal, Task>, int, bool) Sets up a delayed action that is to be executed after some time. IInterval Repeat(Func<Terminal, Task> action, int intervalMillis, bool immediate = false) Parameters action Func<Terminal, Task> The action to be executed. intervalMillis int The interval in milliseconds. immediate bool If true, triggers the execution of the action immediately. Returns IInterval The interval object. Exceptions ArgumentOutOfRangeException Thrown if intervalMillis is negative. Repeat<TState>(Func<Terminal, TState?, Task>, int, bool, TState?) Sets up a delayed action that is to be executed after some time. IInterval Repeat<TState>(Func<Terminal, TState?, Task> action, int intervalMillis, bool immediate = false, TState? state = default) Parameters action Func<Terminal, TState, Task> The action to be executed. intervalMillis int The interval in milliseconds. immediate bool If true, triggers the execution of the action immediately. state TState User-supplied state object. Returns IInterval The interval object. Type Parameters TState The type of the state object. Exceptions ArgumentOutOfRangeException Thrown if intervalMillis is negative. Run(Func<ITerminal, Event, Task>, bool) Runs the application main loop and dispatches each event to eventAction. void Run(Func<ITerminal, Event, Task> eventAction, bool stopOnCtrlC = true) Parameters eventAction Func<ITerminal, Event, Task> The method to accept the events. stopOnCtrlC bool Set to true if CTRL+C should interrupt the main loop. Remarks This operation is not thread safe. Exceptions ArgumentNullException Thrown when eventAction is null. InvalidOperationException Thrown if another Run(Func<ITerminal, Event, Task>, bool) is already running. ObjectDisposedException The terminal has been disposed. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. SetTitle(string) Sets the terminal title. void SetTitle(string title) Parameters title string The title of the terminal. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Stop(bool) Enqueues a stop signal for the Run(Func<ITerminal, Event, Task>, bool) method. void Stop(bool wait = false) Parameters wait bool If true, waits until running completes."
  },
  "api/Sharpie.Abstractions.ITerminalSurface.html": {
    "href": "api/Sharpie.Abstractions.ITerminalSurface.html",
    "title": "Interface ITerminalSurface | sharpie",
    "summary": "Interface ITerminalSurface Namespace Sharpie.Abstractions Assembly sharpie.dll Defines the base traits required for TerminalSurface class. [PublicAPI] public interface ITerminalSurface : ISurface, IDrawSurface Inherited Members ISurface.Handle ISurface.Disposed ISurface.Scrollable ISurface.Style ISurface.ColorMixture ISurface.Background ISurface.Size ISurface.CaretLocation ISurface.Dirty ISurface.ManagedCaret ISurface.EnableAttributes(VideoAttribute) ISurface.DisableAttributes(VideoAttribute) ISurface.ScrollUp(int) ISurface.ScrollDown(int) ISurface.InsertEmptyLines(int) ISurface.DeleteLines(int) ISurface.ChangeTextStyle(int, Style) ISurface.WriteText(StyledText, bool) ISurface.WriteText(string, Style, bool) ISurface.WriteText(string, bool) ISurface.NextLine() ISurface.DrawText(IAsciiFont, string, Style, bool, bool) ISurface.DrawText(IAsciiFont, string, bool, bool) ISurface.DrawVerticalLine(int, Rune, Style) ISurface.DrawVerticalLine(int) ISurface.DrawHorizontalLine(int, Rune, Style) ISurface.DrawHorizontalLine(int) ISurface.DrawBorder(Rune, Rune, Rune, Rune, Rune, Rune, Rune, Rune, Style) ISurface.DrawBorder() ISurface.RemoveText(int) ISurface.GetText(int) ISurface.Clear(ClearStrategy) ISurface.Replace(ISurface, ReplaceStrategy) ISurface.Replace(ISurface, Rectangle, Point, ReplaceStrategy) ISurface.MarkDirty(int, int) ISurface.MarkDirty() ISurface.IsPointWithin(Point) ISurface.IsRectangleWithin(Rectangle) ISurface.Draw(Point, Rectangle, IDrawable) ISurface.Draw(Point, IDrawable) ISurface.LineDirty(int) ISurface.Destroy() IDrawSurface.DrawCell(Point, Rune, Style) Properties ImmediateRefresh Set or get the immediate refresh capability of the surface. bool ImmediateRefresh { get; set; } Property Value bool Remarks Immediate refresh will make the surface redraw affected areas on each change. This might be very slow for most use cases so the default is false. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Terminal The terminal this surface belongs to. ITerminal Terminal { get; } Property Value ITerminal Methods Refresh() Redraws all the dirty lines of the surface to the terminal. If AtomicRefresh() is active, all refreshes are batched together until the lock is released. void Refresh() Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Refresh(int, int) Redraws the given lines of the window to the terminal. void Refresh(int y, int count) Parameters y int The starting line to refresh. count int The number of lines to refresh. Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException Thrown if y or count are negative. InvalidOperationException Thrown if an atomic refresh is in progress. ObjectDisposedException Window is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't."
  },
  "api/Sharpie.Abstractions.IWindow.html": {
    "href": "api/Sharpie.Abstractions.IWindow.html",
    "title": "Interface IWindow | sharpie",
    "summary": "Interface IWindow Namespace Sharpie.Abstractions Assembly sharpie.dll Defines the traits implemented by the Window class. [PublicAPI] public interface IWindow : ITerminalSurface, ISurface, IDrawSurface Inherited Members ITerminalSurface.Terminal ITerminalSurface.ImmediateRefresh ITerminalSurface.Refresh() ITerminalSurface.Refresh(int, int) ISurface.Handle ISurface.Disposed ISurface.Scrollable ISurface.Style ISurface.ColorMixture ISurface.Background ISurface.CaretLocation ISurface.Dirty ISurface.ManagedCaret ISurface.EnableAttributes(VideoAttribute) ISurface.DisableAttributes(VideoAttribute) ISurface.ScrollUp(int) ISurface.ScrollDown(int) ISurface.InsertEmptyLines(int) ISurface.DeleteLines(int) ISurface.ChangeTextStyle(int, Style) ISurface.WriteText(StyledText, bool) ISurface.WriteText(string, Style, bool) ISurface.WriteText(string, bool) ISurface.NextLine() ISurface.DrawText(IAsciiFont, string, Style, bool, bool) ISurface.DrawText(IAsciiFont, string, bool, bool) ISurface.DrawVerticalLine(int, Rune, Style) ISurface.DrawVerticalLine(int) ISurface.DrawHorizontalLine(int, Rune, Style) ISurface.DrawHorizontalLine(int) ISurface.DrawBorder(Rune, Rune, Rune, Rune, Rune, Rune, Rune, Rune, Style) ISurface.DrawBorder() ISurface.RemoveText(int) ISurface.GetText(int) ISurface.Clear(ClearStrategy) ISurface.Replace(ISurface, ReplaceStrategy) ISurface.Replace(ISurface, Rectangle, Point, ReplaceStrategy) ISurface.MarkDirty(int, int) ISurface.MarkDirty() ISurface.IsPointWithin(Point) ISurface.IsRectangleWithin(Rectangle) ISurface.Draw(Point, Rectangle, IDrawable) ISurface.Draw(Point, IDrawable) ISurface.LineDirty(int) ISurface.Destroy() IDrawSurface.DrawCell(Point, Rune, Style) Properties Location Gets or sets the location of the window within its parent. Point Location { get; set; } Property Value Point Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException The value is outside the parent's bounds. ObjectDisposedException Window is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Screen The parent screen of this window. IScreen Screen { get; } Property Value IScreen Size Gets or sets the size of the window. Size Size { get; set; } Property Value Size Remarks This operation is not thread safe. The new size will be adjusted to match the parent's available space. Exceptions ArgumentOutOfRangeException The value is outside the bounds. ObjectDisposedException Window is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. SubWindows Lists of children of this object. IEnumerable<ISubWindow> SubWindows { get; } Property Value IEnumerable<ISubWindow> Remarks This operation is not thread safe. Exceptions ObjectDisposedException Window is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Visible Gets or sets the value indicating if the window is visible. bool Visible { get; set; } Property Value bool Remarks This operation is not thread safe. Exceptions ObjectDisposedException Window is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Methods BringToFront() Send the window to the front of the Z-order. void BringToFront() Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Duplicate() Duplicates and existing window, including its attributes. IWindow Duplicate() Returns IWindow A new window object. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Screen is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. SendToBack() Send the window to the back of the Z-order. void SendToBack() Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. SubWindow(Rectangle) Creates a new sub-window in the parent window. ISubWindow SubWindow(Rectangle area) Parameters area Rectangle The area of the window to put the sub-window in. Returns ISubWindow A new window object. Exceptions ObjectDisposedException Screen is no longer usable. ArgumentOutOfRangeException The area is outside the bounds of the parent. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't."
  },
  "api/Sharpie.Abstractions.html": {
    "href": "api/Sharpie.Abstractions.html",
    "title": "Namespace Sharpie.Abstractions | sharpie",
    "summary": "Namespace Sharpie.Abstractions Interfaces IAsciiFont Defines the traits implemented by ASCII font providers. IColorManager Defines the traits needed to implement ColorManager. ICursesBackend Interface provides access to the Curses functionality. Use the Sharpie.Backend.NCursesBackend property to access the actual implementation. IDrawSurface Defines the traits needed by an object to draw a IDrawable onto. IDrawable Defines the trains required for an object to be drawable onto a IDrawSurface. IEventPump Defines the traits needed to implement EventPump. IInterval Describes a timed interval. IPad Describes the traits specific to the Pad. IScreen Defines the traits that a Screen implements. ISoftLabelKeyManager Defines the traits needed to implement SoftLabelKeyManager. ISubPad Describes the traits specific to the SubPad. ISubWindow Defines the traits implemented by the SubWindow class. ISurface Defines the base traits required for Window, Screen and Pad classes. ITerminal Defines the traits needed to implement a terminal. The only existing implementation of this interface is Terminal class. ITerminalSurface Defines the base traits required for TerminalSurface class. IWindow Defines the traits implemented by the Window class. Delegates ICursesBackend.ripoffline_callback"
  },
  "api/Sharpie.Backend.ComplexChar.html": {
    "href": "api/Sharpie.Backend.ComplexChar.html",
    "title": "Class ComplexChar | sharpie",
    "summary": "Class ComplexChar Namespace Sharpie.Backend Assembly sharpie.dll A Curses, back-end-specific complex character that encodes the rune and its attributes. [PublicAPI] public sealed class ComplexChar Inheritance object ComplexChar Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string? ToString() Returns string A string that represents the current object. Operators operator ==(ComplexChar?, ComplexChar?) Equality comparison operator. public static bool operator ==(ComplexChar? left, ComplexChar? right) Parameters left ComplexChar The left value. right ComplexChar The right value. Returns bool The result of the comparison. operator !=(ComplexChar?, ComplexChar?) Inequality comparison operator. public static bool operator !=(ComplexChar? left, ComplexChar? right) Parameters left ComplexChar The left value. right ComplexChar The right value. Returns bool The result of the comparison."
  },
  "api/Sharpie.Backend.CursesBackend.html": {
    "href": "api/Sharpie.Backend.CursesBackend.html",
    "title": "Class CursesBackend | sharpie",
    "summary": "Class CursesBackend Namespace Sharpie.Backend Assembly sharpie.dll Provides functionality for obtaining ICursesBackend instances. [PublicAPI] public static class CursesBackend Inheritance object CursesBackend Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Load(CursesBackendFlavor, params CursesBackendFlavor[]) Looks up and loads the Curses backend based on the specified flavor. public static ICursesBackend Load(CursesBackendFlavor flavor = CursesBackendFlavor.Any, params CursesBackendFlavor[] otherFlavors) Parameters flavor CursesBackendFlavor The desired Curses flavor. otherFlavors CursesBackendFlavor[] Additional desired Curses flavors. Returns ICursesBackend The loaded Curses backend. Exceptions CursesInitializationException Thrown if no suitable provider was found. Load(CursesBackendType, string, params string[]) Loads the Curses backend based on the specified type. public static ICursesBackend Load(CursesBackendType type, string path, params string[] otherPaths) Parameters type CursesBackendType The backend type. path string The path for the library. otherPaths string[] The list of additional paths for the library. Returns ICursesBackend The loaded Curses backend. Exceptions CursesInitializationException Thrown if no suitable provider was found."
  },
  "api/Sharpie.Backend.CursesBackendFlavor.html": {
    "href": "api/Sharpie.Backend.CursesBackendFlavor.html",
    "title": "Enum CursesBackendFlavor | sharpie",
    "summary": "Enum CursesBackendFlavor Namespace Sharpie.Backend Assembly sharpie.dll Lists the supported backend Curses libraries' flavors. [PublicAPI] public enum CursesBackendFlavor Fields Any = 11 Any available back-end. Will select the best option available on the platform. Install Curses-Libs-PdCursesMod, Curses-Libs-NCurses or Curses-Libs-PdCurses packages to maximize the number of supported platform combinations. AnyGui = 10 Any back-end that uses Windows GUI, or SDL1/SDL2 protocols. Will select the best option available on the platform. Install Curses-Libs-PdCursesMod, Curses-Libs-NCurses or Curses-Libs-PdCurses packages to maximize the number of supported platform combinations. AnyVirtualTerminal = 9 Any back-end that uses Virtual Terminal (xt) protocol. Will select the best option available on the platform. Install Curses-Libs-PdCursesMod, Curses-Libs-NCurses or Curses-Libs-PdCurses packages to maximize the number of supported platform combinations. AnyWindowsConsole = 8 Any back-end that uses Windows Console protocol. Will select the best option available on the platform. Install Curses-Libs-PdCursesMod, Curses-Libs-NCurses or Curses-Libs-PdCurses packages to maximize the number of supported platform combinations. NCurses = 1 The NCurses back-end. Available by default on most POSIX-compliant operating systems such as Linux, FreeBSD an MacOS. Not available by default on Windows. Install Curses-Libs-NCurses package to obtain pre-built versions that includes Windows. This is version uses whatever available protocol is built into the found library. PdCurses = 2 The PDCurses back-end. Not available by default on operating systems. For some Linuxes and FreeBSD a prebuilt library can be installed from package managers. Install Curses-Libs-PdCurses package to obtain pre-built versions that add Windows Console support. Does not support SoftLabelKeyManager. Not recommended for use. PdCursesMod for a better alternative. This is version uses whatever available protocol is built into the found library. PdCursesMod = 4 The PDCursesMod back-end. This is an advanced version of PdCurses with more platform availability and support. Not available by default on any operating systems. Install Curses-Libs-PdCursesMod package to obtain pre-built versions for Windows. This is version uses whatever available protocol is built into the found library. PdCursesModGui = 7 The PDCursesMod back-end. This is an advanced version of PdCurses with more platform availability and support. Not available by default on any operating systems. Install Curses-Libs-PdCursesMod package to obtain pre-built versions for Windows, Linux and MacOS. This is version uses Windows GUI, or SDL1/SDL2 protocols. Requires sdl/sdl2 and sdl_ttf to be installed if this protocol is used. PdCursesModVirtualTerminal = 6 The PDCursesMod back-end. This is an advanced version of PdCurses with more platform availability and support. Not available by default on any operating systems. Install Curses-Libs-PdCursesMod package to obtain pre-built versions for Windows, Linux and MacOS. This is version uses Virtual Terminal (xt) protocol. PdCursesModWindowsConsole = 5 The PDCursesMod back-end. This is an advanced version of PdCurses with more platform availability and support. Not available by default on any operating systems. Install Curses-Libs-PdCursesMod package to obtain pre-built versions for Windows. This is version uses Windows Console protocol. PdCursesWindowsConsole = 3 The PDCurses back-end. Not available by default on operating systems. For some Linuxes and FreeBSD a prebuilt library can be installed from package managers. Install Curses-Libs-PdCurses package to obtain pre-built versions that add Windows Console support. Does not support SoftLabelKeyManager. Not recommended for use. PdCursesModWindowsConsole for a better alternative. This is version uses Windows Console protocol."
  },
  "api/Sharpie.Backend.CursesBackendType.html": {
    "href": "api/Sharpie.Backend.CursesBackendType.html",
    "title": "Enum CursesBackendType | sharpie",
    "summary": "Enum CursesBackendType Namespace Sharpie.Backend Assembly sharpie.dll Lists the supported backend Curses libraries. [PublicAPI] public enum CursesBackendType Fields NCurses = 1 The NCurses back-end. Available by default on most POSIX-compliant operating systems such as Linux, FreeBSD an MacOS. Not available by default on Windows. PdCurses = 2 The PDCurses back-end. Not available by default on operating systems. For some Linuxes and FreeBSD a prebuilt library can be installed from package managers. Does not support SoftLabelKeyManager. Not recommended for use. PdCursesMod for a better alternative. PdCursesMod = 3 The PDCursesMod back-end. This is an advanced version of PdCurses with more platform availability and support. Not available by default on any operating systems."
  },
  "api/Sharpie.Backend.CursesCharEvent.html": {
    "href": "api/Sharpie.Backend.CursesCharEvent.html",
    "title": "Class CursesCharEvent | sharpie",
    "summary": "Class CursesCharEvent Namespace Sharpie.Backend Assembly sharpie.dll Character input event. public sealed record CursesCharEvent : CursesEvent, IEquatable<CursesEvent>, IEquatable<CursesCharEvent> Inheritance object CursesEvent CursesCharEvent Implements IEquatable<CursesEvent> IEquatable<CursesCharEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CursesCharEvent(string?, char, ModifierKey) Character input event. public CursesCharEvent(string? Name, char Char, ModifierKey Modifiers) Parameters Name string The description of the character (backend-specific). Char char The character that was read from the terminal. Modifiers ModifierKey The key modifiers. Properties Char The character that was read from the terminal. public char Char { get; init; } Property Value char Modifiers The key modifiers. public ModifierKey Modifiers { get; init; } Property Value ModifierKey Name The description of the character (backend-specific). public string? Name { get; init; } Property Value string"
  },
  "api/Sharpie.Backend.CursesEvent.html": {
    "href": "api/Sharpie.Backend.CursesEvent.html",
    "title": "Class CursesEvent | sharpie",
    "summary": "Class CursesEvent Namespace Sharpie.Backend Assembly sharpie.dll The base type for all back-end independent Curses events. public abstract record CursesEvent : IEquatable<CursesEvent> Inheritance object CursesEvent Implements IEquatable<CursesEvent> Derived CursesCharEvent CursesKeyEvent CursesMouseEvent CursesResizeEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Sharpie.Backend.CursesKeyEvent.html": {
    "href": "api/Sharpie.Backend.CursesKeyEvent.html",
    "title": "Class CursesKeyEvent | sharpie",
    "summary": "Class CursesKeyEvent Namespace Sharpie.Backend Assembly sharpie.dll Key input event. public sealed record CursesKeyEvent : CursesEvent, IEquatable<CursesEvent>, IEquatable<CursesKeyEvent> Inheritance object CursesEvent CursesKeyEvent Implements IEquatable<CursesEvent> IEquatable<CursesKeyEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CursesKeyEvent(string?, Key, ModifierKey) Key input event. public CursesKeyEvent(string? Name, Key Key, ModifierKey Modifiers) Parameters Name string The description of the character (backend-specific). Key Key The key that was read from the terminal. Modifiers ModifierKey The key modifiers. Properties Key The key that was read from the terminal. public Key Key { get; init; } Property Value Key Modifiers The key modifiers. public ModifierKey Modifiers { get; init; } Property Value ModifierKey Name The description of the character (backend-specific). public string? Name { get; init; } Property Value string"
  },
  "api/Sharpie.Backend.CursesMouseEvent.html": {
    "href": "api/Sharpie.Backend.CursesMouseEvent.html",
    "title": "Class CursesMouseEvent | sharpie",
    "summary": "Class CursesMouseEvent Namespace Sharpie.Backend Assembly sharpie.dll Mouse input event. public sealed record CursesMouseEvent : CursesEvent, IEquatable<CursesEvent>, IEquatable<CursesMouseEvent> Inheritance object CursesEvent CursesMouseEvent Implements IEquatable<CursesEvent> IEquatable<CursesMouseEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CursesMouseEvent(int, int, MouseButton, MouseButtonState, ModifierKey) Mouse input event. public CursesMouseEvent(int X, int Y, MouseButton Button, MouseButtonState State, ModifierKey Modifiers) Parameters X int The mouse X coordinate. Y int The mouse Y coordinate. Button MouseButton The mouse button. State MouseButtonState The mouse button state. Modifiers ModifierKey Key modifiers. Properties Button The mouse button. public MouseButton Button { get; init; } Property Value MouseButton Modifiers Key modifiers. public ModifierKey Modifiers { get; init; } Property Value ModifierKey State The mouse button state. public MouseButtonState State { get; init; } Property Value MouseButtonState X The mouse X coordinate. public int X { get; init; } Property Value int Y The mouse Y coordinate. public int Y { get; init; } Property Value int"
  },
  "api/Sharpie.Backend.CursesMouseState.html": {
    "href": "api/Sharpie.Backend.CursesMouseState.html",
    "title": "Struct CursesMouseState | sharpie",
    "summary": "Struct CursesMouseState Namespace Sharpie.Backend Assembly sharpie.dll Curses mouse event - encapsulates the data sent by the backend related to mouse events. [PublicAPI] public struct CursesMouseState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Sharpie.Backend.CursesResizeEvent.html": {
    "href": "api/Sharpie.Backend.CursesResizeEvent.html",
    "title": "Class CursesResizeEvent | sharpie",
    "summary": "Class CursesResizeEvent Namespace Sharpie.Backend Assembly sharpie.dll Terminal resize event. public sealed record CursesResizeEvent : CursesEvent, IEquatable<CursesEvent>, IEquatable<CursesResizeEvent> Inheritance object CursesEvent CursesResizeEvent Implements IEquatable<CursesEvent> IEquatable<CursesResizeEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Sharpie.Backend.NCursesKeyCode.html": {
    "href": "api/Sharpie.Backend.NCursesKeyCode.html",
    "title": "Enum NCursesKeyCode | sharpie",
    "summary": "Enum NCursesKeyCode Namespace Sharpie.Backend Assembly sharpie.dll NCurses specific key codes. public enum NCursesKeyCode : uint Fields AltCtrlEnd = 532 AltCtrlHome = 537 AltCtrlPageDown = 552 AltCtrlPageUp = 557 AltDown = 523 AltEnd = 528 AltF1 = 301 AltF10 = 310 AltF11 = 311 AltF12 = 312 AltF2 = 302 AltF3 = 303 AltF4 = 304 AltF5 = 305 AltF6 = 306 AltF7 = 307 AltF8 = 308 AltF9 = 309 AltHome = 533 AltLeft = 543 AltPageDown = 548 AltPageUp = 553 AltRight = 558 AltUp = 564 BackTab = 353 Backspace = 263 CtrlDown = 525 CtrlEnd = 530 CtrlF1 = 289 CtrlF10 = 298 CtrlF11 = 299 CtrlF12 = 300 CtrlF2 = 290 CtrlF3 = 291 CtrlF4 = 292 CtrlF5 = 293 CtrlF6 = 294 CtrlF7 = 295 CtrlF8 = 296 CtrlF9 = 297 CtrlHome = 535 CtrlLeft = 545 CtrlPageDown = 550 CtrlPageUp = 555 CtrlRight = 560 CtrlUp = 566 Delete = 330 Down = 258 End = 360 F1 = 265 F10 = 274 F11 = 275 F12 = 276 F2 = 266 F3 = 267 F4 = 268 F5 = 269 F6 = 270 F7 = 271 F8 = 272 F9 = 273 Home = 262 Insert = 331 Left = 260 Mouse = 409 PageDown = 338 PageUp = 339 Resize = 410 Right = 261 ShiftAltDown = 524 ShiftAltEnd = 529 ShiftAltF1 = 313 ShiftAltF10 = 322 ShiftAltF11 = 323 ShiftAltF12 = 324 ShiftAltF2 = 314 ShiftAltF3 = 315 ShiftAltF4 = 316 ShiftAltF5 = 317 ShiftAltF6 = 318 ShiftAltF7 = 319 ShiftAltF8 = 320 ShiftAltF9 = 321 ShiftAltHome = 534 ShiftAltLeft = 544 ShiftAltPageDown = 549 ShiftAltPageUp = 554 ShiftAltRight = 559 ShiftAltUp = 565 ShiftCtrlDown = 526 ShiftCtrlEnd = 531 ShiftCtrlHome = 536 ShiftCtrlLeft = 546 ShiftCtrlPageDown = 551 ShiftCtrlPageUp = 556 ShiftCtrlRight = 561 ShiftCtrlUp = 567 ShiftDown = 336 ShiftEnd = 386 ShiftF1 = 277 ShiftF10 = 286 ShiftF11 = 287 ShiftF12 = 288 ShiftF2 = 278 ShiftF3 = 279 ShiftF4 = 280 ShiftF5 = 281 ShiftF6 = 282 ShiftF7 = 283 ShiftF8 = 284 ShiftF9 = 285 ShiftHome = 391 ShiftLeft = 393 ShiftPageDown = 396 ShiftPageUp = 398 ShiftRight = 402 ShiftUp = 337 Up = 259 Yes = 256"
  },
  "api/Sharpie.Backend.PdCursesKeyCode.html": {
    "href": "api/Sharpie.Backend.PdCursesKeyCode.html",
    "title": "Enum PdCursesKeyCode | sharpie",
    "summary": "Enum PdCursesKeyCode Namespace Sharpie.Backend Assembly sharpie.dll PDCurses specific key codes. public enum PdCursesKeyCode : uint Fields Alt0 = 407 Alt1 = 408 Alt2 = 409 Alt3 = 410 Alt4 = 411 Alt5 = 412 Alt6 = 413 Alt7 = 414 Alt8 = 415 Alt9 = 416 AltA = 417 AltB = 418 AltBackQuote = 496 AltBackSlash = 528 AltBackspace = 504 AltC = 419 AltComma = 501 AltD = 420 AltDelete = 478 AltDown = 491 AltE = 421 AltEnd = 489 AltEnter = 494 AltEqual = 485 AltEscape = 495 AltF = 422 AltF1 = 301 AltF10 = 310 AltF11 = 311 AltF12 = 312 AltF2 = 302 AltF3 = 303 AltF4 = 304 AltF5 = 305 AltF6 = 306 AltF7 = 307 AltF8 = 308 AltF9 = 309 AltForwardQuote = 500 AltForwardSlash = 503 AltG = 423 AltH = 424 AltHome = 486 AltI = 425 AltInsert = 479 AltJ = 426 AltK = 427 AltL = 428 AltLeft = 493 AltLeftBracket = 497 AltM = 429 AltMinus = 484 AltN = 430 AltO = 431 AltP = 432 AltPageDown = 488 AltPageUp = 487 AltQ = 433 AltR = 434 AltRight = 492 AltRightBracket = 498 AltS = 435 AltSemicolon = 499 AltStop = 502 AltT = 436 AltTab = 483 AltU = 437 AltUp = 490 AltV = 438 AltW = 439 AltX = 440 AltY = 441 AltZ = 442 BackTab = 351 Backspace = 263 CtrlBackspace = 505 CtrlDelete = 527 CtrlDown = 481 CtrlEnd = 448 CtrlEnter = 529 CtrlF1 = 289 CtrlF10 = 298 CtrlF11 = 299 CtrlF12 = 300 CtrlF2 = 290 CtrlF3 = 291 CtrlF4 = 292 CtrlF5 = 293 CtrlF6 = 294 CtrlF7 = 295 CtrlF8 = 296 CtrlF9 = 297 CtrlHome = 447 CtrlInsert = 477 CtrlLeft = 443 CtrlPageDown = 446 CtrlPageUp = 445 CtrlRight = 444 CtrlTab = 482 CtrlUp = 480 Delete = 330 Down = 258 End = 358 F1 = 265 F10 = 274 F11 = 275 F12 = 276 F2 = 266 F3 = 267 F4 = 268 F5 = 269 F6 = 270 F7 = 271 F8 = 272 F9 = 273 Home = 262 Insert = 331 KeyPad0 = 506 KeyPadAlt0 = 517 KeyPadAlt1 = 518 KeyPadAlt2 = 519 KeyPadAlt3 = 520 KeyPadAlt4 = 521 KeyPadAlt5 = 522 KeyPadAlt6 = 523 KeyPadAlt7 = 524 KeyPadAlt8 = 525 KeyPadAlt9 = 526 KeyPadCtrl0 = 507 KeyPadCtrl1 = 508 KeyPadCtrl2 = 509 KeyPadCtrl3 = 510 KeyPadCtrl4 = 511 KeyPadCtrl5 = 512 KeyPadCtrl6 = 513 KeyPadCtrl7 = 514 KeyPadCtrl8 = 515 KeyPadCtrl9 = 516 KeyPadShiftAsterisk = 532 KeyPadShiftDelete = 538 KeyPadShiftDown = 536 KeyPadShiftEnter = 530 KeyPadShiftInsert = 537 KeyPadShiftMinus = 534 KeyPadShiftPlus = 533 KeyPadShiftSlash = 531 KeyPadShiftUp = 535 KeypadAltAsterisk = 475 KeypadAltEnter = 461 KeypadAltMinus = 473 KeypadAltPlus = 472 KeypadAltSlash = 474 KeypadAltStop = 476 KeypadAsterisk = 463 KeypadCtrlAsterisk = 471 KeypadCtrlEnter = 460 KeypadCtrlMiddle = 467 KeypadCtrlMinus = 469 KeypadCtrlPlus = 468 KeypadCtrlSlash = 470 KeypadCtrlStop = 466 KeypadEnter = 459 KeypadMinus = 464 KeypadPlus = 465 KeypadSlash = 458 KeypadStop = 462 Left = 260 LeftAlt = 544 LeftCtrl = 542 LeftShift = 540 Mouse = 539 PageDown = 338 PageUp = 339 Resize = 546 Right = 261 RightAlt = 545 RightCtrl = 543 RightShift = 541 ScrollDown = 336 ScrollUp = 337 ShiftAltF1 = 313 ShiftAltF10 = 322 ShiftAltF11 = 323 ShiftAltF12 = 324 ShiftAltF2 = 314 ShiftAltF3 = 315 ShiftAltF4 = 316 ShiftAltF5 = 317 ShiftAltF6 = 318 ShiftAltF7 = 319 ShiftAltF8 = 320 ShiftAltF9 = 321 ShiftDown = 548 ShiftEnd = 384 ShiftF1 = 277 ShiftF10 = 286 ShiftF11 = 287 ShiftF12 = 288 ShiftF2 = 278 ShiftF3 = 279 ShiftF4 = 280 ShiftF5 = 281 ShiftF6 = 282 ShiftF7 = 283 ShiftF8 = 284 ShiftF9 = 285 ShiftHome = 388 ShiftLeft = 391 ShiftRight = 400 ShiftUp = 547 Up = 259 Yes = 256"
  },
  "api/Sharpie.Backend.html": {
    "href": "api/Sharpie.Backend.html",
    "title": "Namespace Sharpie.Backend | sharpie",
    "summary": "Namespace Sharpie.Backend Classes ComplexChar A Curses, back-end-specific complex character that encodes the rune and its attributes. CursesBackend Provides functionality for obtaining ICursesBackend instances. CursesCharEvent Character input event. CursesEvent The base type for all back-end independent Curses events. CursesKeyEvent Key input event. CursesMouseEvent Mouse input event. CursesResizeEvent Terminal resize event. Structs CursesMouseState Curses mouse event - encapsulates the data sent by the backend related to mouse events. Enums CursesBackendFlavor Lists the supported backend Curses libraries' flavors. CursesBackendType Lists the supported backend Curses libraries. NCursesKeyCode NCurses specific key codes. PdCursesKeyCode PDCurses specific key codes."
  },
  "api/Sharpie.Canvas.CheckGlyphStyle.html": {
    "href": "api/Sharpie.Canvas.CheckGlyphStyle.html",
    "title": "Enum Canvas.CheckGlyphStyle | sharpie",
    "summary": "Enum Canvas.CheckGlyphStyle Namespace Sharpie Assembly sharpie.dll The possible shapes used by the check. [PublicAPI] public enum Canvas.CheckGlyphStyle Fields Circle = 0 A circle. Diamond = 1 A diamond. Square = 2 A square."
  },
  "api/Sharpie.Canvas.FillStyle.html": {
    "href": "api/Sharpie.Canvas.FillStyle.html",
    "title": "Enum Canvas.FillStyle | sharpie",
    "summary": "Enum Canvas.FillStyle Namespace Sharpie Assembly sharpie.dll The types fills. [PublicAPI] public enum Canvas.FillStyle Fields Black = 1 Filled. Normal = 0 Normal, empty."
  },
  "api/Sharpie.Canvas.GlyphSize.html": {
    "href": "api/Sharpie.Canvas.GlyphSize.html",
    "title": "Enum Canvas.GlyphSize | sharpie",
    "summary": "Enum Canvas.GlyphSize Namespace Sharpie Assembly sharpie.dll Describes the size of a glyph. [PublicAPI] public enum Canvas.GlyphSize Fields Normal = 0 Normal size. Small = 1 Small size."
  },
  "api/Sharpie.Canvas.GradientGlyphStyle.html": {
    "href": "api/Sharpie.Canvas.GradientGlyphStyle.html",
    "title": "Enum Canvas.GradientGlyphStyle | sharpie",
    "summary": "Enum Canvas.GradientGlyphStyle Namespace Sharpie Assembly sharpie.dll The gradient style. [PublicAPI] public enum Canvas.GradientGlyphStyle Fields BottomToTop = 0 Bottom-to-top fill. LeftToRight = 1 Left-to-right fill."
  },
  "api/Sharpie.Canvas.LineStyle.html": {
    "href": "api/Sharpie.Canvas.LineStyle.html",
    "title": "Enum Canvas.LineStyle | sharpie",
    "summary": "Enum Canvas.LineStyle Namespace Sharpie Assembly sharpie.dll The possible line styles used in Line(PointF, float, Orientation, LineStyle, Style). public enum Canvas.LineStyle Fields Double = 4 Double line. Heavy = 1 Heavy line. HeavyDashed = 3 Heavy dashed line. Light = 0 Light style (default). LightDashed = 2 Light dashed line."
  },
  "api/Sharpie.Canvas.Orientation.html": {
    "href": "api/Sharpie.Canvas.Orientation.html",
    "title": "Enum Canvas.Orientation | sharpie",
    "summary": "Enum Canvas.Orientation Namespace Sharpie Assembly sharpie.dll Describes the available text orientations. [PublicAPI] public enum Canvas.Orientation Fields Horizontal = 0 Horizontal text. Vertical = 1 Vertical text."
  },
  "api/Sharpie.Canvas.ShadeGlyphStyle.html": {
    "href": "api/Sharpie.Canvas.ShadeGlyphStyle.html",
    "title": "Enum Canvas.ShadeGlyphStyle | sharpie",
    "summary": "Enum Canvas.ShadeGlyphStyle Namespace Sharpie Assembly sharpie.dll The types of possible shades. [PublicAPI] public enum Canvas.ShadeGlyphStyle Fields Dark = 3 Dark shade. Light = 1 Light shade. Medium = 2 Medium shade. None = 0 No shade."
  },
  "api/Sharpie.Canvas.TriangleGlyphStyle.html": {
    "href": "api/Sharpie.Canvas.TriangleGlyphStyle.html",
    "title": "Enum Canvas.TriangleGlyphStyle | sharpie",
    "summary": "Enum Canvas.TriangleGlyphStyle Namespace Sharpie Assembly sharpie.dll Describes the orientation of a glyph. [PublicAPI] public enum Canvas.TriangleGlyphStyle Fields Down = 1 Towards down. Left = 2 Towards left. Right = 3 Towards right. Up = 0 Towards up."
  },
  "api/Sharpie.Canvas.html": {
    "href": "api/Sharpie.Canvas.html",
    "title": "Class Canvas | sharpie",
    "summary": "Class Canvas Namespace Sharpie Assembly sharpie.dll A general-purpose drawing surface that can be latter draw onto any object that implements IDrawSurface. Supports multiple types of drawing operations most commonly used in terminal apps. [PublicAPI] public sealed class Canvas : IDrawable, IDrawSurface Inheritance object Canvas Implements IDrawable IDrawSurface Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Canvas(Size) Creates a new instances of this class with a given surface size. public Canvas(Size size) Parameters size Size The size of the drawing. Exceptions ArgumentOutOfRangeException Thrown if size is invalid. Properties Size The size of the drawable. public Size Size { get; } Property Value Size Methods Box(Rectangle, LineStyle, Style) Draws a rectangle starting in a given perimeter. public void Box(Rectangle perimeter, Canvas.LineStyle lineStyle, Style style) Parameters perimeter Rectangle The box perimeter. lineStyle Canvas.LineStyle The line style. style Style The text style. DrawOnto(IDrawSurface, Rectangle, Point) Draws the drawable onto a given surface. public void DrawOnto(IDrawSurface destination, Rectangle srcArea, Point destLocation) Parameters destination IDrawSurface The surface to draw on. srcArea Rectangle The source area to draw. destLocation Point The destination location. Exceptions ArgumentNullException Thrown if destination is null. Fill(Rectangle, ShadeGlyphStyle, Style) Fills a given area with a given shadeGlyph and style. public void Fill(Rectangle area, Canvas.ShadeGlyphStyle shadeGlyph, Style style) Parameters area Rectangle The area to fill. shadeGlyph Canvas.ShadeGlyphStyle The share to draw. style Style The cell style. Fill(Rectangle, Rune, Style) Fills a given area with a given rune and style. public void Fill(Rectangle area, Rune rune, Style style) Parameters area Rectangle The area to fill. rune Rune The rune to draw. style Style The cell style. Glyph(Point, CheckGlyphStyle, FillStyle, Style) Draws a glyph at a given location using the provide styles. public void Glyph(Point location, Canvas.CheckGlyphStyle checkGlyphStyle, Canvas.FillStyle fillStyle, Style style) Parameters location Point The cell location. checkGlyphStyle Canvas.CheckGlyphStyle The check style of the glyph. fillStyle Canvas.FillStyle The fill style of the glyph. style Style The cell style. Exceptions ArgumentException Thrown if checkGlyphStyle or fillStyle are invalid. Glyph(Point, GradientGlyphStyle, int, Style) Draws a glyph at a given location using the provide gradient style and fill count. public void Glyph(Point location, Canvas.GradientGlyphStyle gradientGlyphStyle, int fill, Style style) Parameters location Point The cell location. gradientGlyphStyle Canvas.GradientGlyphStyle The gradient style. fill int The glyph fill count. style Style The cell style. Exceptions ArgumentOutOfRangeException Thrown if fill is invalid. Glyph(Point, TriangleGlyphStyle, GlyphSize, FillStyle, Style) Draws a glyph at a given location using the provide styles. public void Glyph(Point location, Canvas.TriangleGlyphStyle triangleGlyphStyle, Canvas.GlyphSize glyphSize, Canvas.FillStyle fillStyle, Style style) Parameters location Point The cell location. triangleGlyphStyle Canvas.TriangleGlyphStyle The orientation of the glyph. glyphSize Canvas.GlyphSize The glyph size. fillStyle Canvas.FillStyle The fill style of the glyph. style Style The cell style. Exceptions ArgumentException Thrown if triangleGlyphStyle or glyphSize or fillStyle are invalid. Glyph(Point, Rune, Style) Draws a glyph at a given location using the given text style. public void Glyph(Point location, Rune rune, Style style) Parameters location Point The cell location. rune Rune The rune to draw. style Style The text style. Line(PointF, PointF, Style) Draws a line between two points in the drawing using block characters. public void Line(PointF startLocation, PointF endLocation, Style style) Parameters startLocation PointF The starting cell. endLocation PointF The ending cell. style Style The cell style. Line(PointF, float, Orientation, LineStyle, Style) Draws a line starting at a given starting at a given point vertically or horizontally using line drawing characters. public void Line(PointF location, float length, Canvas.Orientation orientation, Canvas.LineStyle lineStyle, Style style) Parameters location PointF The start location. length float The length of the line. orientation Canvas.Orientation The line orientation. lineStyle Canvas.LineStyle The line style. style Style The cell style. Point(PointF, Style) Draws a block-based point in the given location. public void Point(PointF location, Style style) Parameters location PointF The location of the point. style Style The text style to use. Rectangle(RectangleF, Style) Draws a block-based rectangle in the given area. public void Rectangle(RectangleF area, Style style) Parameters area RectangleF The area of the rectangle. style Style The text style to use. Text(Point, string, Orientation, Style) Writes a given text into the drawing. If the text length exceed the available space, it is cropped. public void Text(Point location, string text, Canvas.Orientation orientation, Style style) Parameters location Point The start location of the text. text string The text. orientation Canvas.Orientation The orientation for the text. style Style The text style. Exceptions ArgumentNullException Thrown if text is null."
  },
  "api/Sharpie.CaretMode.html": {
    "href": "api/Sharpie.CaretMode.html",
    "title": "Enum CaretMode | sharpie",
    "summary": "Enum CaretMode Namespace Sharpie Assembly sharpie.dll Defines the caret mode. [PublicAPI] public enum CaretMode Fields Invisible = 0 The caret is invisible. VeryVisible = 2 The caret is very visible. Visible = 1 The caret is visible."
  },
  "api/Sharpie.ClearStrategy.html": {
    "href": "api/Sharpie.ClearStrategy.html",
    "title": "Enum ClearStrategy | sharpie",
    "summary": "Enum ClearStrategy Namespace Sharpie Assembly sharpie.dll Defines the possible strategies of clearing contents of a window. [PublicAPI] public enum ClearStrategy Fields Full = 0 Clears the entire window. FullFromCaret = 1 Clears the contents of the line from the position of the caret down to the end of the window. LineFromCaret = 2 Clears the contents of the line from the position of the caret."
  },
  "api/Sharpie.ColorManager.html": {
    "href": "api/Sharpie.ColorManager.html",
    "title": "Class ColorManager | sharpie",
    "summary": "Class ColorManager Namespace Sharpie Assembly sharpie.dll Exposes functionality to manage colors. [PublicAPI] public sealed class ColorManager : IColorManager Inheritance object ColorManager Implements IColorManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties CanRedefineColors Specifies whether the terminal supports redefining colors. public bool CanRedefineColors { get; } Property Value bool Mode Specifies the color mode if this terminal. public ColorMode Mode { get; } Property Value ColorMode Terminal The terminal this manager belongs to. public Terminal Terminal { get; } Property Value Terminal Methods BreakdownColor(StandardColor) Extracts the RBG attributes from a standard color. public (short red, short green, short blue) BreakdownColor(StandardColor color) Parameters color StandardColor The color to get the RGB from. Returns (short red, short green, short blue) Remarks Before calling this function make sure that terminal supports this functionality by checking CanRedefineColors. This operation is not thread safe. Exceptions NotSupportedException If the terminal does not support redefining colors. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. BreakdownColor(short) Extracts the RBG attributes from a color. public (short red, short green, short blue) BreakdownColor(short color) Parameters color short The color to get the RGB from. Returns (short red, short green, short blue) Remarks Before calling this function make sure that terminal supports this functionality by checking CanRedefineColors. This operation is not thread safe. Exceptions NotSupportedException If the terminal does not support redefining colors. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. MixColors(StandardColor, StandardColor) Creates a new color mixture from the given standard colors. public ColorMixture MixColors(StandardColor fgColor, StandardColor bgColor) Parameters fgColor StandardColor The foreground color. bgColor StandardColor The background color. Returns ColorMixture A new color mixture. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. MixColors(short, short) Creates a new color mixture from the given colors. public ColorMixture MixColors(short fgColor, short bgColor) Parameters fgColor short The foreground color. bgColor short The background color. Returns ColorMixture A new color mixture. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. RedefineColor(StandardColor, short, short, short) Redefines the standard color's RGB attributes (if supported). public void RedefineColor(StandardColor color, short red, short green, short blue) Parameters color StandardColor The color to redefine. red short The value of red (0-1000). green short The value of green (0-1000). blue short The value of blue (0-1000). Remarks Before calling this function make sure that terminal supports this functionality by checking CanRedefineColors. This operation is not thread safe. Exceptions ArgumentOutOfRangeException If any of the three components is greater than 1000. NotSupportedException If the terminal does not support redefining colors. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. RedefineColor(short, short, short, short) Redefines the color's RGB attributes (if supported). public void RedefineColor(short color, short red, short green, short blue) Parameters color short The color to redefine. red short The value of red (0-1000). green short The value of green (0-1000). blue short The value of blue (0-1000). Remarks Before calling this function make sure that terminal supports this functionality by checking CanRedefineColors. This operation is not thread safe. Exceptions NotSupportedException If the terminal does not support redefining colors. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. RemixColors(ColorMixture, StandardColor, StandardColor) Redefines an existing color pair with the given standard colors. public void RemixColors(ColorMixture mixture, StandardColor fgColor, StandardColor bgColor) Parameters mixture ColorMixture The color mixture to redefine. fgColor StandardColor The foreground color. bgColor StandardColor The background color. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. RemixColors(ColorMixture, short, short) Redefines an existing color pair with the given colors. public void RemixColors(ColorMixture mixture, short fgColor, short bgColor) Parameters mixture ColorMixture The color mixture to redefine. fgColor short The foreground color. bgColor short The background color. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. RemixDefaultColors(StandardColor, StandardColor) Redefines the default colors of the terminal. public void RemixDefaultColors(StandardColor fgColor, StandardColor bgColor) Parameters fgColor StandardColor The foreground color. bgColor StandardColor The background color. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. RemixDefaultColors(short, short) Redefines the default colors of the terminal. public void RemixDefaultColors(short fgColor, short bgColor) Parameters fgColor short The foreground color. bgColor short The background color. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. UnMixColors(ColorMixture) Extracts the colors of a color mixture. public (short fgColor, short bgColor) UnMixColors(ColorMixture mixture) Parameters mixture ColorMixture The color mixture to get the colors from. Returns (short fgColor, short bgColor) Remarks This operation is not thread safe. Exceptions NotSupportedException If the terminal does not support redefining colors. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured."
  },
  "api/Sharpie.ColorMixture.html": {
    "href": "api/Sharpie.ColorMixture.html",
    "title": "Struct ColorMixture | sharpie",
    "summary": "Struct ColorMixture Namespace Sharpie Assembly sharpie.dll Defines a color pair (foreground and background colors). [PublicAPI] public struct ColorMixture Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Default The default color mixture of the terminal. Use it to reset to default colors. public static ColorMixture Default { get; } Property Value ColorMixture Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator ==(ColorMixture, ColorMixture) The equality operator. public static bool operator ==(ColorMixture left, ColorMixture right) Parameters left ColorMixture LHS argument. right ColorMixture RHS argument. Returns bool The result of the check. operator !=(ColorMixture, ColorMixture) The inequality operator. public static bool operator !=(ColorMixture left, ColorMixture right) Parameters left ColorMixture LHS argument. right ColorMixture RHS argument. Returns bool The result of the check."
  },
  "api/Sharpie.ColorMode.html": {
    "href": "api/Sharpie.ColorMode.html",
    "title": "Enum ColorMode | sharpie",
    "summary": "Enum ColorMode Namespace Sharpie Assembly sharpie.dll Defines the color mode of the terminal. [PublicAPI] public enum ColorMode Fields Disabled = 0 The terminal's colors are disabled. Extended = 2 Terminal supports extended colors in addition to StandardColor. Standard = 1 Terminal supports only standard color set defined by StandardColor."
  },
  "api/Sharpie.ControlCharacter.html": {
    "href": "api/Sharpie.ControlCharacter.html",
    "title": "Class ControlCharacter | sharpie",
    "summary": "Class ControlCharacter Namespace Sharpie Assembly sharpie.dll Defines a list of special control characters in ASCII. public static class ControlCharacter Inheritance object ControlCharacter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Escape The escape character. public const char Escape = '\\u001b' Field Value char NewLine The new line character. public const char NewLine = '\\n' Field Value char Null The null character. public const char Null = '\\0' Field Value char Tab The tab character. public const char Tab = '\\t' Field Value char Whitespace The whitespace character. public const char Whitespace = ' ' Field Value char"
  },
  "api/Sharpie.CursesException.html": {
    "href": "api/Sharpie.CursesException.html",
    "title": "Class CursesException | sharpie",
    "summary": "Class CursesException Namespace Sharpie Assembly sharpie.dll A generic Curses exception, base for all other curses errors. [PublicAPI] public class CursesException : Exception, ISerializable Inheritance object Exception CursesException Implements ISerializable Derived CursesInitializationException CursesOperationException CursesSynchronizationException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/Sharpie.CursesInitializationException.html": {
    "href": "api/Sharpie.CursesInitializationException.html",
    "title": "Class CursesInitializationException | sharpie",
    "summary": "Class CursesInitializationException Namespace Sharpie Assembly sharpie.dll Exception thrown if Curses failed to initialize. [PublicAPI] public sealed class CursesInitializationException : CursesException, ISerializable Inheritance object Exception CursesException CursesInitializationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object)"
  },
  "api/Sharpie.CursesOperationException.html": {
    "href": "api/Sharpie.CursesOperationException.html",
    "title": "Class CursesOperationException | sharpie",
    "summary": "Class CursesOperationException Namespace Sharpie Assembly sharpie.dll A Curses exception raised when an operation fails. [PublicAPI] public sealed class CursesOperationException : CursesException, ISerializable Inheritance object Exception CursesException CursesOperationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Properties Operation The operation that failed. public string Operation { get; } Property Value string"
  },
  "api/Sharpie.CursesSynchronizationException.html": {
    "href": "api/Sharpie.CursesSynchronizationException.html",
    "title": "Class CursesSynchronizationException | sharpie",
    "summary": "Class CursesSynchronizationException Namespace Sharpie Assembly sharpie.dll Exception thrown if operation performed in an unauthorized context (such as different thread). [PublicAPI] public sealed class CursesSynchronizationException : CursesException, ISerializable Inheritance object Exception CursesException CursesSynchronizationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object)"
  },
  "api/Sharpie.DelegateEvent.html": {
    "href": "api/Sharpie.DelegateEvent.html",
    "title": "Class DelegateEvent | sharpie",
    "summary": "Class DelegateEvent Namespace Sharpie Assembly sharpie.dll Special event that delegates an object to the main application context. [PublicAPI] public sealed class DelegateEvent : Event Inheritance object Event DelegateEvent Inherited Members Event.Type object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Object The object that is being delegated. public object Object { get; } Property Value object Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Sharpie.Demos.Snake.Game.Direction.html": {
    "href": "api/Sharpie.Demos.Snake.Game.Direction.html",
    "title": "Enum Game.Direction | sharpie",
    "summary": "Enum Game.Direction Namespace Sharpie.Demos.Snake Assembly sharpie-demos-snake.dll public enum Game.Direction Fields Down = 3 Down. Left = 4 Left. Right = 2 Right. Up = 1 Up."
  },
  "api/Sharpie.Demos.Snake.Game.html": {
    "href": "api/Sharpie.Demos.Snake.Game.html",
    "title": "Class Game | sharpie",
    "summary": "Class Game Namespace Sharpie.Demos.Snake Assembly sharpie-demos-snake.dll public sealed class Game Inheritance object Game Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Game(Style, Style, Style, Style) public Game(Style snakeHeadStyle, Style snakeBodyStyle, Style foodStyle, Style lostStyle) Parameters snakeHeadStyle Style snakeBodyStyle Style foodStyle Style lostStyle Style Properties Score public int Score { get; } Property Value int Methods ResetSize(Rectangle) public void ResetSize(Rectangle perimeter) Parameters perimeter Rectangle Tick() public bool Tick() Returns bool Turn(Direction) public void Turn(Game.Direction direction) Parameters direction Game.Direction Update(ISurface) public void Update(ISurface surface) Parameters surface ISurface"
  },
  "api/Sharpie.Demos.Snake.html": {
    "href": "api/Sharpie.Demos.Snake.html",
    "title": "Namespace Sharpie.Demos.Snake | sharpie",
    "summary": "Namespace Sharpie.Demos.Snake Classes Game Enums Game.Direction"
  },
  "api/Sharpie.Event.html": {
    "href": "api/Sharpie.Event.html",
    "title": "Class Event | sharpie",
    "summary": "Class Event Namespace Sharpie Assembly sharpie.dll An event from the terminal. [PublicAPI] public class Event Inheritance object Event Derived DelegateEvent KeyEvent MouseActionEvent MouseMoveEvent StartEvent StopEvent TerminalResizeEvent Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Event(EventType) Creates a new instance of the class. protected Event(EventType type) Parameters type EventType The type of the event. Properties Type The type of the event. public EventType Type { get; } Property Value EventType Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Sharpie.EventPump.html": {
    "href": "api/Sharpie.EventPump.html",
    "title": "Class EventPump | sharpie",
    "summary": "Class EventPump Namespace Sharpie Assembly sharpie.dll The event \"pump\" class listens to all events from Curses, processes them and passes them along to consumers. [PublicAPI] public sealed class EventPump : IEventPump Inheritance object EventPump Implements IEventPump Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Terminal The terminal this manager belongs to. public Terminal Terminal { get; } Property Value Terminal Methods Listen() Gets an enumerable that is used to get enumerate events from Curses as they are generated. public IEnumerable<Event> Listen() Returns IEnumerable<Event> The event listening enumerable. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Listen(ISurface) Gets an enumerable that is used to get enumerate events from Curses as they are generated. public IEnumerable<Event> Listen(ISurface surface) Parameters surface ISurface The surface to refresh during event processing. Returns IEnumerable<Event> The event listening enumerable. Remarks This operation is not thread safe. Exceptions ArgumentNullException Thrown if surface is null. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Listen(ISurface, CancellationToken) Gets an enumerable that is used to get enumerate events from Curses as they are generated. public IEnumerable<Event> Listen(ISurface surface, CancellationToken cancellationToken) Parameters surface ISurface The surface to refresh during event processing. cancellationToken CancellationToken Cancellation token used to interrupt the process. Returns IEnumerable<Event> The event listening enumerable. Remarks This operation is not thread safe. Exceptions ArgumentNullException Thrown if surface is null. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Listen(CancellationToken) Gets an enumerable that is used to get enumerate events from Curses as they are generated. public IEnumerable<Event> Listen(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Cancellation token used to interrupt the process. Returns IEnumerable<Event> The event listening enumerable. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Use(ResolveEscapeSequenceFunc) Registers a key sequence resolver into the input pipeline. public void Use(ResolveEscapeSequenceFunc resolver) Parameters resolver ResolveEscapeSequenceFunc The resolver to register. Remarks This operation is not thread safe. Exceptions ArgumentNullException Thrown is resolver is null. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Uses(ResolveEscapeSequenceFunc) Checks if the screen has a given key sequence resolver registered. public bool Uses(ResolveEscapeSequenceFunc resolver) Parameters resolver ResolveEscapeSequenceFunc The resolver to check. Returns bool true if the resolver is registered; false otherwise. Remarks This operation is not thread safe. Exceptions ArgumentNullException Thrown is resolver is null. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't."
  },
  "api/Sharpie.EventType.html": {
    "href": "api/Sharpie.EventType.html",
    "title": "Enum EventType | sharpie",
    "summary": "Enum EventType Namespace Sharpie Assembly sharpie.dll Defines the possible event types. [PublicAPI] public enum EventType Fields Delegate = 7 Delegated object that needs to be processed on main context. KeyPress = 4 A key has been pressed. MouseAction = 6 The mouse buttons have been used. MouseMove = 5 The mouse has moved. Start = 1 The listening process has been started. Stop = 2 The listening process has been stopped. TerminalResize = 3 The terminal has been resized. Undefined = 0 Undefined event."
  },
  "api/Sharpie.Font.AsciiFont.html": {
    "href": "api/Sharpie.Font.AsciiFont.html",
    "title": "Class AsciiFont | sharpie",
    "summary": "Class AsciiFont Namespace Sharpie.Font Assembly sharpie.dll Defines the traits implemented by ASCII font providers. [PublicAPI] public abstract class AsciiFont : IAsciiFont Inheritance object AsciiFont Implements IAsciiFont Derived DosCp866AsciiFont FigletFont Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AsciiFont(string, int, int, AsciiFontLayout) Creates a new instance of this class. protected AsciiFont(string name, int height, int baseline, AsciiFontLayout layout) Parameters name string The name of the font. height int The height of the font. baseline int The font's baseline. layout AsciiFontLayout The font's layout. Exceptions ArgumentException Thrown if name is null of empty. ArgumentOutOfRangeException Thrown if height is less than one. Properties Baseline The font baseline. public int Baseline { get; } Property Value int Height The font height. public int Height { get; } Property Value int Layout The font's name. public AsciiFontLayout Layout { get; } Property Value AsciiFontLayout Name The font's name. public string Name { get; } Property Value string Methods GetGlyph(Rune, Style) Tries to get a glyph for a given char. public virtual IDrawable GetGlyph(Rune @char, Style style) Parameters char Rune The character. style Style The style to apply to the glyph. Returns IDrawable The output glyph, if found. Otherwise, the font will substitute the glyph with something else. GetGlyphs(ReadOnlySpan<Rune>, Style) Tries to get a drawing for a given list of chars. public abstract IDrawable GetGlyphs(ReadOnlySpan<Rune> chars, Style style) Parameters chars ReadOnlySpan<Rune> The characters. style Style The style to apply to the glyphs. Returns IDrawable The output glyphs. Exceptions ArgumentException Thrown if chars is empty. GetGlyphs(string, Style) Tries to get a drawing for a given text. public virtual IDrawable GetGlyphs(string text, Style style) Parameters text string The text. style Style The style to apply to the glyphs. Returns IDrawable The output glyphs. Exceptions ArgumentException Thrown if text is empty. HasGlyph(Rune) Checks if the font contains a given glyph. public abstract bool HasGlyph(Rune @char) Parameters char Rune The character. Returns bool true if the font contains the given glyph; false otherwise."
  },
  "api/Sharpie.Font.AsciiFontLayout.html": {
    "href": "api/Sharpie.Font.AsciiFontLayout.html",
    "title": "Enum AsciiFontLayout | sharpie",
    "summary": "Enum AsciiFontLayout Namespace Sharpie.Font Assembly sharpie.dll Defines the possible font layout modes. [PublicAPI] [Flags] public enum AsciiFontLayout Fields Fitted = 1 Fit the characters horizontally (kerning). FullWidth = 0 Full-width characters. Smushed = 2 Smush the characters horizontally using font-supplied rules."
  },
  "api/Sharpie.Font.DosCp866AsciiFont.html": {
    "href": "api/Sharpie.Font.DosCp866AsciiFont.html",
    "title": "Class DosCp866AsciiFont | sharpie",
    "summary": "Class DosCp866AsciiFont Namespace Sharpie.Font Assembly sharpie.dll DOS CodePage 866 font. Uncovered in the depths of Alexandru's prehistoric archives. Original source unknown. [PublicAPI] public sealed class DosCp866AsciiFont : AsciiFont, IAsciiFont Inheritance object AsciiFont DosCp866AsciiFont Implements IAsciiFont Inherited Members AsciiFont.Baseline AsciiFont.Height AsciiFont.Name AsciiFont.Layout AsciiFont.GetGlyph(Rune, Style) AsciiFont.GetGlyphs(string, Style) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties FullWidth Gets the DOS CodePage 866 font. public static IAsciiFont FullWidth { get; } Property Value IAsciiFont Methods GetGlyphs(ReadOnlySpan<Rune>, Style) Tries to get a drawing for a given list of chars. public override IDrawable GetGlyphs(ReadOnlySpan<Rune> chars, Style style) Parameters chars ReadOnlySpan<Rune> The characters. style Style The style to apply to the glyphs. Returns IDrawable The output glyphs. Exceptions ArgumentException Thrown if chars is empty. HasGlyph(Rune) Checks if the font contains a given glyph. public override bool HasGlyph(Rune @char) Parameters char Rune The character. Returns bool true if the font contains the given glyph; false otherwise."
  },
  "api/Sharpie.Font.FigletFont.html": {
    "href": "api/Sharpie.Font.FigletFont.html",
    "title": "Class FigletFont | sharpie",
    "summary": "Class FigletFont Namespace Sharpie.Font Assembly sharpie.dll FIGlet ASCII font. See http://www.jave.de/figlet/figfont.html and https://github.com/cmatsuoka/figlet for details and available fonts. [PublicAPI] public sealed class FigletFont : AsciiFont, IAsciiFont Inheritance object AsciiFont FigletFont Implements IAsciiFont Inherited Members AsciiFont.Baseline AsciiFont.Height AsciiFont.Name AsciiFont.Layout AsciiFont.GetGlyph(Rune, Style) AsciiFont.GetGlyphs(string, Style) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods GetGlyphs(ReadOnlySpan<Rune>, Style) Tries to get a drawing for a given list of chars. public override IDrawable GetGlyphs(ReadOnlySpan<Rune> chars, Style style) Parameters chars ReadOnlySpan<Rune> The characters. style Style The style to apply to the glyphs. Returns IDrawable The output glyphs. Exceptions ArgumentException Thrown if chars is empty. HasGlyph(Rune) Checks if the font contains a given glyph. public override bool HasGlyph(Rune @char) Parameters char Rune The character. Returns bool true if the font contains the given glyph; false otherwise. LoadAsync(string) Loads a FIGlet font file from a given file at path. public static Task<FigletFont> LoadAsync(string path) Parameters path string The font file name. Returns Task<FigletFont> A FigletFont instance. Exceptions ArgumentException Thrown if path is null or empty. LoadAsync(string, TextReader) Loads a FIGlet font file from a given reader. public static Task<FigletFont> LoadAsync(string name, TextReader reader) Parameters name string The name of the font. reader TextReader The reader. Returns Task<FigletFont> A FigletFont instance. Exceptions ArgumentNullException Thrown if reader is null. ArgumentException Thrown if name is null or empty."
  },
  "api/Sharpie.Font.html": {
    "href": "api/Sharpie.Font.html",
    "title": "Namespace Sharpie.Font | sharpie",
    "summary": "Namespace Sharpie.Font Classes AsciiFont Defines the traits implemented by ASCII font providers. DosCp866AsciiFont DOS CodePage 866 font. Uncovered in the depths of Alexandru's prehistoric archives. Original source unknown. FigletFont FIGlet ASCII font. See http://www.jave.de/figlet/figfont.html and https://github.com/cmatsuoka/figlet for details and available fonts. Enums AsciiFontLayout Defines the possible font layout modes."
  },
  "api/Sharpie.Key.html": {
    "href": "api/Sharpie.Key.html",
    "title": "Enum Key | sharpie",
    "summary": "Enum Key Namespace Sharpie Assembly sharpie.dll Defines the possible key types. [PublicAPI] public enum Key : uint Fields Backspace = 6 Backspace key. Character = 0 A simple character key. Delete = 5 The delete key. Escape = 3 The Escape key. F1 = 16 F1 key. F10 = 25 F10 key. F11 = 26 F11 key. F12 = 27 F12 key. F2 = 17 F2 key. F3 = 18 F3 key. F4 = 19 F4 key. F5 = 20 F5 key. F6 = 21 F6 key. F7 = 22 F7 key. F8 = 23 F8 key. F9 = 24 F9 key. Insert = 4 The Insert key. KeypadDown = 8 Arrow down key. KeypadEnd = 14 End key. KeypadHome = 13 Home key. KeypadLeft = 9 Arrow left key. KeypadPageDown = 12 Page down key. KeypadPageUp = 11 Page up key. KeypadRight = 10 Arrow right key. KeypadUp = 7 Arrow up key. Return = 2 The Return/Enter key. Tab = 15 Tab key. Unknown = 1 Unknown key."
  },
  "api/Sharpie.KeyEvent.html": {
    "href": "api/Sharpie.KeyEvent.html",
    "title": "Class KeyEvent | sharpie",
    "summary": "Class KeyEvent Namespace Sharpie Assembly sharpie.dll Defines a key event. [PublicAPI] public sealed class KeyEvent : Event Inheritance object Event KeyEvent Inherited Members Event.Type object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Char The character that was pressed. Only valid if Key is Character. public Rune Char { get; } Property Value Rune Key The key that was pressed. If the value is Character then Char contains the actual code of the key. public Key Key { get; } Property Value Key Modifiers The modifier keys that were present at the time. public ModifierKey Modifiers { get; } Property Value ModifierKey Name The printable name of the key. public string? Name { get; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Sharpie.KeySequenceResolver.html": {
    "href": "api/Sharpie.KeySequenceResolver.html",
    "title": "Class KeySequenceResolver | sharpie",
    "summary": "Class KeySequenceResolver Namespace Sharpie Assembly sharpie.dll Contains the definitions and implementations of input middlewares. public static class KeySequenceResolver Inheritance object KeySequenceResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AltKeyResolver(IReadOnlyList<KeyEvent>) Alt+character/key resolver middleware. public static (KeyEvent? key, int count) AltKeyResolver(IReadOnlyList<KeyEvent> sequence) Parameters sequence IReadOnlyList<KeyEvent> The input sequence. Returns (KeyEvent key, int count) The resolved key (if any) and the number of input events resolved. If the count is -1 it means nothing matches. Remarks This middleware converts characters in the form of ALT+.. to proper keys. Exceptions ArgumentNullException Thrown if sequence is null. ControlKeyResolver(IReadOnlyList<KeyEvent>) Control+character resolver middleware. public static (KeyEvent? key, int count) ControlKeyResolver(IReadOnlyList<KeyEvent> sequence) Parameters sequence IReadOnlyList<KeyEvent> The input sequence. Returns (KeyEvent key, int count) The resolved key (if any) and the number of input events resolved. If the count is -1 it means nothing matches. Remarks This middleware converts characters in the form of CTRL+.. to proper keys. Exceptions ArgumentNullException Thrown if sequence is null. KeyPadModifiersResolver(IReadOnlyList<KeyEvent>) Complex keypad resolver middleware. public static (KeyEvent? key, int count) KeyPadModifiersResolver(IReadOnlyList<KeyEvent> sequence) Parameters sequence IReadOnlyList<KeyEvent> The input sequence. Returns (KeyEvent key, int count) The resolved key (if any) and the number of input events resolved. If the count is -1 it means nothing matches. Remarks This middleware converts complex sequences such as CTRL/SHIFT/ALT+KeyPad to proper key representations. Exceptions ArgumentNullException Thrown if sequence is null. SpecialCharacterResolver(IReadOnlyList<KeyEvent>) Special character resolver middleware. public static (KeyEvent? key, int count) SpecialCharacterResolver(IReadOnlyList<KeyEvent> sequence) Parameters sequence IReadOnlyList<KeyEvent> The input sequence. Returns (KeyEvent key, int count) The resolved key (if any) and the number of input events resolved. If the count is -1 it means nothing matches. Remarks This middleware converts key such as \\n, \\t, escape and etc. to their key representations. Exceptions ArgumentNullException Thrown if sequence is null."
  },
  "api/Sharpie.ModifierKey.html": {
    "href": "api/Sharpie.ModifierKey.html",
    "title": "Enum ModifierKey | sharpie",
    "summary": "Enum ModifierKey Namespace Sharpie Assembly sharpie.dll Defines the possible modifier keys. [PublicAPI] [Flags] public enum ModifierKey Fields Alt = 2 Alt key. Ctrl = 4 Ctrl key. None = 0 No modifier key was pressed. Shift = 1 Shift key."
  },
  "api/Sharpie.MouseActionEvent.html": {
    "href": "api/Sharpie.MouseActionEvent.html",
    "title": "Class MouseActionEvent | sharpie",
    "summary": "Class MouseActionEvent Namespace Sharpie Assembly sharpie.dll Contains the details of a Curses event. [PublicAPI] public sealed class MouseActionEvent : Event Inheritance object Event MouseActionEvent Inherited Members Event.Type object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Button The button that was actioned. public MouseButton Button { get; } Property Value MouseButton Modifiers Modifier keys that were present at the time of the action. public ModifierKey Modifiers { get; } Property Value ModifierKey Position The mouse position at the time of the action. public Point Position { get; } Property Value Point State The state of the action. public MouseButtonState State { get; } Property Value MouseButtonState Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Sharpie.MouseButton.html": {
    "href": "api/Sharpie.MouseButton.html",
    "title": "Enum MouseButton | sharpie",
    "summary": "Enum MouseButton Namespace Sharpie Assembly sharpie.dll Defines the possible mouse buttons. [PublicAPI] public enum MouseButton : uint Fields Button1 = 1 The button 1. Button2 = 2 The button 2. Button3 = 3 The button 3. Button4 = 4 The button 4. Button5 = 5 The button 5. Unknown = 0 Unknown button."
  },
  "api/Sharpie.MouseButtonState.html": {
    "href": "api/Sharpie.MouseButtonState.html",
    "title": "Enum MouseButtonState | sharpie",
    "summary": "Enum MouseButtonState Namespace Sharpie Assembly sharpie.dll Defines the possible mouse button states. [PublicAPI] public enum MouseButtonState : uint Fields Clicked = 3 The button has been clicked. DoubleClicked = 4 The button has been double clicked. None = 0 No state to speak of. Pressed = 2 The button has been pressed. Released = 1 The button has been released. TripleClicked = 5 The button has been triple clicked."
  },
  "api/Sharpie.MouseMoveEvent.html": {
    "href": "api/Sharpie.MouseMoveEvent.html",
    "title": "Class MouseMoveEvent | sharpie",
    "summary": "Class MouseMoveEvent Namespace Sharpie Assembly sharpie.dll Defines a mouse move event. [PublicAPI] public sealed class MouseMoveEvent : Event Inheritance object Event MouseMoveEvent Inherited Members Event.Type object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors MouseMoveEvent(Point) Creates a new instance of the class. public MouseMoveEvent(Point point) Parameters point Point The location of the mouse. Properties Position The mouse position. public Point Position { get; } Property Value Point Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Sharpie.Pad.html": {
    "href": "api/Sharpie.Pad.html",
    "title": "Class Pad | sharpie",
    "summary": "Class Pad Namespace Sharpie Assembly sharpie.dll Represents a Curses pad, which is a special type of off-screen window. [PublicAPI] public sealed class Pad : Surface, IDisposable, IPad, ISurface, IDrawSurface Inheritance object Surface Pad Implements IDisposable IPad ISurface IDrawSurface Inherited Members Surface.Dispose() Surface.Handle Surface.ManagedCaret Surface.Scrollable Surface.Disposed Surface.Style Surface.ColorMixture Surface.Background Surface.CaretLocation Surface.Dirty Surface.LineDirty(int) Surface.EnableAttributes(VideoAttribute) Surface.DisableAttributes(VideoAttribute) Surface.ScrollUp(int) Surface.ScrollDown(int) Surface.InsertEmptyLines(int) Surface.DeleteLines(int) Surface.ChangeTextStyle(int, Style) Surface.WriteText(StyledText, bool) Surface.WriteText(string, Style, bool) Surface.WriteText(string, bool) Surface.NextLine() Surface.DrawText(IAsciiFont, string, Style, bool, bool) Surface.DrawText(IAsciiFont, string, bool, bool) Surface.DrawVerticalLine(int, Rune, Style) Surface.DrawVerticalLine(int) Surface.DrawHorizontalLine(int, Rune, Style) Surface.DrawHorizontalLine(int) Surface.DrawBorder(Rune, Rune, Rune, Rune, Rune, Rune, Rune, Rune, Style) Surface.DrawBorder() Surface.RemoveText(int) Surface.GetText(int) Surface.Clear(ClearStrategy) Surface.Replace(ISurface, ReplaceStrategy) Surface.Replace(ISurface, Rectangle, Point, ReplaceStrategy) Surface.MarkDirty(int, int) Surface.MarkDirty() Surface.IsPointWithin(Point) Surface.IsRectangleWithin(Rectangle) Surface.Draw(Point, Rectangle, IDrawable) Surface.Draw(Point, IDrawable) Surface.Destroy() Surface.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties Screen The parent screen of this pad. public Screen Screen { get; } Property Value Screen Size Gets or sets the size of the window. public Size Size { get; set; } Property Value Size Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException The value is outside the bounds. ObjectDisposedException Window is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. SubPads Gets the sub-pads of this pad. public IEnumerable<ISubPad> SubPads { get; } Property Value IEnumerable<ISubPad> Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Methods AssertSynchronized() Asserts that executing thread is bound to the correct synchronization context. protected override void AssertSynchronized() Exceptions CursesSynchronizationException Thrown if current thread is not bound to the correct context. Delete() Deletes the surface from the curses backend. protected override void Delete() Duplicate() Duplicates and existing pad, including its attributes. public IPad Duplicate() Returns IPad A new pad object. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Screen is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Refresh(Point) Redraws an area of the screen with the contents of the pad. public void Refresh(Point destLocation) Parameters destLocation Point The point on the screen to place that rectangle. Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal of the given window have been disposed. ArgumentOutOfRangeException Thrown if destLocation is out of bounds. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Refresh(Rectangle, Point) Redraws an area of the screen with the contents of the pad. public void Refresh(Rectangle srcArea, Point destLocation) Parameters srcArea Rectangle The rectangle of the pad to place onto the screen. destLocation Point The point on the screen to place that rectangle. Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal of the given window have been disposed. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. SubPad(Rectangle) Creates a new sub-pad in the parent pad. public ISubPad SubPad(Rectangle area) Parameters area Rectangle The area of the pad to put the sub-pad in. Returns ISubPad A new pad object. Exceptions ObjectDisposedException Screen is no longer usable. ArgumentOutOfRangeException The area is outside the bounds of the parent. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured."
  },
  "api/Sharpie.ReplaceStrategy.html": {
    "href": "api/Sharpie.ReplaceStrategy.html",
    "title": "Enum ReplaceStrategy | sharpie",
    "summary": "Enum ReplaceStrategy Namespace Sharpie Assembly sharpie.dll Defines the possible strategies or replacing the contents of a window with the contents of another window. [PublicAPI] public enum ReplaceStrategy Fields Overlay = 1 Overwrites the contents of the the window excluding blank space (the contents of the destination are preserved in that case). Overwrite = 0 Overwrites the contents of the the window including blank space."
  },
  "api/Sharpie.ResolveEscapeSequenceFunc.html": {
    "href": "api/Sharpie.ResolveEscapeSequenceFunc.html",
    "title": "Delegate ResolveEscapeSequenceFunc | sharpie",
    "summary": "Delegate ResolveEscapeSequenceFunc Namespace Sharpie Assembly sharpie.dll Defines the next delegate used to resolve key sequences. public delegate (KeyEvent? key, int count) ResolveEscapeSequenceFunc(IReadOnlyList<KeyEvent> sequence) Parameters sequence IReadOnlyList<KeyEvent> The sequence of events. Returns (KeyEvent key, int count) The resolved key (if any) and the number of input events resolved. If the count is -1 it means nothing matches."
  },
  "api/Sharpie.Screen.html": {
    "href": "api/Sharpie.Screen.html",
    "title": "Class Screen | sharpie",
    "summary": "Class Screen Namespace Sharpie Assembly sharpie.dll The main Curses screen class. Implements screen-related functionality. Only one instance of this class can be active at one time. [PublicAPI] public sealed class Screen : TerminalSurface, IDisposable, IScreen, ITerminalSurface, ISurface, IDrawSurface Inheritance object Surface TerminalSurface Screen Implements IDisposable IScreen ITerminalSurface ISurface IDrawSurface Inherited Members TerminalSurface.Terminal TerminalSurface.ImmediateRefresh Surface.Dispose() Surface.Handle Surface.ManagedCaret Surface.Scrollable Surface.Disposed Surface.Style Surface.ColorMixture Surface.Background Surface.Size Surface.CaretLocation Surface.Dirty Surface.LineDirty(int) Surface.EnableAttributes(VideoAttribute) Surface.DisableAttributes(VideoAttribute) Surface.ScrollUp(int) Surface.ScrollDown(int) Surface.InsertEmptyLines(int) Surface.DeleteLines(int) Surface.ChangeTextStyle(int, Style) Surface.WriteText(StyledText, bool) Surface.WriteText(string, Style, bool) Surface.WriteText(string, bool) Surface.NextLine() Surface.DrawText(IAsciiFont, string, Style, bool, bool) Surface.DrawText(IAsciiFont, string, bool, bool) Surface.DrawVerticalLine(int, Rune, Style) Surface.DrawVerticalLine(int) Surface.DrawHorizontalLine(int, Rune, Style) Surface.DrawHorizontalLine(int) Surface.DrawBorder(Rune, Rune, Rune, Rune, Rune, Rune, Rune, Rune, Style) Surface.DrawBorder() Surface.RemoveText(int) Surface.GetText(int) Surface.Clear(ClearStrategy) Surface.Replace(ISurface, ReplaceStrategy) Surface.Replace(ISurface, Rectangle, Point, ReplaceStrategy) Surface.MarkDirty() Surface.IsPointWithin(Point) Surface.IsRectangleWithin(Rectangle) Surface.Draw(Point, Rectangle, IDrawable) Surface.Draw(Point, IDrawable) Surface.Destroy() Surface.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties Pads Gets all child pads on this screen. public IEnumerable<IPad> Pads { get; } Property Value IEnumerable<IPad> Remarks This operation is not thread safe. Exceptions ObjectDisposedException Screen is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Windows Gets all child windows on this screen. public IEnumerable<Window> Windows { get; } Property Value IEnumerable<Window> Remarks This operation is not thread safe. Exceptions ObjectDisposedException Screen is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Methods Delete() Deletes the surface from the curses backend. protected override void Delete() MarkDirty(int, int) Marks a number of lines within the surface as Dirty. public override void MarkDirty(int y, int count) Parameters y int The line to start with. count int The count of lines to mark dirty. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Pad(Size) Creates a new pad. public IPad Pad(Size size) Parameters size Size The pad size. Returns IPad A new pad object. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Screen is no longer usable. ArgumentOutOfRangeException The size is invalid. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Refresh() Redraws all the dirty lines of the surface to the terminal. If AtomicRefresh() is active, all refreshes are batched together until the lock is released. public override void Refresh() Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Refresh(int, int) Marks a number of lines within the surface as Dirty. public override void Refresh(int y, int count) Parameters y int The line to start with. count int The count of lines to mark dirty. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Window(Rectangle) Creates a new sub-window in the parent window. public IWindow Window(Rectangle area) Parameters area Rectangle The area of the window to put the sub-window in. Returns IWindow A new window object. Exceptions ObjectDisposedException Screen is no longer usable. ArgumentOutOfRangeException The area is outside the bounds of the parent. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured."
  },
  "api/Sharpie.SoftLabelKeyAlignment.html": {
    "href": "api/Sharpie.SoftLabelKeyAlignment.html",
    "title": "Enum SoftLabelKeyAlignment | sharpie",
    "summary": "Enum SoftLabelKeyAlignment Namespace Sharpie Assembly sharpie.dll Defines the alignment of labels in a SoftLabelKeyManager. [PublicAPI] public enum SoftLabelKeyAlignment Fields Center = 1 The label is center-aligned. Left = 0 The label is left-aligned. Right = 2 The label is right-aligned."
  },
  "api/Sharpie.SoftLabelKeyManager.html": {
    "href": "api/Sharpie.SoftLabelKeyManager.html",
    "title": "Class SoftLabelKeyManager | sharpie",
    "summary": "Class SoftLabelKeyManager Namespace Sharpie Assembly sharpie.dll Adds support for soft function keys. [PublicAPI] public sealed class SoftLabelKeyManager : ISoftLabelKeyManager Inheritance object SoftLabelKeyManager Implements ISoftLabelKeyManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ColorMixture Gets or sets the color mixture of the window. public ColorMixture ColorMixture { get; set; } Property Value ColorMixture Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal or the current window have been disposed. NotSupportedException The soft key labels are disabled. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Enabled Specifies if the manager is enabled. public bool Enabled { get; } Property Value bool LabelCount Gets the number of labels within the soft key label panel. public int LabelCount { get; } Property Value int Exceptions NotSupportedException The soft key labels are disabled. Style Gets or sets the style of the window. public Style Style { get; set; } Property Value Style Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal or the current window have been disposed. NotSupportedException The soft key labels are disabled. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Terminal The terminal this manager belongs to. public Terminal Terminal { get; } Property Value Terminal Methods Clear() Clears the soft key labels from the screen. They can be restored by calling Restore() method. public void Clear() Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal or the current window have been disposed. NotSupportedException The soft key labels are disabled. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. DisableAttributes(VideoAttribute) Disables specified attributes and keep the others untouched. public void DisableAttributes(VideoAttribute attributes) Parameters attributes VideoAttribute The attributes to disable. Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal or the current window have been disposed. NotSupportedException The soft key labels are disabled. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. EnableAttributes(VideoAttribute) Enables specified attributes and keep the others untouched. public void EnableAttributes(VideoAttribute attributes) Parameters attributes VideoAttribute The attributes to enable. Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal or the current window have been disposed. NotSupportedException The soft key labels are disabled. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. MarkDirty() Marks the the soft key labels as dirty, and thus, eligible for refresh. public void MarkDirty() Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal or the current window have been disposed. NotSupportedException The soft key labels are disabled. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Refresh() Refreshes the soft label keys. public void Refresh() Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal or the current window have been disposed. NotSupportedException The soft key labels are disabled. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Restore() Restores the soft key labels to the screen. They can be cleared by calling Clear() method. public void Restore() Remarks This operation is not thread safe. Exceptions ObjectDisposedException The terminal or the current window have been disposed. NotSupportedException The soft key labels are disabled. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. SetLabel(int, string, SoftLabelKeyAlignment) Sets a given label within the soft key label panel. public void SetLabel(int index, string title, SoftLabelKeyAlignment align) Parameters index int The index of the label. title string The title of the label. align SoftLabelKeyAlignment Alignment of the label title. Remarks This operation is not thread safe. Exceptions ArgumentNullException The title is null. ArgumentOutOfRangeException The index negative or greater than LabelCount. ObjectDisposedException The terminal has been disposed. NotSupportedException The soft key labels are disabled. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured."
  },
  "api/Sharpie.SoftLabelKeyMode.html": {
    "href": "api/Sharpie.SoftLabelKeyMode.html",
    "title": "Enum SoftLabelKeyMode | sharpie",
    "summary": "Enum SoftLabelKeyMode Namespace Sharpie Assembly sharpie.dll Defines the possible strategies of clearing contents of a window. [PublicAPI] public enum SoftLabelKeyMode Fields Disabled = -1 No soft key labels will be used. FourFour = 1 Indicates a 4-4 arrangement of the labels. FourFourFour = 2 Indicates a 4-4-4 arrangement of the labels. FourFourFourWithIndex = 3 Indicates a 4-4-4 arrangement of the labels with an index line. ThreeTwoThree = 0 Indicates a 3-2-3 arrangement of the labels."
  },
  "api/Sharpie.StandardColor.html": {
    "href": "api/Sharpie.StandardColor.html",
    "title": "Enum StandardColor | sharpie",
    "summary": "Enum StandardColor Namespace Sharpie Assembly sharpie.dll Defines the well-known standard video colors. [PublicAPI] public enum StandardColor : short Fields Black = 0 The black color. Blue = 4 The blue color. Cyan = 6 The cyan color. Default = -1 The default color (fg or bg). Green = 2 The green color. Magenta = 5 The magenta color. Red = 1 The red color. White = 7 The white color. Yellow = 3 The yellow color."
  },
  "api/Sharpie.StartEvent.html": {
    "href": "api/Sharpie.StartEvent.html",
    "title": "Class StartEvent | sharpie",
    "summary": "Class StartEvent Namespace Sharpie Assembly sharpie.dll Generated automatically when EventPump starts listening for events. [PublicAPI] public sealed class StartEvent : Event Inheritance object Event StartEvent Inherited Members Event.Type object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Sharpie.StopEvent.html": {
    "href": "api/Sharpie.StopEvent.html",
    "title": "Class StopEvent | sharpie",
    "summary": "Class StopEvent Namespace Sharpie Assembly sharpie.dll Generated automatically when EventPump stops listening for events. [PublicAPI] public sealed class StopEvent : Event Inheritance object Event StopEvent Inherited Members Event.Type object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Sharpie.Style.html": {
    "href": "api/Sharpie.Style.html",
    "title": "Struct Style | sharpie",
    "summary": "Struct Style Namespace Sharpie Assembly sharpie.dll Represents the style of the text (attributes and colors). [PublicAPI] public struct Style Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Attributes The attributes of the text. public VideoAttribute Attributes { readonly get; init; } Property Value VideoAttribute ColorMixture The color mixture. public ColorMixture ColorMixture { readonly get; init; } Property Value ColorMixture Default The default terminal style. public static Style Default { get; } Property Value Style Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator ==(Style, Style) The equality operator. public static bool operator ==(Style left, Style right) Parameters left Style LHS argument. right Style RHS argument. Returns bool The result of the check. operator !=(Style, Style) The inequality operator. public static bool operator !=(Style left, Style right) Parameters left Style LHS argument. right Style RHS argument. Returns bool The result of the check."
  },
  "api/Sharpie.StyledText.html": {
    "href": "api/Sharpie.StyledText.html",
    "title": "Struct StyledText | sharpie",
    "summary": "Struct StyledText Namespace Sharpie Assembly sharpie.dll Describes a text with mixed in styles. Can be used by WriteText(StyledText, bool). [PublicAPI] public readonly struct StyledText Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors StyledText(string, Style) Creates a new styled text with the given text and style. public StyledText(string text, Style style) Parameters text string The text. style Style The text style. Exceptions ArgumentNullException Thrown if text is null. Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Plus(StyledText) Combines this styled text with another styled text. public StyledText Plus(StyledText rhs) Parameters rhs StyledText The other styled text to combine with. Returns StyledText The combined styled text. Plus(string, Style) Combines this styled text with another styled text. public StyledText Plus(string text, Style style) Parameters text string The other text to combine with. style Style The style of the text to combine with. Returns StyledText The combined styled text. Exceptions ArgumentNullException Thrown if text is null. ToString() Returns a string that represents the current object. public override string? ToString() Returns string A string that represents the current object. Operators operator +(StyledText, StyledText) Combines two styled texts together. public static StyledText operator +(StyledText lhs, StyledText rhs) Parameters lhs StyledText The left hand side styled text to combine. rhs StyledText The left right side styled text to combine. Returns StyledText The combined styled text. operator ==(StyledText, StyledText) Checks if two styled texts are equal. public static bool operator ==(StyledText lhs, StyledText rhs) Parameters lhs StyledText The left hand side styled text. rhs StyledText The left right side styled .. Returns bool The result of the check. operator !=(StyledText, StyledText) Checks if two styled texts are not equal. public static bool operator !=(StyledText lhs, StyledText rhs) Parameters lhs StyledText The left hand side styled text. rhs StyledText The left right side styled .. Returns bool The result of the check."
  },
  "api/Sharpie.SubPad.html": {
    "href": "api/Sharpie.SubPad.html",
    "title": "Class SubPad | sharpie",
    "summary": "Class SubPad Namespace Sharpie Assembly sharpie.dll Represents a Curses sub-pad and contains all it's functionality. [PublicAPI] public sealed class SubPad : Surface, IDisposable, ISubPad, ISurface, IDrawSurface Inheritance object Surface SubPad Implements IDisposable ISubPad ISurface IDrawSurface Inherited Members Surface.Dispose() Surface.Handle Surface.ManagedCaret Surface.Scrollable Surface.Disposed Surface.Style Surface.ColorMixture Surface.Background Surface.CaretLocation Surface.Dirty Surface.LineDirty(int) Surface.EnableAttributes(VideoAttribute) Surface.DisableAttributes(VideoAttribute) Surface.ScrollUp(int) Surface.ScrollDown(int) Surface.InsertEmptyLines(int) Surface.DeleteLines(int) Surface.ChangeTextStyle(int, Style) Surface.WriteText(StyledText, bool) Surface.WriteText(string, Style, bool) Surface.WriteText(string, bool) Surface.NextLine() Surface.DrawText(IAsciiFont, string, Style, bool, bool) Surface.DrawText(IAsciiFont, string, bool, bool) Surface.DrawVerticalLine(int, Rune, Style) Surface.DrawVerticalLine(int) Surface.DrawHorizontalLine(int, Rune, Style) Surface.DrawHorizontalLine(int) Surface.DrawBorder(Rune, Rune, Rune, Rune, Rune, Rune, Rune, Rune, Style) Surface.DrawBorder() Surface.RemoveText(int) Surface.GetText(int) Surface.Clear(ClearStrategy) Surface.Replace(ISurface, ReplaceStrategy) Surface.Replace(ISurface, Rectangle, Point, ReplaceStrategy) Surface.MarkDirty(int, int) Surface.MarkDirty() Surface.IsPointWithin(Point) Surface.IsRectangleWithin(Rectangle) Surface.Draw(Point, Rectangle, IDrawable) Surface.Draw(Point, IDrawable) Surface.Destroy() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties Location Gets or sets the location of the sub-pad within its parent pad. public Point Location { get; set; } Property Value Point Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException The value is outside the parent's bounds. ObjectDisposedException Sub-pad is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Origin Returns the value of Location. protected override Point Origin { get; } Property Value Point Exceptions CursesOperationException A Curses error occured. Pad The parent pad of this sub-pad. public Pad Pad { get; } Property Value Pad Size Gets or sets the size of the sub-pad. public Size Size { get; set; } Property Value Size Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException The value is outside the bounds. ObjectDisposedException Sub-pad is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Methods AssertSynchronized() Asserts that executing thread is bound to the correct synchronization context. protected override void AssertSynchronized() Exceptions CursesSynchronizationException Thrown if current thread is not bound to the correct context. Delete() Deletes the surface from the curses backend. protected override void Delete() Duplicate() Duplicates and existing sub-pad, including its attributes. public ISubPad Duplicate() Returns ISubPad A new sub-pad object. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Sub-pad is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Sharpie.SubWindow.html": {
    "href": "api/Sharpie.SubWindow.html",
    "title": "Class SubWindow | sharpie",
    "summary": "Class SubWindow Namespace Sharpie Assembly sharpie.dll Represents a Curses sub-window and contains all it's functionality. [PublicAPI] public sealed class SubWindow : Surface, IDisposable, ISubWindow, ISurface, IDrawSurface Inheritance object Surface SubWindow Implements IDisposable ISubWindow ISurface IDrawSurface Inherited Members Surface.Dispose() Surface.Handle Surface.ManagedCaret Surface.Scrollable Surface.Disposed Surface.Style Surface.ColorMixture Surface.Background Surface.CaretLocation Surface.Dirty Surface.LineDirty(int) Surface.EnableAttributes(VideoAttribute) Surface.DisableAttributes(VideoAttribute) Surface.ScrollUp(int) Surface.ScrollDown(int) Surface.InsertEmptyLines(int) Surface.DeleteLines(int) Surface.ChangeTextStyle(int, Style) Surface.WriteText(StyledText, bool) Surface.WriteText(string, Style, bool) Surface.WriteText(string, bool) Surface.NextLine() Surface.DrawText(IAsciiFont, string, Style, bool, bool) Surface.DrawText(IAsciiFont, string, bool, bool) Surface.DrawVerticalLine(int, Rune, Style) Surface.DrawVerticalLine(int) Surface.DrawHorizontalLine(int, Rune, Style) Surface.DrawHorizontalLine(int) Surface.DrawBorder(Rune, Rune, Rune, Rune, Rune, Rune, Rune, Rune, Style) Surface.DrawBorder() Surface.RemoveText(int) Surface.GetText(int) Surface.Clear(ClearStrategy) Surface.Replace(ISurface, ReplaceStrategy) Surface.Replace(ISurface, Rectangle, Point, ReplaceStrategy) Surface.MarkDirty(int, int) Surface.MarkDirty() Surface.IsPointWithin(Point) Surface.IsRectangleWithin(Rectangle) Surface.Draw(Point, Rectangle, IDrawable) Surface.Draw(Point, IDrawable) Surface.Destroy() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties Location Gets or sets the location of the sub-window within its parent window. public Point Location { get; set; } Property Value Point Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException The value is outside the parent's bounds. ObjectDisposedException Window is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Origin Returns the value of Location. protected override Point Origin { get; } Property Value Point Exceptions CursesOperationException A Curses error occured. Size Gets or sets the size of the sub-window. public Size Size { get; set; } Property Value Size Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException The value is outside the bounds. ObjectDisposedException Window is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Window The parent window of this sub-window. public Window Window { get; } Property Value Window Methods AssertSynchronized() Asserts that executing thread is bound to the correct synchronization context. protected override void AssertSynchronized() Exceptions CursesSynchronizationException Thrown if current thread is not bound to the correct context. Delete() Deletes the surface from the curses backend. protected override void Delete() Duplicate() Duplicates this sub-window, including its attributes. public ISubWindow Duplicate() Returns ISubWindow A new window object. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Screen is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Sharpie.Surface.html": {
    "href": "api/Sharpie.Surface.html",
    "title": "Class Surface | sharpie",
    "summary": "Class Surface Namespace Sharpie Assembly sharpie.dll Represents a surface and contains all its functionality. [PublicAPI] public abstract class Surface : ISurface, IDrawSurface, IDisposable Inheritance object Surface Implements ISurface IDrawSurface IDisposable Derived Pad SubPad SubWindow TerminalSurface Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Area Gets the area of the surface based on the Origin and Size. protected Rectangle Area { get; } Property Value Rectangle Background Gets or sets the surface background. public (Rune @char, Style style) Background { get; set; } Property Value (Rune char, Style style) Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CaretLocation Gets or sets the current position of the caret within the surface. public Point CaretLocation { get; set; } Property Value Point Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException The value is outside the surface bounds. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. ColorMixture Gets or sets the color mixture of the surface. public ColorMixture ColorMixture { get; set; } Property Value ColorMixture Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Curses The curses backend. protected ICursesBackend Curses { get; } Property Value ICursesBackend Dirty Specifies whether the surface has some \"dirty\" parts that need to be synchronized to the console. public bool Dirty { get; } Property Value bool Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Disposed Checks if the surface has been disposed and is no longer usable. public bool Disposed { get; } Property Value bool Handle The Curses handle for the surface. public IntPtr Handle { get; } Property Value IntPtr Exceptions ObjectDisposedException Surface is no longer usable. ObjectDisposedException Surface is no longer usable. ManagedCaret Controls whether the caret is managed by the application and should not be managed by the hardware. public bool ManagedCaret { get; set; } Property Value bool Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Origin Returns the origin of the surface (location within a potential parent). This implementation always returns (0, 0). protected virtual Point Origin { get; } Property Value Point Scrollable Gets or sets the ability of the surface to scroll its contents when writing needs a new line. public bool Scrollable { get; set; } Property Value bool Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Size Gets the size of the surface. public Size Size { get; } Property Value Size Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Style Gets or sets the style of the surface. public Style Style { get; set; } Property Value Style Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Methods AssertAlive() Asserts that the surface is not disposed. protected void AssertAlive() Exceptions ObjectDisposedException The surface has been disposed. AssertSynchronized() Asserts that executing thread is bound to the correct synchronization context. protected abstract void AssertSynchronized() Exceptions CursesSynchronizationException Thrown if current thread is not bound to the correct context. ChangeTextStyle(int, Style) Changes the style of the text on the current line and starting from the caret position. public void ChangeTextStyle(int width, Style style) Parameters width int The number of characters to change. style Style The applied style. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Clear(ClearStrategy) Clears the contents of the row/surface. public void Clear(ClearStrategy strategy = ClearStrategy.Full) Parameters strategy ClearStrategy The strategy to use. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Delete() Deletes the surface from the curses backend. protected virtual void Delete() DeleteLines(int) Deletes lines lines starting with the current caret position. All lines below move up. public void DeleteLines(int lines) Parameters lines int Number of lines to inserts. Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException The lines is less than one or greater than the size of the surface. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Destroy() Removes the surface form the parent, destroys all children and itself. public void Destroy() Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. DisableAttributes(VideoAttribute) Disables specified attributes and keep the others untouched. public void DisableAttributes(VideoAttribute attributes) Parameters attributes VideoAttribute The attributes to disable. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Dispose() Disposes the current instance. public void Dispose() Draw(Point, IDrawable) Draws a given drawable to the surface. public void Draw(Point location, IDrawable drawable) Parameters location Point The location of the drawing. drawable IDrawable The drawing to draw. Remarks This operation is not thread safe. Exceptions ArgumentNullException Thrown if drawable is null. ArgumentOutOfRangeException Thrown if location is out of bounds. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Draw(Point, Rectangle, IDrawable) Draws a given drawable to the surface. public void Draw(Point location, Rectangle area, IDrawable drawable) Parameters location Point The location of the drawing. area Rectangle The area of the drawing to draw. drawable IDrawable The drawing to draw. Remarks This operation is not thread safe. Exceptions ArgumentNullException Thrown if drawable is null. ArgumentOutOfRangeException Thrown if location or area are out of bounds. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. DrawBorder() Draws a border around the surface's edges using standard characters. public void DrawBorder() Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. DrawBorder(Rune, Rune, Rune, Rune, Rune, Rune, Rune, Rune, Style) Draws a vertical line from the current caret position downwards. public void DrawBorder(Rune leftSideChar, Rune rightSideChar, Rune topSideChar, Rune bottomSideChar, Rune topLeftCornerChar, Rune topRightCornerChar, Rune bottomLeftCornerChar, Rune bottomRightCornerChar, Style style) Parameters leftSideChar Rune The left-side character. rightSideChar Rune The right-side character. topSideChar Rune The top-side character. bottomSideChar Rune The bottom-side character. topLeftCornerChar Rune The top-left corner character. topRightCornerChar Rune The top-right corner character. bottomLeftCornerChar Rune The bottom-left corner character. bottomRightCornerChar Rune The bottom-right corner character. style Style The style to use. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. DrawHorizontalLine(int) Draws a horizontal line using the standard line character from the current caret position downwards. public void DrawHorizontalLine(int length) Parameters length int The length of the line. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. DrawHorizontalLine(int, Rune, Style) Draws a horizontal line from the current caret position downwards. public void DrawHorizontalLine(int length, Rune @char, Style style) Parameters length int The length of the line. char Rune The character to use for the line. style Style The style to use. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. DrawText(IAsciiFont, string, Style, bool, bool) Draws text using an ASCII font at the caret position at the current surface and advances the caret. public void DrawText(IAsciiFont font, string text, Style style, bool interpretSpecialChars = true, bool wrap = true) Parameters font IAsciiFont The ASCII font to draw with. text string The text to write. style Style The style of the text. interpretSpecialChars bool If true, special characters will be treated as such (e.g. \\n) wrap bool If true, text will be wrapped automatically to next line. Remarks This operation is not thread safe. Exceptions ArgumentNullException Thrown if font or text are null. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. DrawText(IAsciiFont, string, bool, bool) Draws text using an ASCII font at the caret position at the current surface and advances the caret. public void DrawText(IAsciiFont font, string text, bool interpretSpecialChars = true, bool wrap = true) Parameters font IAsciiFont The ASCII font to draw with. text string The text to write. interpretSpecialChars bool If true, special characters will be treated as such (e.g. \\n) wrap bool If true, text will be wrapped automatically to next line. Remarks This operation is not thread safe. Exceptions ArgumentNullException Thrown if font or text are null. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. DrawVerticalLine(int) Draws a vertical line using the standard line character from the current caret position downwards. public void DrawVerticalLine(int length) Parameters length int The length of the line. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. DrawVerticalLine(int, Rune, Style) Draws a vertical line from the current caret position downwards. public void DrawVerticalLine(int length, Rune @char, Style style) Parameters length int The length of the line. char Rune The character to use for the line. style Style The style to use. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. EnableAttributes(VideoAttribute) Enables specified attributes and keep the others untouched. public void EnableAttributes(VideoAttribute attributes) Parameters attributes VideoAttribute The attributes to enable. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. ~Surface() The destructor. Calls Destroy(). protected ~Surface() GetText(int) Gets the text from the surface at the caret position to the right. public (Rune @char, Style style)[] GetText(int count) Parameters count int The number of characters to get. Returns (Rune char, Style style)[] Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. InsertEmptyLines(int) Inserts lines empty lines at the current caret position. public void InsertEmptyLines(int lines) Parameters lines int Number of lines to inserts. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. IsPointWithin(Point) Checks if a given point fits within the current surface. public bool IsPointWithin(Point point) Parameters point Point Returns bool The result of the check. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. IsRectangleWithin(Rectangle) Checks if a given rectangle fits within the current surface. public bool IsRectangleWithin(Rectangle rect) Parameters rect Rectangle Returns bool The result of the check. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. LineDirty(int) Checks if the line at y is dirty. public bool LineDirty(int y) Parameters y int Returns bool Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. MarkDirty() Marks the entire contents of the surface as Dirty. public void MarkDirty() Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. MarkDirty(int, int) Marks a number of lines within the surface as Dirty. public virtual void MarkDirty(int y, int count) Parameters y int The line to start with. count int The count of lines to mark dirty. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. NextLine() Helper method that moves the caret to the start of the next line. If the surface is Scrollable, and the caret if on the last line, it will push the contents of the surface up by one line. public void NextLine() Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. RemoveText(int) Removes the text under the caret and moves the contents of the line to the left. public void RemoveText(int count) Parameters count int The number of characters to remove. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. ArgumentOutOfRangeException The count less than one. Replace(ISurface, ReplaceStrategy) Replaces the content of a given surface with the contents of the current surface. public virtual void Replace(ISurface surface, ReplaceStrategy strategy) Parameters surface ISurface The surface to copy contents to. strategy ReplaceStrategy The used strategy. Remarks This operation is not thread safe. Exceptions ArgumentNullException The surface is null. ArgumentException The contents of surface cannot be replaced. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Replace(ISurface, Rectangle, Point, ReplaceStrategy) Replaces the content of a given surface with the contents of the current surface. public void Replace(ISurface surface, Rectangle srcRect, Point destPos, ReplaceStrategy strategy) Parameters surface ISurface The surface to copy contents to. srcRect Rectangle The source rectangle to copy. destPos Point The destination position. strategy ReplaceStrategy The used strategy. Remarks This operation is not thread safe. Exceptions ArgumentNullException The surface is null. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. ScrollDown(int) Scrolls the contents of the surface lines down. Only works for scrollable surfaces. public void ScrollDown(int lines) Parameters lines int Number of lines to scroll. Remarks This operation is not thread safe. Exceptions NotSupportedException The Scrollable is false. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. ScrollUp(int) Scrolls the contents of the surface lines up. Only works for scrollable surfaces. public void ScrollUp(int lines) Parameters lines int Number of lines to scroll. Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException The lines is less than one or greater than the size of the surface. NotSupportedException The Scrollable is false. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WriteText(StyledText, bool) Writes a text at the caret position at the current surface and advances the caret. public void WriteText(StyledText text, bool wrap = true) Parameters text StyledText The styled text to write. wrap bool If true, text will be wrapped automatically to next line. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. WriteText(string, Style, bool) Writes a text at the caret position at the current surface and advances the caret. public void WriteText(string text, Style style, bool wrap = true) Parameters text string The text to write. style Style The style of the text. wrap bool If true, text will be wrapped automatically to next line. Remarks This operation is not thread safe. Exceptions ArgumentNullException The text is null. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. WriteText(string, bool) Writes a text at the caret position at the current surface and advances the caret. public void WriteText(string text, bool wrap = true) Parameters text string The text to write. wrap bool If true, text will be wrapped automatically to next line. Remarks This operation is not thread safe. Exceptions ArgumentNullException The text is null. ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured."
  },
  "api/Sharpie.Terminal.html": {
    "href": "api/Sharpie.Terminal.html",
    "title": "Class Terminal | sharpie",
    "summary": "Class Terminal Namespace Sharpie Assembly sharpie.dll This class allows the developer to interact with the terminal and its settings. This is the main class that is used in a Curses-based application. [PublicAPI] public sealed class Terminal : ITerminal, IDisposable Inheritance object Terminal Implements ITerminal IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Terminal(ICursesBackend, TerminalOptions) Creates a new instance of the terminal. public Terminal(ICursesBackend curses, TerminalOptions options) Parameters curses ICursesBackend The curses backend. options TerminalOptions The terminal options. Exceptions ArgumentOutOfRangeException Some of the options are invalid. InvalidOperationException Another terminal instance is active. ArgumentNullException The curses is null. CursesOperationException A Curses error occured. Properties BaudRate Gets the terminal's baud rate. public int BaudRate { get; } Property Value int Exceptions CursesOperationException A Curses error occured. Colors Provides access to the terminal's color management. public ColorManager Colors { get; } Property Value ColorManager Exceptions ObjectDisposedException The terminal has been disposed. CurrentEraseChar Gets the currently defined erase character. null is returned if none is defined. public Rune? CurrentEraseChar { get; } Property Value Rune? CurrentKillChar Gets the currently defined kill character. null is returned if none is defined. public Rune? CurrentKillChar { get; } Property Value Rune? Curses The Curses backend. public ICursesBackend Curses { get; } Property Value ICursesBackend CursesVersion Returns the version of the Curses library in use. public string? CursesVersion { get; } Property Value string Description Returns the long description of the terminal. public string? Description { get; } Property Value string Disposed Checks whether the terminal has been disposed of and is no longer usable. public bool Disposed { get; } Property Value bool Events The event pump instance that can be used to read events from the terminal. public EventPump Events { get; } Property Value EventPump Exceptions ObjectDisposedException The terminal has been disposed. Footer The footer surface. Only initialized if AllocateFooter was set. public TerminalSurface? Footer { get; } Property Value TerminalSurface Exceptions ObjectDisposedException The terminal has been disposed. Header The header surface. Only initialized if AllocateHeader was set. public TerminalSurface? Header { get; } Property Value TerminalSurface Exceptions ObjectDisposedException The terminal has been disposed. Name Returns the name of the terminal. public string? Name { get; } Property Value string Options Gets the options that are used by this terminal instance. public TerminalOptions Options { get; } Property Value TerminalOptions Screen The screen instance. Use this property to access the entire screen functionality. public Screen Screen { get; } Property Value Screen Exceptions ObjectDisposedException The terminal has been disposed. SoftLabelKeys Provides access to the terminal's color management. public SoftLabelKeyManager SoftLabelKeys { get; } Property Value SoftLabelKeyManager Exceptions ObjectDisposedException The terminal has been disposed. SupportedAttributes Gets the combination of supported terminal attributes. public VideoAttribute SupportedAttributes { get; } Property Value VideoAttribute Methods Alert(bool) Attempts to notify the user with audio or flashing alert. public void Alert(bool silent) Parameters silent bool The alert mode. Remarks The actual notification depends on terminal support. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. AtomicRefresh() Creates a batch update lock. public IDisposable AtomicRefresh() Returns IDisposable A disposable object that need to be disposed to release the batch update lock. Delay(Func<Terminal, Task>, int) Sets up a delayed action that is to be executed after some time. public IInterval Delay(Func<Terminal, Task> action, int delayMillis) Parameters action Func<Terminal, Task> The action to be executed. delayMillis int The delay in milliseconds. Returns IInterval The interval object. Exceptions ArgumentOutOfRangeException Thrown if delayMillis is negative. Delay<TState>(Func<Terminal, TState?, Task>, int, TState?) Sets up a delayed action that is to be executed after some time. public IInterval Delay<TState>(Func<Terminal, TState?, Task> action, int delayMillis, TState? state) Parameters action Func<Terminal, TState, Task> The action to be executed. delayMillis int The delay in milliseconds. state TState Returns IInterval The interval object. Type Parameters TState Exceptions ArgumentOutOfRangeException Thrown if delayMillis is negative. Delegate(Func<Task>) Delegates an action to be executed on the main thread. public void Delegate(Func<Task> action) Parameters action Func<Task> The action to execute. Exceptions ArgumentNullException Thrown if action is null. ObjectDisposedException The terminal has been disposed. Dispose() Disposes the current terminal instance. public void Dispose() ~Terminal() The destructor. Calls Dispose() method. protected ~Terminal() Repeat(Func<Terminal, Task>, int, bool) Sets up a delayed action that is to be executed after some time. public IInterval Repeat(Func<Terminal, Task> action, int intervalMillis, bool immediate = false) Parameters action Func<Terminal, Task> The action to be executed. intervalMillis int The interval in milliseconds. immediate bool If true, triggers the execution of the action immediately. Returns IInterval The interval object. Exceptions ArgumentOutOfRangeException Thrown if intervalMillis is negative. Repeat<TState>(Func<Terminal, TState?, Task>, int, bool, TState?) Sets up a delayed action that is to be executed after some time. public IInterval Repeat<TState>(Func<Terminal, TState?, Task> action, int intervalMillis, bool immediate = false, TState? state = default) Parameters action Func<Terminal, TState, Task> The action to be executed. intervalMillis int The interval in milliseconds. immediate bool If true, triggers the execution of the action immediately. state TState Returns IInterval The interval object. Type Parameters TState Exceptions ArgumentOutOfRangeException Thrown if intervalMillis is negative. Run(Func<ITerminal, Event, Task>, bool) Runs the application main loop and dispatches each event to eventAction. public void Run(Func<ITerminal, Event, Task> eventAction, bool stopOnCtrlC = true) Parameters eventAction Func<ITerminal, Event, Task> The method to accept the events. stopOnCtrlC bool Set to true if CTRL+C should interrupt the main loop. Remarks This operation is not thread safe. Exceptions ArgumentNullException Thrown when eventAction is null. InvalidOperationException Thrown if another Run(Func<ITerminal, Event, Task>, bool) is already running. ObjectDisposedException The terminal has been disposed. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. ArgumentNullException Thrown when eventAction is null. InvalidOperationException Thrown if another Run(Func<ITerminal, Event, Task>, bool) is already running. SetTitle(string) Sets the terminal title. public void SetTitle(string title) Parameters title string The title of the terminal. Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Stop(bool) Enqueues a stop signal for the Run(Func<ITerminal, Event, Task>, bool) method. public void Stop(bool wait = false) Parameters wait bool If true, waits until running completes."
  },
  "api/Sharpie.TerminalOptions.html": {
    "href": "api/Sharpie.TerminalOptions.html",
    "title": "Class TerminalOptions | sharpie",
    "summary": "Class TerminalOptions Namespace Sharpie Assembly sharpie.dll Stores the terminal options. [PublicAPI] public record TerminalOptions : IEquatable<TerminalOptions> Inheritance object TerminalOptions Implements IEquatable<TerminalOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalOptions(bool, bool, bool, bool, int?, bool, CaretMode, bool, bool, SoftLabelKeyMode, bool, bool, bool, bool) Stores the terminal options. public TerminalOptions(bool UseColors = true, bool EchoInput = false, bool UseInputBuffering = false, bool UseMouse = true, int? MouseClickInterval = null, bool SuppressControlKeys = true, CaretMode CaretMode = CaretMode.Visible, bool ManualFlush = false, bool ManagedWindows = false, SoftLabelKeyMode SoftLabelKeyMode = SoftLabelKeyMode.Disabled, bool AllocateHeader = false, bool AllocateFooter = false, bool UseEnvironmentOverrides = true, bool UseStandardKeySequenceResolvers = true) Parameters UseColors bool Toggle the use of colors. Default is true. EchoInput bool Toggle the input echoing. Default is false. UseInputBuffering bool Toggles buffering input. Default is false. UseMouse bool Toggles the use of mouse. Default is true. MouseClickInterval int? The mouse click delay. Default is null which disables Curses handling of clicks. SuppressControlKeys bool Toggles the suppression of control keys such as CTRL+C. Default is true. CaretMode CaretMode Specifies the caret mode. Default is Visible. ManualFlush bool Toggle the ability to manually flush the terminal. Default is false. ManagedWindows bool Specifies whether the Screen manages overlapping windows. Default is false. SoftLabelKeyMode SoftLabelKeyMode Specifies the SLK mode. Default is Disabled. AllocateHeader bool If true, allocates one line at the top as a header. AllocateFooter bool If true, allocates one line at the bottom as a footer. UseEnvironmentOverrides bool Toggles the use of environment LINE/COL overrides. Default is true. UseStandardKeySequenceResolvers bool Registers the standard key sequence resolvers defined in KeySequenceResolver. Properties AllocateFooter If true, allocates one line at the bottom as a footer. public bool AllocateFooter { get; init; } Property Value bool AllocateHeader If true, allocates one line at the top as a header. public bool AllocateHeader { get; init; } Property Value bool CaretMode Specifies the caret mode. Default is Visible. public CaretMode CaretMode { get; init; } Property Value CaretMode EchoInput Toggle the input echoing. Default is false. public bool EchoInput { get; init; } Property Value bool ManagedWindows Specifies whether the Screen manages overlapping windows. Default is false. public bool ManagedWindows { get; init; } Property Value bool ManualFlush Toggle the ability to manually flush the terminal. Default is false. public bool ManualFlush { get; init; } Property Value bool MouseClickInterval The mouse click delay. Default is null which disables Curses handling of clicks. public int? MouseClickInterval { get; init; } Property Value int? SoftLabelKeyMode Specifies the SLK mode. Default is Disabled. public SoftLabelKeyMode SoftLabelKeyMode { get; init; } Property Value SoftLabelKeyMode SuppressControlKeys Toggles the suppression of control keys such as CTRL+C. Default is true. public bool SuppressControlKeys { get; init; } Property Value bool UseColors Toggle the use of colors. Default is true. public bool UseColors { get; init; } Property Value bool UseEnvironmentOverrides Toggles the use of environment LINE/COL overrides. Default is true. public bool UseEnvironmentOverrides { get; init; } Property Value bool UseInputBuffering Toggles buffering input. Default is false. public bool UseInputBuffering { get; init; } Property Value bool UseMouse Toggles the use of mouse. Default is true. public bool UseMouse { get; init; } Property Value bool UseStandardKeySequenceResolvers Registers the standard key sequence resolvers defined in KeySequenceResolver. public bool UseStandardKeySequenceResolvers { get; init; } Property Value bool"
  },
  "api/Sharpie.TerminalResizeEvent.html": {
    "href": "api/Sharpie.TerminalResizeEvent.html",
    "title": "Class TerminalResizeEvent | sharpie",
    "summary": "Class TerminalResizeEvent Namespace Sharpie Assembly sharpie.dll The terminal resized event. [PublicAPI] public sealed class TerminalResizeEvent : Event Inheritance object Event TerminalResizeEvent Inherited Members Event.Type object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Size The new size of the terminal. public Size Size { get; } Property Value Size Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Sharpie.TerminalSurface.html": {
    "href": "api/Sharpie.TerminalSurface.html",
    "title": "Class TerminalSurface | sharpie",
    "summary": "Class TerminalSurface Namespace Sharpie Assembly sharpie.dll Represents a screen-bound surface and contains all its functionality. [PublicAPI] public class TerminalSurface : Surface, IDisposable, ITerminalSurface, ISurface, IDrawSurface Inheritance object Surface TerminalSurface Implements IDisposable ITerminalSurface ISurface IDrawSurface Derived Screen Window Inherited Members Surface.Curses Surface.Origin Surface.Area Surface.Dispose() Surface.Handle Surface.ManagedCaret Surface.Scrollable Surface.Disposed Surface.Style Surface.ColorMixture Surface.Background Surface.Size Surface.CaretLocation Surface.Dirty Surface.LineDirty(int) Surface.EnableAttributes(VideoAttribute) Surface.DisableAttributes(VideoAttribute) Surface.ScrollUp(int) Surface.ScrollDown(int) Surface.InsertEmptyLines(int) Surface.DeleteLines(int) Surface.ChangeTextStyle(int, Style) Surface.WriteText(StyledText, bool) Surface.WriteText(string, Style, bool) Surface.WriteText(string, bool) Surface.NextLine() Surface.DrawText(IAsciiFont, string, Style, bool, bool) Surface.DrawText(IAsciiFont, string, bool, bool) Surface.DrawVerticalLine(int, Rune, Style) Surface.DrawVerticalLine(int) Surface.DrawHorizontalLine(int, Rune, Style) Surface.DrawHorizontalLine(int) Surface.DrawBorder(Rune, Rune, Rune, Rune, Rune, Rune, Rune, Rune, Style) Surface.DrawBorder() Surface.RemoveText(int) Surface.GetText(int) Surface.Clear(ClearStrategy) Surface.Replace(ISurface, ReplaceStrategy) Surface.Replace(ISurface, Rectangle, Point, ReplaceStrategy) Surface.MarkDirty(int, int) Surface.MarkDirty() Surface.IsPointWithin(Point) Surface.IsRectangleWithin(Rectangle) Surface.Draw(Point, Rectangle, IDrawable) Surface.Draw(Point, IDrawable) Surface.Destroy() Surface.AssertAlive() Surface.Delete() Surface.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ImmediateRefresh Set or get the immediate refresh capability of the surface. public bool ImmediateRefresh { get; set; } Property Value bool Remarks Immediate refresh will make the surface redraw affected areas on each change. This might be very slow for most use cases so the default is false. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Terminal The terminal this surface belongs to. public Terminal Terminal { get; } Property Value Terminal Methods AssertSynchronized() Asserts that executing thread is bound to the correct synchronization context. protected override void AssertSynchronized() Exceptions CursesSynchronizationException Thrown if current thread is not bound to the correct context. Refresh() Redraws all the dirty lines of the surface to the terminal. If AtomicRefresh() is active, all refreshes are batched together until the lock is released. public virtual void Refresh() Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Refresh(int, int) Redraws the given lines of the window to the terminal. public virtual void Refresh(int y, int count) Parameters y int The starting line to refresh. count int The number of lines to refresh. Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException Thrown if y or count are negative. InvalidOperationException Thrown if an atomic refresh is in progress. ObjectDisposedException Window is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured."
  },
  "api/Sharpie.Tests.AsciiFontTests.html": {
    "href": "api/Sharpie.Tests.AsciiFontTests.html",
    "title": "Class AsciiFontTests | sharpie",
    "summary": "Class AsciiFontTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class AsciiFontTests Inheritance object AsciiFontTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_SetsTheExpectedProperties() [TestMethod] public void Ctor_SetsTheExpectedProperties() Ctor_Throws_IfBaselineLessGreaterThanHeight() [TestMethod] public void Ctor_Throws_IfBaselineLessGreaterThanHeight() Ctor_Throws_IfBaselineLessThanOne() [TestMethod] public void Ctor_Throws_IfBaselineLessThanOne() Ctor_Throws_IfHeightLessThanOne() [TestMethod] public void Ctor_Throws_IfHeightLessThanOne() Ctor_Throws_IfNameIsNullOrEmpty() [TestMethod] public void Ctor_Throws_IfNameIsNullOrEmpty() GetGlyph_CallsGetGlyphs1() [TestMethod] public void GetGlyph_CallsGetGlyphs1() GetGlyphs2_CallsGetGlyphs1() [TestMethod] public void GetGlyphs2_CallsGetGlyphs1()"
  },
  "api/Sharpie.Tests.BaseCursesBackendTests.html": {
    "href": "api/Sharpie.Tests.BaseCursesBackendTests.html",
    "title": "Class BaseCursesBackendTests | sharpie",
    "summary": "Class BaseCursesBackendTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class BaseCursesBackendTests Inheritance object BaseCursesBackendTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TestContext [UsedImplicitly] public TestContext TestContext { get; set; } Property Value TestContext Methods DecodeRawMouseButtonState_ParsesUsingMouseParser() [TestMethod] public void DecodeRawMouseButtonState_ParsesUsingMouseParser() DecodeRawMouseButtonState_ReturnsDefault_IfNotParsed() [TestMethod] public void DecodeRawMouseButtonState_ReturnsDefault_IfNotParsed() TestInitialize() [TestInitialize] public void TestInitialize() assume_default_colors_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void assume_default_colors_IsRelayedToLibrary(int ret) Parameters ret int baudrate_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void baudrate_IsRelayedToLibrary(int ret) Parameters ret int beep_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void beep_IsRelayedToLibrary(int ret) Parameters ret int can_change_color_IsRelayedToLibrary(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void can_change_color_IsRelayedToLibrary(bool ret) Parameters ret bool cbreak_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void cbreak_IsRelayedToLibrary(int ret) Parameters ret int color_content_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void color_content_IsRelayedToLibrary(int ret) Parameters ret int copywin_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void copywin_IsRelayedToLibrary(int ret) Parameters ret int curs_set_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void curs_set_IsRelayedToLibrary(int ret) Parameters ret int curses_version_IsRelayedToLibrary(string) [TestMethod] [DataRow(null)] [DataRow(\"hello\")] public void curses_version_IsRelayedToLibrary(string ret) Parameters ret string delwin_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void delwin_IsRelayedToLibrary(int ret) Parameters ret int derwin_IsRelayedToLibrary(int) [TestMethod] [DataRow(99)] [DataRow(0)] public void derwin_IsRelayedToLibrary(int ret) Parameters ret int doupdate_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void doupdate_IsRelayedToLibrary(int ret) Parameters ret int dupwin_IsRelayedToLibrary(int) [TestMethod] [DataRow(99)] [DataRow(0)] public void dupwin_IsRelayedToLibrary(int ret) Parameters ret int echo_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void echo_IsRelayedToLibrary(int ret) Parameters ret int erasewchar_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void erasewchar_IsRelayedToLibrary(int ret) Parameters ret int flash_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void flash_IsRelayedToLibrary(int ret) Parameters ret int getbegx_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void getbegx_IsRelayedToLibrary(int ret) Parameters ret int getbegy_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void getbegy_IsRelayedToLibrary(int ret) Parameters ret int getcurx_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void getcurx_IsRelayedToLibrary(int ret) Parameters ret int getcury_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void getcury_IsRelayedToLibrary(int ret) Parameters ret int getmaxx_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void getmaxx_IsRelayedToLibrary(int ret) Parameters ret int getmaxy_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void getmaxy_IsRelayedToLibrary(int ret) Parameters ret int getparx_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void getparx_IsRelayedToLibrary(int ret) Parameters ret int getpary_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void getpary_IsRelayedToLibrary(int ret) Parameters ret int has_colors_IsRelayedToLibrary(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void has_colors_IsRelayedToLibrary(bool ret) Parameters ret bool immedok_IsRelayedToLibrary(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void immedok_IsRelayedToLibrary(bool yes) Parameters yes bool init_color_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void init_color_IsRelayedToLibrary(int ret) Parameters ret int init_pair_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void init_pair_IsRelayedToLibrary(int ret) Parameters ret int initscr_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(999)] public void initscr_IsRelayedToLibrary(int ret) Parameters ret int initscr_WhenFreeBsd_CallsLibc_ToSetupUnicode() [TestMethod] public void initscr_WhenFreeBsd_CallsLibc_ToSetupUnicode() initscr_WhenLinux_CallsLibc_ToSetupUnicode() [TestMethod] public void initscr_WhenLinux_CallsLibc_ToSetupUnicode() initscr_WhenMacOs_CallsLibc_ToSetupUnicode() [TestMethod] public void initscr_WhenMacOs_CallsLibc_ToSetupUnicode() intrflush_IsRelayedToLibrary(bool, int) [TestMethod] [DataRow(true, 0)] [DataRow(false, -1)] public void intrflush_IsRelayedToLibrary(bool yes, int ret) Parameters yes bool ret int is_leaveok_IsRelayedToLibrary(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void is_leaveok_IsRelayedToLibrary(bool ret) Parameters ret bool is_linetouched_IsRelayedToLibrary(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void is_linetouched_IsRelayedToLibrary(bool ret) Parameters ret bool is_wintouched_IsRelayedToLibrary(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void is_wintouched_IsRelayedToLibrary(bool ret) Parameters ret bool key_name_IsRelayedToLibrary(string) [TestMethod] [DataRow(null)] [DataRow(\"hello\")] public void key_name_IsRelayedToLibrary(string ret) Parameters ret string keypad_IsRelayedToLibrary(bool, int) [TestMethod] [DataRow(true, 0)] [DataRow(false, -1)] public void keypad_IsRelayedToLibrary(bool yes, int ret) Parameters yes bool ret int killwchar_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void killwchar_IsRelayedToLibrary(int ret) Parameters ret int leaveok_IsRelayedToLibrary(bool, int) [TestMethod] [DataRow(true, 0)] [DataRow(false, -1)] public void leaveok_IsRelayedToLibrary(bool yes, int ret) Parameters yes bool ret int longname_IsRelayedToLibrary(string) [TestMethod] [DataRow(null)] [DataRow(\"hello\")] public void longname_IsRelayedToLibrary(string ret) Parameters ret string meta_IsRelayedToLibrary(bool, int) [TestMethod] [DataRow(true, 0)] [DataRow(false, -1)] public void meta_IsRelayedToLibrary(bool yes, int ret) Parameters yes bool ret int mouseinterval_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void mouseinterval_IsRelayedToLibrary(int ret) Parameters ret int mousemask_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void mousemask_IsRelayedToLibrary(int ret) Parameters ret int mousemask_WhenUnix_CallsCursesButNotConsole_IfCursesFails() [TestMethod] public void mousemask_WhenUnix_CallsCursesButNotConsole_IfCursesFails() mousemask_WhenUnix_OutsToConsole_WhenAll(int) [TestMethod] [DataRow(1)] [DataRow(2)] public void mousemask_WhenUnix_OutsToConsole_WhenAll(int abi) Parameters abi int mousemask_WhenUnix_OutsToConsole_WhenNothing() [TestMethod] public void mousemask_WhenUnix_OutsToConsole_WhenNothing() mousemask_WhenUnix_OutsToConsole_WhenReportingPosition(int) [TestMethod] [DataRow(1)] [DataRow(2)] public void mousemask_WhenUnix_OutsToConsole_WhenReportingPosition(int abi) Parameters abi int mvderwin_IsRelayedToLibrary(int) [TestMethod] [DataRow(-1)] [DataRow(0)] public void mvderwin_IsRelayedToLibrary(int ret) Parameters ret int mvwin_IsRelayedToLibrary(int) [TestMethod] [DataRow(-1)] [DataRow(0)] public void mvwin_IsRelayedToLibrary(int ret) Parameters ret int newpad_IsRelayedToLibrary(int) [TestMethod] [DataRow(99)] [DataRow(0)] public void newpad_IsRelayedToLibrary(int ret) Parameters ret int newwin_IsRelayedToLibrary(int) [TestMethod] [DataRow(99)] [DataRow(0)] public void newwin_IsRelayedToLibrary(int ret) Parameters ret int nl_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void nl_IsRelayedToLibrary(int ret) Parameters ret int nocbreak_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void nocbreak_IsRelayedToLibrary(int ret) Parameters ret int nodelay_IsRelayedToLibrary(bool, int) [TestMethod] [DataRow(true, 0)] [DataRow(false, -1)] public void nodelay_IsRelayedToLibrary(bool yes, int ret) Parameters yes bool ret int noecho_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void noecho_IsRelayedToLibrary(int ret) Parameters ret int nonl_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void nonl_IsRelayedToLibrary(int ret) Parameters ret int noqiflush_IsRelayedToLibrary() [TestMethod] public void noqiflush_IsRelayedToLibrary() noraw_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void noraw_IsRelayedToLibrary(int ret) Parameters ret int notimeout_IsRelayedToLibrary(bool, int) [TestMethod] [DataRow(true, 0)] [DataRow(false, -1)] public void notimeout_IsRelayedToLibrary(bool yes, int ret) Parameters yes bool ret int overlay_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void overlay_IsRelayedToLibrary(int ret) Parameters ret int overwrite_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void overwrite_IsRelayedToLibrary(int ret) Parameters ret int pair_content_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void pair_content_IsRelayedToLibrary(int ret) Parameters ret int pnoutrefresh_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void pnoutrefresh_IsRelayedToLibrary(int ret) Parameters ret int prefresh_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void prefresh_IsRelayedToLibrary(int ret) Parameters ret int qiflush_IsRelayedToLibrary() [TestMethod] public void qiflush_IsRelayedToLibrary() raw_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void raw_IsRelayedToLibrary(int ret) Parameters ret int ripoffline_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void ripoffline_IsRelayedToLibrary(int ret) Parameters ret int scrollok_IsRelayedToLibrary(bool, int) [TestMethod] [DataRow(true, 0)] [DataRow(false, -1)] public void scrollok_IsRelayedToLibrary(bool yes, int ret) Parameters yes bool ret int set_title_CallsTheDotNetSystemAdapter() [TestMethod] public void set_title_CallsTheDotNetSystemAdapter() set_unicode_locale_DoesNothing() [TestMethod] public void set_unicode_locale_DoesNothing() start_color_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void start_color_IsRelayedToLibrary(int ret) Parameters ret int subpad_IsRelayedToLibrary(int) [TestMethod] [DataRow(99)] [DataRow(0)] public void subpad_IsRelayedToLibrary(int ret) Parameters ret int syncok_IsRelayedToLibrary(bool, int) [TestMethod] [DataRow(true, 0)] [DataRow(false, -1)] public void syncok_IsRelayedToLibrary(bool yes, int ret) Parameters yes bool ret int term_attrs_IsRelayedToLibrary_1() [TestMethod] public void term_attrs_IsRelayedToLibrary_1() term_attrs_IsRelayedToLibrary_2() [TestMethod] public void term_attrs_IsRelayedToLibrary_2() termname_IsRelayedToLibrary(string) [TestMethod] [DataRow(null)] [DataRow(\"hello\")] public void termname_IsRelayedToLibrary(string ret) Parameters ret string use_default_colors_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void use_default_colors_IsRelayedToLibrary(int ret) Parameters ret int use_env_IsRelayedToLibrary(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void use_env_IsRelayedToLibrary(bool yes) Parameters yes bool wattr_get_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wattr_get_IsRelayedToLibrary(int ret) Parameters ret int wattr_off_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wattr_off_IsRelayedToLibrary(int ret) Parameters ret int wattr_on_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wattr_on_IsRelayedToLibrary(int ret) Parameters ret int wattr_set_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wattr_set_IsRelayedToLibrary(int ret) Parameters ret int wborder_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wborder_IsRelayedToLibrary(int ret) Parameters ret int wchgat_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wchgat_IsRelayedToLibrary(int ret) Parameters ret int wclrtobot_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wclrtobot_IsRelayedToLibrary(int ret) Parameters ret int wclrtoeol_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wclrtoeol_IsRelayedToLibrary(int ret) Parameters ret int wcolor_set_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wcolor_set_IsRelayedToLibrary(int ret) Parameters ret int wdelch_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wdelch_IsRelayedToLibrary(int ret) Parameters ret int werase_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void werase_IsRelayedToLibrary(int ret) Parameters ret int wget_event_ReturnsCharEvent_IfDecodedKeyCodeIsCharIndeed() [TestMethod] public void wget_event_ReturnsCharEvent_IfDecodedKeyCodeIsCharIndeed() wget_event_ReturnsCharEvent_IfKeyCodeTypeIsCharacter() [TestMethod] public void wget_event_ReturnsCharEvent_IfKeyCodeTypeIsCharacter() wget_event_ReturnsKeyEvent_IfKeyCodeTypeIsKey() [TestMethod] public void wget_event_ReturnsKeyEvent_IfKeyCodeTypeIsKey() wget_event_ReturnsMouseEvent_IfKeyCodeTypeIsMouse() [TestMethod] public void wget_event_ReturnsMouseEvent_IfKeyCodeTypeIsMouse() wget_event_ReturnsNullEvent_IfKeyCodeTypeIsUnknown() [TestMethod] public void wget_event_ReturnsNullEvent_IfKeyCodeTypeIsUnknown() wget_event_ReturnsNull_IfKeyCodeTypeIsMouse_AndGetMouseFails() [TestMethod] public void wget_event_ReturnsNull_IfKeyCodeTypeIsMouse_AndGetMouseFails() wget_event_ReturnsResizeEvent_IfKeyCodeTypeIsResize() [TestMethod] public void wget_event_ReturnsResizeEvent_IfKeyCodeTypeIsResize() wget_event_SetsTimeoutAndReadsCharacter() [TestMethod] public void wget_event_SetsTimeoutAndReadsCharacter() wget_wch_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wget_wch_IsRelayedToLibrary(int ret) Parameters ret int whline_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void whline_IsRelayedToLibrary(int ret) Parameters ret int winsdelln_IsRelayedToLibrary(int) [TestMethod] [DataRow('A')] [DataRow(-1)] public void winsdelln_IsRelayedToLibrary(int ret) Parameters ret int wmove_IsRelayedToLibrary(int) [TestMethod] [DataRow('A')] [DataRow(-1)] public void wmove_IsRelayedToLibrary(int ret) Parameters ret int wnoutrefresh_IsRelayedToLibrary(int) [TestMethod] [DataRow('A')] [DataRow(-1)] public void wnoutrefresh_IsRelayedToLibrary(int ret) Parameters ret int wredrawln_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wredrawln_IsRelayedToLibrary(int ret) Parameters ret int wrefresh_IsRelayedToLibrary(int) [TestMethod] [DataRow('A')] [DataRow(-1)] public void wrefresh_IsRelayedToLibrary(int ret) Parameters ret int wresize_IsRelayedToLibrary(int) [TestMethod] [DataRow('A')] [DataRow(-1)] public void wresize_IsRelayedToLibrary(int ret) Parameters ret int wscrl_IsRelayedToLibrary(int) [TestMethod] [DataRow('A')] [DataRow(-1)] public void wscrl_IsRelayedToLibrary(int ret) Parameters ret int wtimeout_IsRelayedToLibrary() [TestMethod] public void wtimeout_IsRelayedToLibrary() wtouchln_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wtouchln_IsRelayedToLibrary(int ret) Parameters ret int wvline_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wvline_IsRelayedToLibrary(int ret) Parameters ret int"
  },
  "api/Sharpie.Tests.CanvasTests.html": {
    "href": "api/Sharpie.Tests.CanvasTests.html",
    "title": "Class CanvasTests | sharpie",
    "summary": "Class CanvasTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class CanvasTests Inheritance object CanvasTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Box_DoesNothing_WhenOutsideArea() [TestMethod] public void Box_DoesNothing_WhenOutsideArea() Box_DrawsBox_When1X2() [TestMethod] public void Box_DrawsBox_When1X2() Box_DrawsBox_When2X1() [TestMethod] public void Box_DrawsBox_When2X1() Box_DrawsBox_When2X2() [TestMethod] public void Box_DrawsBox_When2X2() Box_DrawsBox_When3X3() [TestMethod] public void Box_DrawsBox_When3X3() Box_DrawsCross_When1X1() [TestMethod] public void Box_DrawsCross_When1X1() Ctor_InitializesTheSize() [TestMethod] public void Ctor_InitializesTheSize() Ctor_Throws_IfSizeIsInvalid(int, int) [TestMethod] [DataRow(0, 1)] [DataRow(1, 0)] public void Ctor_Throws_IfSizeIsInvalid(int width, int height) Parameters width int height int DrawCell_DoesNothing_IfOutside() [TestMethod] public void DrawCell_DoesNothing_IfOutside() DrawCell_DrawsGlyph() [TestMethod] public void DrawCell_DrawsGlyph() DrawOnto_DoesNothing_IfAreaOutside() [TestMethod] public void DrawOnto_DoesNothing_IfAreaOutside() DrawOnto_DoesNothing_IfAreaOutsideDestination() [TestMethod] public void DrawOnto_DoesNothing_IfAreaOutsideDestination() DrawOnto_DrawsTheAdjustedArea() [TestMethod] public void DrawOnto_DrawsTheAdjustedArea() DrawOnto_SkipsEmptyCells() [TestMethod] public void DrawOnto_SkipsEmptyCells() DrawOnto_Throws_IfTheDestinationINull() [TestMethod] public void DrawOnto_Throws_IfTheDestinationINull() Fill1_FillsArea() [TestMethod] public void Fill1_FillsArea() Fill1_FillsNothing_IfAreaIsEmpty() [TestMethod] public void Fill1_FillsNothing_IfAreaIsEmpty() Fill2_FillsArea() [TestMethod] public void Fill2_FillsArea() Fill2_Throws_IfShadeIsInvalid() [TestMethod] public void Fill2_Throws_IfShadeIsInvalid() Glyph1_DoesNothing_IfOutside() [TestMethod] public void Glyph1_DoesNothing_IfOutside() Glyph1_DrawsGlyph() [TestMethod] public void Glyph1_DrawsGlyph() Glyph1_ReplacesSpecialChars_WithWhitespace() [TestMethod] public void Glyph1_ReplacesSpecialChars_WithWhitespace() Glyph2_DrawsGlyph() [TestMethod] public void Glyph2_DrawsGlyph() Glyph2_Throws_IfStyleIsInvalid() [TestMethod] public void Glyph2_Throws_IfStyleIsInvalid() Glyph3_DrawsGlyph() [TestMethod] public void Glyph3_DrawsGlyph() Glyph3_Throws_IfStyleIsInvalid() [TestMethod] public void Glyph3_Throws_IfStyleIsInvalid() Glyph4_DrawsGlyph() [TestMethod] public void Glyph4_DrawsGlyph() Glyph4_Throws_IfFillIsInvalid(int) [TestMethod] [DataRow(-1)] [DataRow(9)] public void Glyph4_Throws_IfFillIsInvalid(int fill) Parameters fill int Line1_CombinesLineRunes() [TestMethod] public void Line1_CombinesLineRunes() Line1_DoesNotDraw_IfLengthNotHalf() [TestMethod] public void Line1_DoesNotDraw_IfLengthNotHalf() Line1_DoesNothing_IfLengthLessThanZero() [TestMethod] public void Line1_DoesNothing_IfLengthLessThanZero() Line1_DoesNothing_IfXPlusLengthIsLessThanZero() [TestMethod] public void Line1_DoesNothing_IfXPlusLengthIsLessThanZero() Line1_DoesNothing_IfYPlusLengthIsLessThanZero() [TestMethod] public void Line1_DoesNothing_IfYPlusLengthIsLessThanZero() Line1_DrawsFullLine1_Horizontal(LineStyle, char) [TestMethod] [DataRow(Canvas.LineStyle.Light, '─')] [DataRow(Canvas.LineStyle.Heavy, '━')] [DataRow(Canvas.LineStyle.LightDashed, '┄')] [DataRow(Canvas.LineStyle.HeavyDashed, '┅')] [DataRow(Canvas.LineStyle.Double, '═')] public void Line1_DrawsFullLine1_Horizontal(Canvas.LineStyle style, char exp) Parameters style Canvas.LineStyle exp char Line1_DrawsFullLine1_Vertical(LineStyle, char) [TestMethod] [DataRow(Canvas.LineStyle.Light, '│')] [DataRow(Canvas.LineStyle.Heavy, '┃')] [DataRow(Canvas.LineStyle.LightDashed, '┆')] [DataRow(Canvas.LineStyle.HeavyDashed, '┇')] [DataRow(Canvas.LineStyle.Double, '║')] public void Line1_DrawsFullLine1_Vertical(Canvas.LineStyle style, char exp) Parameters style Canvas.LineStyle exp char Line1_DrawsHalfLine1_Horizontal_AtEnd(float) [TestMethod] [DataRow(0)] [DataRow(0.5)] [DataRow(0.9)] public void Line1_DrawsHalfLine1_Horizontal_AtEnd(float y) Parameters y float Line1_DrawsHalfLine1_Horizontal_AtStart(float) [TestMethod] [DataRow(0)] [DataRow(0.5)] [DataRow(0.9)] public void Line1_DrawsHalfLine1_Horizontal_AtStart(float y) Parameters y float Line1_DrawsHalfLine1_Vertical_AtEnd(float) [TestMethod] [DataRow(0)] [DataRow(0.5)] [DataRow(0.9)] public void Line1_DrawsHalfLine1_Vertical_AtEnd(float x) Parameters x float Line1_DrawsHalfLine1_Vertical_AtStart(float) [TestMethod] [DataRow(0)] [DataRow(0.5)] [DataRow(0.9)] public void Line1_DrawsHalfLine1_Vertical_AtStart(float x) Parameters x float Line1_ExitsNegative_OnX() [TestMethod] public void Line1_ExitsNegative_OnX() Line1_ExitsNegative_OnY() [TestMethod] public void Line1_ExitsNegative_OnY() Line1_StopsAtHeight() [TestMethod] public void Line1_StopsAtHeight() Line1_StopsAtWidth() [TestMethod] public void Line1_StopsAtWidth() Line1_Throws_IfStyleIsInvalid(Orientation) [TestMethod] [DataRow(Canvas.Orientation.Horizontal)] [DataRow(Canvas.Orientation.Vertical)] public void Line1_Throws_IfStyleIsInvalid(Canvas.Orientation orientation) Parameters orientation Canvas.Orientation Line2_DrawsLine() [TestMethod] public void Line2_DrawsLine() Point_CombinesPoints() [TestMethod] public void Point_CombinesPoints() Point_DoesNothing_IfOutside() [TestMethod] public void Point_DoesNothing_IfOutside() Point_DrawsSinglePoint(float, float, char) [TestMethod] [DataRow(0.4, 0.4, '▘')] [DataRow(0.5, 0.4, '▝')] [DataRow(0.4, 0.5, '▖')] [DataRow(0.5, 0.5, '▗')] public void Point_DrawsSinglePoint(float x, float y, char c) Parameters x float y float c char Rectangle_DoesNothing_IfAreaOutside() [TestMethod] public void Rectangle_DoesNothing_IfAreaOutside() Rectangle_DrawsRectangle() [TestMethod] public void Rectangle_DrawsRectangle() TestInitialize() [TestInitialize] public void TestInitialize() Text_DoesNothingIfTextIsEmpty() [TestMethod] public void Text_DoesNothingIfTextIsEmpty() Text_DrawsEmoji() [TestMethod] public void Text_DrawsEmoji() Text_TextThatFits_Horizontal() [TestMethod] public void Text_TextThatFits_Horizontal() Text_TextThatFits_Vertical() [TestMethod] public void Text_TextThatFits_Vertical() Text_Throws_IfTextIsNull() [TestMethod] public void Text_Throws_IfTextIsNull()"
  },
  "api/Sharpie.Tests.ColorManagerTests.html": {
    "href": "api/Sharpie.Tests.ColorManagerTests.html",
    "title": "Class ColorManagerTests | sharpie",
    "summary": "Class ColorManagerTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class ColorManagerTests Inheritance object ColorManagerTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BreakdownColor1_ReturnsColors_IfCursesSucceeds() [TestMethod] public void BreakdownColor1_ReturnsColors_IfCursesSucceeds() BreakdownColor1_Throws_IfCursesFails() [TestMethod] public void BreakdownColor1_Throws_IfCursesFails() BreakdownColor1_Throws_IfRedefineColorsNotSupported() [TestMethod] public void BreakdownColor1_Throws_IfRedefineColorsNotSupported() BreakdownColor2_AlsoCallsCurses() [TestMethod] public void BreakdownColor2_AlsoCallsCurses() CanRedefineColors_ReturnsCursesResponse(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void CanRedefineColors_ReturnsCursesResponse(bool value) Parameters value bool Ctor_SetsColorModeToDisabled_IfCursesDeclaresThemUnsupported() [TestMethod] public void Ctor_SetsColorModeToDisabled_IfCursesDeclaresThemUnsupported() Ctor_SetsColorModeToDisabled_IfFailedToStartColors() [TestMethod] public void Ctor_SetsColorModeToDisabled_IfFailedToStartColors() Ctor_SetsColorModeToDisabled_IfFailedToUseStandard() [TestMethod] public void Ctor_SetsColorModeToDisabled_IfFailedToUseStandard() Ctor_SetsColorModeToExtended_IfFullySupported() [TestMethod] public void Ctor_SetsColorModeToExtended_IfFullySupported() Ctor_SetsColorModeToStandard_IfFailedToUseUpper() [TestMethod] public void Ctor_SetsColorModeToStandard_IfFailedToUseUpper() Ctor_Throws_IfCursesIsNull() [TestMethod] public void Ctor_Throws_IfCursesIsNull() MixColors1_PassesDefaultColorsUnAltered_IfNotIgnorant() [TestMethod] public void MixColors1_PassesDefaultColorsUnAltered_IfNotIgnorant() MixColors1_ReturnsColorMixtureAndIncrementsTheHandle_IfCursesSucceeds() [TestMethod] public void MixColors1_ReturnsColorMixtureAndIncrementsTheHandle_IfCursesSucceeds() MixColors1_SubstitutesDefaultColors_InIgnorantMode() [TestMethod] public void MixColors1_SubstitutesDefaultColors_InIgnorantMode() MixColors1_SubstitutesDefaultColors_InStandardMode() [TestMethod] public void MixColors1_SubstitutesDefaultColors_InStandardMode() MixColors1_ThrowsAndDoesNotIncrementHandle_IfCursesFails() [TestMethod] public void MixColors1_ThrowsAndDoesNotIncrementHandle_IfCursesFails() MixColors1_Throws_IfColorModeIsDisabled() [TestMethod] public void MixColors1_Throws_IfColorModeIsDisabled() MixColors2_CallsCursesAsWell() [TestMethod] public void MixColors2_CallsCursesAsWell() ReMixColors1_FinishesOK_IfCursesSucceeds() [TestMethod] public void ReMixColors1_FinishesOK_IfCursesSucceeds() ReMixColors1_PassesDefaultColorsUnAltered_IfNotIgnorant() [TestMethod] public void ReMixColors1_PassesDefaultColorsUnAltered_IfNotIgnorant() ReMixColors1_SubstitutesDefaultColors_InIgnorantMode() [TestMethod] public void ReMixColors1_SubstitutesDefaultColors_InIgnorantMode() ReMixColors1_SubstitutesDefaultColors_InStandardMode() [TestMethod] public void ReMixColors1_SubstitutesDefaultColors_InStandardMode() ReMixColors1_ThrowsAndDoesNotIncrementHandle_IfCursesFails() [TestMethod] public void ReMixColors1_ThrowsAndDoesNotIncrementHandle_IfCursesFails() ReMixColors1_Throws_IfColorModeIsDisabled() [TestMethod] public void ReMixColors1_Throws_IfColorModeIsDisabled() RedefineColor1_Succeeds_IfCursesSucceeds() [TestMethod] public void RedefineColor1_Succeeds_IfCursesSucceeds() RedefineColor1_Throws_IfCursesFails() [TestMethod] public void RedefineColor1_Throws_IfCursesFails() RedefineColor1_Throws_IfRedefineColorsNotSupported() [TestMethod] public void RedefineColor1_Throws_IfRedefineColorsNotSupported() RedefineColor1_UsesMaximumOf1000_IfColorsExceedThat() [TestMethod] public void RedefineColor1_UsesMaximumOf1000_IfColorsExceedThat() RedefineColor2_AlsoCallsCurses() [TestMethod] public void RedefineColor2_AlsoCallsCurses() RemixColors2_CallsCursesAsWell() [TestMethod] public void RemixColors2_CallsCursesAsWell() RemixDefaultColors1_FinishesOK_IfCursesSucceeds() [TestMethod] public void RemixDefaultColors1_FinishesOK_IfCursesSucceeds() RemixDefaultColors1_PassesDefaultColorsUnAltered_IfNotIgnorant() [TestMethod] public void RemixDefaultColors1_PassesDefaultColorsUnAltered_IfNotIgnorant() RemixDefaultColors1_SubstitutesDefaultColors_InIgnorantMode() [TestMethod] public void RemixDefaultColors1_SubstitutesDefaultColors_InIgnorantMode() RemixDefaultColors1_SubstitutesDefaultColors_InStandardMode() [TestMethod] public void RemixDefaultColors1_SubstitutesDefaultColors_InStandardMode() RemixDefaultColors1_ThrowsAndDoesNotIncrementHandle_IfCursesFails() [TestMethod] public void RemixDefaultColors1_ThrowsAndDoesNotIncrementHandle_IfCursesFails() RemixDefaultColors1_Throws_IfColorModeIsDisabled() [TestMethod] public void RemixDefaultColors1_Throws_IfColorModeIsDisabled() RemixDefaultColors2_CallsCursesAsWell() [TestMethod] public void RemixDefaultColors2_CallsCursesAsWell() Terminal_IsInitialized() [TestMethod] public void Terminal_IsInitialized() TestCleanup() [TestCleanup] public void TestCleanup() TestInitialize() [TestInitialize] public void TestInitialize() UnMixColors_ReturnsColors_IfCursesSucceeds() [TestMethod] public void UnMixColors_ReturnsColors_IfCursesSucceeds() UnMixColors_Throws_IfCursesFails() [TestMethod] public void UnMixColors_Throws_IfCursesFails()"
  },
  "api/Sharpie.Tests.ColorMixtureTests.html": {
    "href": "api/Sharpie.Tests.ColorMixtureTests.html",
    "title": "Class ColorMixtureTests | sharpie",
    "summary": "Class ColorMixtureTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class ColorMixtureTests Inheritance object ColorMixtureTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_StoresTheHandle() [TestMethod] public void Ctor_StoresTheHandle() Default_HasCorrectHandle() [TestMethod] public void Default_HasCorrectHandle() EqualOperator_ReturnsFalse_IfDifferentHandle() [TestMethod] public void EqualOperator_ReturnsFalse_IfDifferentHandle() EqualOperator_ReturnsTrue_IfSameHandle() [TestMethod] public void EqualOperator_ReturnsTrue_IfSameHandle() Equals_ReturnsFalse_IfDifferentHandle() [TestMethod] public void Equals_ReturnsFalse_IfDifferentHandle() Equals_ReturnsFalse_IfNotColorMixture(object?) [TestMethod] [DataRow(null)] [DataRow(\"\")] public void Equals_ReturnsFalse_IfNotColorMixture(object? b) Parameters b object Equals_ReturnsTrue_IfSameHandle() [TestMethod] public void Equals_ReturnsTrue_IfSameHandle() GetHashCode_IsTDifferent_ForDifferentHandles() [TestMethod] public void GetHashCode_IsTDifferent_ForDifferentHandles() GetHashCode_IsTheSame_ForSameHandles() [TestMethod] public void GetHashCode_IsTheSame_ForSameHandles() NotEqualOperator_ReturnsFalse_IfSameHandle() [TestMethod] public void NotEqualOperator_ReturnsFalse_IfSameHandle() NotEqualOperator_ReturnsTrue_IfDifferentHandle() [TestMethod] public void NotEqualOperator_ReturnsTrue_IfDifferentHandle() ToString_ProperlyFormats() [TestMethod] public void ToString_ProperlyFormats()"
  },
  "api/Sharpie.Tests.ComplexCharTests.html": {
    "href": "api/Sharpie.Tests.ComplexCharTests.html",
    "title": "Class ComplexCharTests | sharpie",
    "summary": "Class ComplexCharTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class ComplexCharTests Inheritance object ComplexCharTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_StoresTheRawValue() [TestMethod] public void Ctor_StoresTheRawValue() EqualOperator_ReturnsFalse_IfDifferentRaw() [TestMethod] public void EqualOperator_ReturnsFalse_IfDifferentRaw() EqualOperator_ReturnsTrue_IfSameRaw() [TestMethod] public void EqualOperator_ReturnsTrue_IfSameRaw() Equals_ReturnsFalse_IfDifferentRaw() [TestMethod] public void Equals_ReturnsFalse_IfDifferentRaw() Equals_ReturnsFalse_IfNotComplexChar(object?) [TestMethod] [DataRow(null)] [DataRow(\"\")] public void Equals_ReturnsFalse_IfNotComplexChar(object? b) Parameters b object Equals_ReturnsTrue_IfSameRaw() [TestMethod] public void Equals_ReturnsTrue_IfSameRaw() GetHashCode_IsDifferent_ForDifferentRaws() [TestMethod] public void GetHashCode_IsDifferent_ForDifferentRaws() GetHashCode_IsTheSame_ForSameRaws() [TestMethod] public void GetHashCode_IsTheSame_ForSameRaws() GetHashCode_IsZero_ForNullRaw() [TestMethod] public void GetHashCode_IsZero_ForNullRaw() NotEqualOperator_ReturnsFalse_IfSameRaw() [TestMethod] public void NotEqualOperator_ReturnsFalse_IfSameRaw() NotEqualOperator_ReturnsTrue_IfDifferentRaw() [TestMethod] public void NotEqualOperator_ReturnsTrue_IfDifferentRaw() ToString_ProperlyFormats_UsingPayload() [TestMethod] public void ToString_ProperlyFormats_UsingPayload()"
  },
  "api/Sharpie.Tests.CursesBackendFlavorSelectorTests.html": {
    "href": "api/Sharpie.Tests.CursesBackendFlavorSelectorTests.html",
    "title": "Class CursesBackendFlavorSelectorTests | sharpie",
    "summary": "Class CursesBackendFlavorSelectorTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class CursesBackendFlavorSelectorTests Inheritance object CursesBackendFlavorSelectorTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TestContext [UsedImplicitly] public TestContext TestContext { get; set; } Property Value TestContext Methods GetLibraryPaths_WhenFreeBsd_ReturnsExpectedPaths() [TestMethod] public void GetLibraryPaths_WhenFreeBsd_ReturnsExpectedPaths() GetLibraryPaths_WhenLinux_ReturnsExpectedPaths() [TestMethod] public void GetLibraryPaths_WhenLinux_ReturnsExpectedPaths() GetLibraryPaths_WhenMacOs_ForNCurses_ScansTheCellarDirectories_IfNoHomeBrewFound() [TestMethod] public void GetLibraryPaths_WhenMacOs_ForNCurses_ScansTheCellarDirectories_IfNoHomeBrewFound() GetLibraryPaths_WhenMacOs_ForNCurses_ScansTheLibraryDirectory_IfNoHomeBrewFound() [TestMethod] public void GetLibraryPaths_WhenMacOs_ForNCurses_ScansTheLibraryDirectory_IfNoHomeBrewFound() GetLibraryPaths_WhenMacOs_ForNCurses_TriesToLoadDefault_IfNoHomeBrewFound() [TestMethod] public void GetLibraryPaths_WhenMacOs_ForNCurses_TriesToLoadDefault_IfNoHomeBrewFound() GetLibraryPaths_WhenMacOs_ReturnsExpectedPaths() [TestMethod] public void GetLibraryPaths_WhenMacOs_ReturnsExpectedPaths() GetLibraryPaths_WhenUnknownOs_Throws() [TestMethod] public void GetLibraryPaths_WhenUnknownOs_Throws() GetLibraryPaths_WhenWindows_ReturnsExpectedPaths() [TestMethod] public void GetLibraryPaths_WhenWindows_ReturnsExpectedPaths() TestInitialize() [TestInitialize] public void TestInitialize()"
  },
  "api/Sharpie.Tests.CursesBackendTests.html": {
    "href": "api/Sharpie.Tests.CursesBackendTests.html",
    "title": "Class CursesBackendTests | sharpie",
    "summary": "Class CursesBackendTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class CursesBackendTests Inheritance object CursesBackendTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TestContext [UsedImplicitly] public TestContext TestContext { get; set; } Property Value TestContext Methods Load1_Throws_WhenUnknownOs() [TestMethod] public void Load1_Throws_WhenUnknownOs() Load1_WhenFreeBsd_ReturnsValidBackend() [TestMethod] public void Load1_WhenFreeBsd_ReturnsValidBackend() Load1_WhenLinux_Fails_IfNoFlavor() [TestMethod] public void Load1_WhenLinux_Fails_IfNoFlavor() Load1_WhenLinux_Fails_IfNoFlavorCouldBeLoaded() [TestMethod] public void Load1_WhenLinux_Fails_IfNoFlavorCouldBeLoaded() Load1_WhenLinux_ReturnsValidBackend() [TestMethod] public void Load1_WhenLinux_ReturnsValidBackend() Load1_WhenMacOs_ReturnsValidBackend() [TestMethod] public void Load1_WhenMacOs_ReturnsValidBackend() Load1_WhenWindows_ReturnsValidBackend() [TestMethod] public void Load1_WhenWindows_ReturnsValidBackend() Load2_Throws_WhenFlavorsIsNull() [TestMethod] public void Load2_Throws_WhenFlavorsIsNull() Load3_Throws_WhenOtherPathsIsNull() [TestMethod] public void Load3_Throws_WhenOtherPathsIsNull() Load3_Throws_WhenPathIsNull() [TestMethod] public void Load3_Throws_WhenPathIsNull() Load3_TriesToLoadGivenPaths() [TestMethod] public void Load3_TriesToLoadGivenPaths() Load3_WhenLinux_StopsAtFirstGoodLoad() [TestMethod] public void Load3_WhenLinux_StopsAtFirstGoodLoad() TestInitialize() [TestInitialize] public void TestInitialize() TryLoad_ReturnsAppropriateBackEnd(CursesBackendType) [TestMethod] [DataRow(CursesBackendType.NCurses)] [DataRow(CursesBackendType.PdCurses)] [DataRow(CursesBackendType.PdCursesMod)] public void TryLoad_ReturnsAppropriateBackEnd(CursesBackendType type) Parameters type CursesBackendType TryLoad_ReturnsNull_IfFailedToLoadType() [TestMethod] public void TryLoad_ReturnsNull_IfFailedToLoadType() TryLoad_ReturnsNull_IfNoPathSupplied() [TestMethod] public void TryLoad_ReturnsNull_IfNoPathSupplied() TryLoad_ReturnsNull_IfTypeIsInvalid() [TestMethod] public void TryLoad_ReturnsNull_IfTypeIsInvalid() TryLoad_WhenUnix_ReturnsAppropriateBackEnd(CursesBackendType) [TestMethod] [DataRow(CursesBackendType.NCurses)] [DataRow(CursesBackendType.PdCurses)] [DataRow(CursesBackendType.PdCursesMod)] public void TryLoad_WhenUnix_ReturnsAppropriateBackEnd(CursesBackendType type) Parameters type CursesBackendType TryLoad_WhenUnix_ReturnsBackend_IfFailedToLoadLibC() [TestMethod] public void TryLoad_WhenUnix_ReturnsBackend_IfFailedToLoadLibC()"
  },
  "api/Sharpie.Tests.CursesExceptionTests.html": {
    "href": "api/Sharpie.Tests.CursesExceptionTests.html",
    "title": "Class CursesExceptionTests | sharpie",
    "summary": "Class CursesExceptionTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class CursesExceptionTests Inheritance object CursesExceptionTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_StoresTheMessage() [TestMethod] public void Ctor_StoresTheMessage() Ctor_ThrowsException_IfMessageIsNull() [TestMethod] public void Ctor_ThrowsException_IfMessageIsNull()"
  },
  "api/Sharpie.Tests.CursesInitializationExceptionTests.html": {
    "href": "api/Sharpie.Tests.CursesInitializationExceptionTests.html",
    "title": "Class CursesInitializationExceptionTests | sharpie",
    "summary": "Class CursesInitializationExceptionTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class CursesInitializationExceptionTests Inheritance object CursesInitializationExceptionTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HasTheCorrectMessage() [TestMethod] public void HasTheCorrectMessage()"
  },
  "api/Sharpie.Tests.CursesMouseEventParserTests.html": {
    "href": "api/Sharpie.Tests.CursesMouseEventParserTests.html",
    "title": "Class CursesMouseEventParserTests | sharpie",
    "summary": "Class CursesMouseEventParserTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class CursesMouseEventParserTests Inheritance object CursesMouseEventParserTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Get_ReturnsAbi1_ForUnknownAbi() [TestMethod] public void Get_ReturnsAbi1_ForUnknownAbi() Get_ReturnsObject_ForAbi1() [TestMethod] public void Get_ReturnsObject_ForAbi1() Get_ReturnsObject_ForAbi2() [TestMethod] public void Get_ReturnsObject_ForAbi2() Parse_ParsesTheButtonAndState_ForAbi1(uint, MouseButton, MouseButtonState) [TestMethod] [DataRow(1, MouseButton.Button1, MouseButtonState.Released)] [DataRow(2, MouseButton.Button1, MouseButtonState.Pressed)] [DataRow(4, MouseButton.Button1, MouseButtonState.Clicked)] [DataRow(8, MouseButton.Button1, MouseButtonState.DoubleClicked)] [DataRow(16, MouseButton.Button1, MouseButtonState.TripleClicked)] [DataRow(64, MouseButton.Button2, MouseButtonState.Released)] [DataRow(128, MouseButton.Button2, MouseButtonState.Pressed)] [DataRow(256, MouseButton.Button2, MouseButtonState.Clicked)] [DataRow(512, MouseButton.Button2, MouseButtonState.DoubleClicked)] [DataRow(1024, MouseButton.Button2, MouseButtonState.TripleClicked)] [DataRow(4096, MouseButton.Button3, MouseButtonState.Released)] [DataRow(8192, MouseButton.Button3, MouseButtonState.Pressed)] [DataRow(16384, MouseButton.Button3, MouseButtonState.Clicked)] [DataRow(32768, MouseButton.Button3, MouseButtonState.DoubleClicked)] [DataRow(65536, MouseButton.Button3, MouseButtonState.TripleClicked)] [DataRow(262144, MouseButton.Button4, MouseButtonState.Released)] [DataRow(524288, MouseButton.Button4, MouseButtonState.Pressed)] [DataRow(1048576, MouseButton.Button4, MouseButtonState.Clicked)] [DataRow(2097152, MouseButton.Button4, MouseButtonState.DoubleClicked)] [DataRow(4194304, MouseButton.Button4, MouseButtonState.TripleClicked)] public void Parse_ParsesTheButtonAndState_ForAbi1(uint raw, MouseButton expButton, MouseButtonState expState) Parameters raw uint expButton MouseButton expState MouseButtonState Parse_ParsesTheButtonAndState_ForAbi2(uint, MouseButton, MouseButtonState) [TestMethod] [DataRow(1, MouseButton.Button1, MouseButtonState.Released)] [DataRow(2, MouseButton.Button1, MouseButtonState.Pressed)] [DataRow(4, MouseButton.Button1, MouseButtonState.Clicked)] [DataRow(8, MouseButton.Button1, MouseButtonState.DoubleClicked)] [DataRow(16, MouseButton.Button1, MouseButtonState.TripleClicked)] [DataRow(32, MouseButton.Button2, MouseButtonState.Released)] [DataRow(64, MouseButton.Button2, MouseButtonState.Pressed)] [DataRow(128, MouseButton.Button2, MouseButtonState.Clicked)] [DataRow(256, MouseButton.Button2, MouseButtonState.DoubleClicked)] [DataRow(512, MouseButton.Button2, MouseButtonState.TripleClicked)] [DataRow(1024, MouseButton.Button3, MouseButtonState.Released)] [DataRow(2048, MouseButton.Button3, MouseButtonState.Pressed)] [DataRow(4096, MouseButton.Button3, MouseButtonState.Clicked)] [DataRow(8192, MouseButton.Button3, MouseButtonState.DoubleClicked)] [DataRow(16384, MouseButton.Button3, MouseButtonState.TripleClicked)] [DataRow(32768, MouseButton.Button4, MouseButtonState.Released)] [DataRow(65536, MouseButton.Button4, MouseButtonState.Pressed)] [DataRow(131072, MouseButton.Button4, MouseButtonState.Clicked)] [DataRow(262144, MouseButton.Button4, MouseButtonState.DoubleClicked)] [DataRow(524288, MouseButton.Button4, MouseButtonState.TripleClicked)] [DataRow(1048576, MouseButton.Button5, MouseButtonState.Released)] [DataRow(2097152, MouseButton.Button5, MouseButtonState.Pressed)] [DataRow(4194304, MouseButton.Button5, MouseButtonState.Clicked)] [DataRow(8388608, MouseButton.Button5, MouseButtonState.DoubleClicked)] [DataRow(16777216, MouseButton.Button5, MouseButtonState.TripleClicked)] public void Parse_ParsesTheButtonAndState_ForAbi2(uint raw, MouseButton expButton, MouseButtonState expState) Parameters raw uint expButton MouseButton expState MouseButtonState Parse_ParsesTheModifiers_ForAbi1(uint, ModifierKey) [TestMethod] [DataRow(0, ModifierKey.None)] [DataRow(16777216, ModifierKey.Ctrl)] [DataRow(33554432, ModifierKey.Shift)] [DataRow(67108864, ModifierKey.Alt)] [DataRow(83886080, ModifierKey.Alt|ModifierKey.Ctrl)] [DataRow(50331648, ModifierKey.Shift|ModifierKey.Ctrl)] [DataRow(100663296, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(50331648, ModifierKey.Shift|ModifierKey.Ctrl)] [DataRow(117440512, ModifierKey.Shift|ModifierKey.Alt|ModifierKey.Ctrl)] public void Parse_ParsesTheModifiers_ForAbi1(uint raw, ModifierKey expMod) Parameters raw uint expMod ModifierKey Parse_ParsesTheModifiers_ForAbi2(uint, ModifierKey) [TestMethod] [DataRow(0, ModifierKey.None)] [DataRow(33554432, ModifierKey.Ctrl)] [DataRow(67108864, ModifierKey.Shift)] [DataRow(134217728, ModifierKey.Alt)] [DataRow(167772160, ModifierKey.Alt|ModifierKey.Ctrl)] [DataRow(100663296, ModifierKey.Shift|ModifierKey.Ctrl)] [DataRow(201326592, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(100663296, ModifierKey.Shift|ModifierKey.Ctrl)] [DataRow(234881024, ModifierKey.Shift|ModifierKey.Alt|ModifierKey.Ctrl)] public void Parse_ParsesTheModifiers_ForAbi2(uint raw, ModifierKey expMod) Parameters raw uint expMod ModifierKey Parse_ReturnsNullIfNoButtonPresent_ForAbi1(uint) [TestMethod] [DataRow(0)] [DataRow(134217728)] [DataRow(16777216)] public void Parse_ReturnsNullIfNoButtonPresent_ForAbi1(uint raw) Parameters raw uint Parse_ReturnsNullIfNoButtonPresent_ForAbi2(uint) [TestMethod] [DataRow(0)] [DataRow(268435456)] [DataRow(33554432)] public void Parse_ReturnsNullIfNoButtonPresent_ForAbi2(uint raw) Parameters raw uint"
  },
  "api/Sharpie.Tests.CursesMouseStateTests.html": {
    "href": "api/Sharpie.Tests.CursesMouseStateTests.html",
    "title": "Class CursesMouseStateTests | sharpie",
    "summary": "Class CursesMouseStateTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class CursesMouseStateTests Inheritance object CursesMouseStateTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToString_ProperlyFormats() [TestMethod] public void ToString_ProperlyFormats()"
  },
  "api/Sharpie.Tests.CursesOperationExceptionTests.html": {
    "href": "api/Sharpie.Tests.CursesOperationExceptionTests.html",
    "title": "Class CursesOperationExceptionTests | sharpie",
    "summary": "Class CursesOperationExceptionTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class CursesOperationExceptionTests Inheritance object CursesOperationExceptionTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_StoresTheMessage() [TestMethod] public void Ctor_StoresTheMessage() Ctor_StoresTheOperation() [TestMethod] public void Ctor_StoresTheOperation() Ctor_ThrowsException_IfMessageIsNull() [TestMethod] public void Ctor_ThrowsException_IfMessageIsNull() Ctor_ThrowsException_IfOperationIsNull() [TestMethod] public void Ctor_ThrowsException_IfOperationIsNull()"
  },
  "api/Sharpie.Tests.CursesSynchronizationExceptionTests.html": {
    "href": "api/Sharpie.Tests.CursesSynchronizationExceptionTests.html",
    "title": "Class CursesSynchronizationExceptionTests | sharpie",
    "summary": "Class CursesSynchronizationExceptionTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class CursesSynchronizationExceptionTests Inheritance object CursesSynchronizationExceptionTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HasTheCorrectMessage() [TestMethod] public void HasTheCorrectMessage()"
  },
  "api/Sharpie.Tests.DelegateEventTests.html": {
    "href": "api/Sharpie.Tests.DelegateEventTests.html",
    "title": "Class DelegateEventTests | sharpie",
    "summary": "Class DelegateEventTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class DelegateEventTests Inheritance object DelegateEventTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_InitializesPropertiesCorrectly() [TestMethod] public void Ctor_InitializesPropertiesCorrectly() Ctor_Throws_IfObjectIsNull() [TestMethod] public void Ctor_Throws_IfObjectIsNull() Equals_ReturnsFalse_IfNotSameType(object?) [TestMethod] [DataRow(null)] [DataRow(\"\")] public void Equals_ReturnsFalse_IfNotSameType(object? b) Parameters b object Equals_ReturnsFalse_IfObjectDifferent() [TestMethod] public void Equals_ReturnsFalse_IfObjectDifferent() Equals_ReturnsTrue_IfObjectEquals() [TestMethod] public void Equals_ReturnsTrue_IfObjectEquals() GetHashCode_IsDifferent_IfObjectDifferent() [TestMethod] public void GetHashCode_IsDifferent_IfObjectDifferent() GetHashCode_IsEqual_IfObjectSame() [TestMethod] public void GetHashCode_IsEqual_IfObjectSame() ToString_ProperlyFormats() [TestMethod] public void ToString_ProperlyFormats()"
  },
  "api/Sharpie.Tests.DosCp866AsciiFontTests.html": {
    "href": "api/Sharpie.Tests.DosCp866AsciiFontTests.html",
    "title": "Class DosCp866AsciiFontTests | sharpie",
    "summary": "Class DosCp866AsciiFontTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class DosCp866AsciiFontTests Inheritance object DosCp866AsciiFontTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Baseline_ReturnsTheExpectedValue() [TestMethod] public void Baseline_ReturnsTheExpectedValue() FullWidth_ReturnsAnInstance() [TestMethod] public void FullWidth_ReturnsAnInstance() GetGlyphs_ReturnsTheExpectedGlyphsIncludingDefault() [TestMethod] public void GetGlyphs_ReturnsTheExpectedGlyphsIncludingDefault() GetGlyphs_Throws_IfSpanIsEmpty() [TestMethod] public void GetGlyphs_Throws_IfSpanIsEmpty() HasGlyph_ChecksIfGlyphInRange(int, bool) [TestMethod] [DataRow(0, true)] [DataRow(255, true)] [DataRow(256, false)] public void HasGlyph_ChecksIfGlyphInRange(int c, bool t) Parameters c int t bool Height_ReturnsTheExpectedValue() [TestMethod] public void Height_ReturnsTheExpectedValue() Layout_ReturnsTheExpectedValue() [TestMethod] public void Layout_ReturnsTheExpectedValue() Name_ReturnsTheExpectedValue() [TestMethod] public void Name_ReturnsTheExpectedValue()"
  },
  "api/Sharpie.Tests.DotNetSystemAdapterInterfaceTests.html": {
    "href": "api/Sharpie.Tests.DotNetSystemAdapterInterfaceTests.html",
    "title": "Class DotNetSystemAdapterInterfaceTests | sharpie",
    "summary": "Class DotNetSystemAdapterInterfaceTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class DotNetSystemAdapterInterfaceTests Inheritance object DotNetSystemAdapterInterfaceTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Instance_IsNotNull() [TestMethod] public void Instance_IsNotNull()"
  },
  "api/Sharpie.Tests.EventPumpTests.html": {
    "href": "api/Sharpie.Tests.EventPumpTests.html",
    "title": "Class EventPumpTests | sharpie",
    "summary": "Class EventPumpTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class EventPumpTests Inheritance object EventPumpTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TestContext [UsedImplicitly] public TestContext TestContext { get; set; } Property Value TestContext Methods Ctor_Throws_IfTerminalIsNull() [TestMethod] public void Ctor_Throws_IfTerminalIsNull() Delegate_EnqueuesObjectForProcessing() [TestMethod] [Timeout(10000)] public void Delegate_EnqueuesObjectForProcessing() Delegate_Throws_IfObjectIsNull() [TestMethod] public void Delegate_Throws_IfObjectIsNull() Listen1_AsksCursesForEvent_AfterEmittingStart() [TestMethod] [Timeout(10000)] public void Listen1_AsksCursesForEvent_AfterEmittingStart() Listen1_AsksCursesToUpdateTerminal_WhenNoEventReceived() [TestMethod] [Timeout(10000)] public void Listen1_AsksCursesToUpdateTerminal_WhenNoEventReceived() Listen1_AsksScreenToAdjustWindowsToExplicitArea() [TestMethod] [Timeout(10000)] public void Listen1_AsksScreenToAdjustWindowsToExplicitArea() Listen1_ConsidersBreaksInSequences() [TestMethod] [Timeout(10000)] public void Listen1_ConsidersBreaksInSequences() Listen1_ConsidersEscapeBreaks() [TestMethod] [Timeout(10000)] public void Listen1_ConsidersEscapeBreaks() Listen1_DoesNotAsksCursesToUpdateTerminal_WhenNoEventReceived_AndAtomic() [TestMethod] [Timeout(10000)] public void Listen1_DoesNotAsksCursesToUpdateTerminal_WhenNoEventReceived_AndAtomic() Listen1_DoesNotProcessTranslatedSeq2Events_IfResolverNotInstalled() [TestMethod] [Timeout(10000)] public void Listen1_DoesNotProcessTranslatedSeq2Events_IfResolverNotInstalled() Listen1_DoesNotProcessesTranslatedCharacters_IfNoMiddlewareInstalled() [TestMethod] [Timeout(10000)] public void Listen1_DoesNotProcessesTranslatedCharacters_IfNoMiddlewareInstalled() Listen1_EmitsStartEvent() [TestMethod] [Timeout(10000)] public void Listen1_EmitsStartEvent() Listen1_EmitsStopEvent() [TestMethod] [Timeout(10000)] public void Listen1_EmitsStopEvent() Listen1_KeepsAskingCurses_IfNoEventsReceivedOnRead() [TestMethod] [Timeout(10000)] public void Listen1_KeepsAskingCurses_IfNoEventsReceivedOnRead() Listen1_KeepsReadingUntilCancelled() [TestMethod] [Timeout(10000)] public void Listen1_KeepsReadingUntilCancelled() Listen1_ProcessesCharacterEvents() [TestMethod] [Timeout(10000)] public void Listen1_ProcessesCharacterEvents() Listen1_ProcessesDelegatesFirst() [TestMethod] [Timeout(10000)] public void Listen1_ProcessesDelegatesFirst() Listen1_ProcessesKeypadEvents() [TestMethod] [Timeout(10000)] public void Listen1_ProcessesKeypadEvents() Listen1_ProcessesMouseActionEvents() [TestMethod] [Timeout(10000)] public void Listen1_ProcessesMouseActionEvents() Listen1_ProcessesMouseActionEvents_AndUsesInternalMouseResolver() [TestMethod] [Timeout(10000)] public void Listen1_ProcessesMouseActionEvents_AndUsesInternalMouseResolver() Listen1_ProcessesMouseMoveEvents() [TestMethod] [Timeout(10000)] public void Listen1_ProcessesMouseMoveEvents() Listen1_ProcessesMouseMoveEvents_AndUsesInternalMouseResolver() [TestMethod] [Timeout(10000)] public void Listen1_ProcessesMouseMoveEvents_AndUsesInternalMouseResolver() Listen1_ProcessesTerminalResizeEvents() [TestMethod] [Timeout(10000)] public void Listen1_ProcessesTerminalResizeEvents() Listen1_ProcessesTranslatedCharacters_IfResolverInstalled() [TestMethod] [Timeout(10000)] public void Listen1_ProcessesTranslatedCharacters_IfResolverInstalled() Listen1_ProcessesTranslatedSeq2Events_IfResolverInstalled() [TestMethod] [Timeout(10000)] public void Listen1_ProcessesTranslatedSeq2Events_IfResolverInstalled() Listen1_ProcessesTranslatedSeq4Events_IfResolverInstalled() [TestMethod] [Timeout(10000)] public void Listen1_ProcessesTranslatedSeq4Events_IfResolverInstalled() Listen1_ThrowsIfWindowIsNull() [TestMethod] public void Listen1_ThrowsIfWindowIsNull() Listen1_WhenManaged_OnResize_UpdatesTheScreenAndWindow() [TestMethod] [Timeout(10000)] public void Listen1_WhenManaged_OnResize_UpdatesTheScreenAndWindow() Listen1_WhenUnmanaged_OnResize_DoesNotUpdateTheScreen() [TestMethod] [Timeout(10000)] public void Listen1_WhenUnmanaged_OnResize_DoesNotUpdateTheScreen() Listen2_CallsCurses_ForDummyPad() [TestMethod] [Timeout(10000)] public void Listen2_CallsCurses_ForDummyPad() Listen2_CreatesDummyPad() [TestMethod] [Timeout(10000)] public void Listen2_CreatesDummyPad() Listen2_DestroysDummyPad_EvenIfExceptionThrown() [TestMethod] [Timeout(10000)] public void Listen2_DestroysDummyPad_EvenIfExceptionThrown() Listen2_Throws_IfFailedToCreateDummyPad() [TestMethod] [Timeout(10000)] public void Listen2_Throws_IfFailedToCreateDummyPad() Listen3_Calls_Listen1() [TestMethod] [Timeout(10000)] public void Listen3_Calls_Listen1() Listen4_Calls_Listen2() [TestMethod] [Timeout(10000)] public void Listen4_Calls_Listen2() Terminal_IsInitialized() [TestMethod] public void Terminal_IsInitialized() TestCleanup() [TestCleanup] public void TestCleanup() TestInitialize() [TestInitialize] public void TestInitialize() TryResolveKeySequence_IgnoresEmptySequences() [TestMethod] public void TryResolveKeySequence_IgnoresEmptySequences() TryResolveKeySequence_ReturnsBest_IfBestIsTrue(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void TryResolveKeySequence_ReturnsBest_IfBestIsTrue(bool inv) Parameters inv bool TryResolveKeySequence_ReturnsKeysIndividually_IfNoResolvers() [TestMethod] public void TryResolveKeySequence_ReturnsKeysIndividually_IfNoResolvers() TryResolveKeySequence_Throws_IfSequenceIsNull() [TestMethod] public void TryResolveKeySequence_Throws_IfSequenceIsNull() TryResolveKeySequence_WaitForMoreChars_IfBestIsFalse(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void TryResolveKeySequence_WaitForMoreChars_IfBestIsFalse(bool inv) Parameters inv bool TryResolveMouseEvent1_CallsTheInternalMouseResolver() [TestMethod] public void TryResolveMouseEvent1_CallsTheInternalMouseResolver() TryResolveMouseEvent1_Throws_IfEventIsNull() [TestMethod] public void TryResolveMouseEvent1_Throws_IfEventIsNull() TryResolveMouseEvent2_CallsTheInternalMouseResolver() [TestMethod] public void TryResolveMouseEvent2_CallsTheInternalMouseResolver() TryResolveMouseEvent2_Throws_IfEventIsNull() [TestMethod] public void TryResolveMouseEvent2_Throws_IfEventIsNull() UseInternalMouseEventResolver_SetToFalse_UnInitializesMouseResolver() [TestMethod] public void UseInternalMouseEventResolver_SetToFalse_UnInitializesMouseResolver() UseInternalMouseEventResolver_SetToTrue_InitializesMouseResolver() [TestMethod] public void UseInternalMouseEventResolver_SetToTrue_InitializesMouseResolver() Use_RegistersResolver() [TestMethod] public void Use_RegistersResolver() Use_Throws_IfResolverIsNull() [TestMethod] public void Use_Throws_IfResolverIsNull() Uses_ReturnsFalse_IfResolverNotRegistered() [TestMethod] public void Uses_ReturnsFalse_IfResolverNotRegistered() Uses_ReturnsTrue_IfResolverRegistered() [TestMethod] public void Uses_ReturnsTrue_IfResolverRegistered() Uses_Throws_IfResolverIsNull() [TestMethod] public void Uses_Throws_IfResolverIsNull()"
  },
  "api/Sharpie.Tests.EventTests.html": {
    "href": "api/Sharpie.Tests.EventTests.html",
    "title": "Class EventTests | sharpie",
    "summary": "Class EventTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class EventTests Inheritance object EventTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_StoresTheType() [TestMethod] public void Ctor_StoresTheType() Equals_ReturnsFalse_IfDifferentTypes() [TestMethod] public void Equals_ReturnsFalse_IfDifferentTypes() Equals_ReturnsFalse_IfNotEvent(object?) [TestMethod] [DataRow(null)] [DataRow(\"\")] public void Equals_ReturnsFalse_IfNotEvent(object? b) Parameters b object Equals_ReturnsTrue_IfSameType() [TestMethod] public void Equals_ReturnsTrue_IfSameType() GetHashCode_IsTDifferent_ForDifferentTypes() [TestMethod] public void GetHashCode_IsTDifferent_ForDifferentTypes() GetHashCode_IsTheSame_ForSameTypes() [TestMethod] public void GetHashCode_IsTheSame_ForSameTypes() ToString_ProperlyFormats() [TestMethod] public void ToString_ProperlyFormats()"
  },
  "api/Sharpie.Tests.FigletFontParserTests.html": {
    "href": "api/Sharpie.Tests.FigletFontParserTests.html",
    "title": "Class FigletFontParserTests | sharpie",
    "summary": "Class FigletFontParserTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class FigletFontParserTests Inheritance object FigletFontParserTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ParseCharacterRow_CutsWithoutLastChar() [TestMethod] public void ParseCharacterRow_CutsWithoutLastChar() ParseCharacterRow_CutsWithoutLastChars() [TestMethod] public void ParseCharacterRow_CutsWithoutLastChars() ParseCharacterRow_Throws_WhenLengthIsGreaterThanMax() [TestMethod] public void ParseCharacterRow_Throws_WhenLengthIsGreaterThanMax() ParseCharacterRow_Throws_WhenLineIsEmpty() [TestMethod] public void ParseCharacterRow_Throws_WhenLineIsEmpty() ParseCodeTag_Returns(string, int, string) [TestMethod] [DataRow(\"0\", 0, \"\")] [DataRow(\" 0 hello\", 0, \"hello\")] [DataRow(\"-1\", -1, \"\")] [DataRow(\"010\", 8, \"\")] [DataRow(\"-010\", -8, \"\")] [DataRow(\"0xFF j\", 255, \"j\")] [DataRow(\"-0x00FF j\", -255, \"j\")] [DataRow(\"0x02BC\", 700, \"\")] public void ParseCodeTag_Returns(string str, int cp, string d) Parameters str string cp int d string ParseCodeTag_Throws_WhenInvalid_1() [TestMethod] public void ParseCodeTag_Throws_WhenInvalid_1() ParseCodeTag_Throws_WhenInvalid_2() [TestMethod] public void ParseCodeTag_Throws_WhenInvalid_2() ParseCodeTag_Throws_WhenLineIsEmpty() [TestMethod] public void ParseCodeTag_Throws_WhenLineIsEmpty() ParseCodeTaggedCharacterAsync_ReturnsCharacterAndLines_1() [TestMethod] public Task ParseCodeTaggedCharacterAsync_ReturnsCharacterAndLines_1() Returns Task ParseCodeTaggedCharacterAsync_ReturnsCharacterAndLines_2() [TestMethod] public Task ParseCodeTaggedCharacterAsync_ReturnsCharacterAndLines_2() Returns Task ParseCodeTaggedCharacterAsync_Throws_IfCharacterHasDiffLineSizes() [TestMethod] public Task ParseCodeTaggedCharacterAsync_Throws_IfCharacterHasDiffLineSizes() Returns Task ParseCodeTaggedCharacterAsync_Throws_IfCharacterIncomplete() [TestMethod] public Task ParseCodeTaggedCharacterAsync_Throws_IfCharacterIncomplete() Returns Task ParseCodeTaggedCharacterAsync_Throws_IfCharacterLineTooLong() [TestMethod] public Task ParseCodeTaggedCharacterAsync_Throws_IfCharacterLineTooLong() Returns Task ParseCodeTaggedCharacterAsync_Throws_IfCodePointInvalid() [TestMethod] public Task ParseCodeTaggedCharacterAsync_Throws_IfCodePointInvalid() Returns Task ParseFontFileAsync1_ReturnsHeaderAndOneChar() [TestMethod] public Task ParseFontFileAsync1_ReturnsHeaderAndOneChar() Returns Task ParseFontFileAsync1_ReturnsHeaderAndOneTaggedChar() [TestMethod] public Task ParseFontFileAsync1_ReturnsHeaderAndOneTaggedChar() Returns Task ParseFontFileAsync1_ReturnsHeaderAndTwoChars() [TestMethod] public Task ParseFontFileAsync1_ReturnsHeaderAndTwoChars() Returns Task ParseFontFileAsync1_ReturnsNoCharacters_IfNoneExpected() [TestMethod] public Task ParseFontFileAsync1_ReturnsNoCharacters_IfNoneExpected() Returns Task ParseFontFileAsync1_Throws_IfCharHAsLongedWidthThanExpected() [TestMethod] public Task ParseFontFileAsync1_Throws_IfCharHAsLongedWidthThanExpected() Returns Task ParseFontFileAsync1_Throws_IfExpectedOneChar() [TestMethod] public Task ParseFontFileAsync1_Throws_IfExpectedOneChar() Returns Task ParseFontFileAsync1_Throws_IfNoCharsAndExpectedComments() [TestMethod] public Task ParseFontFileAsync1_Throws_IfNoCharsAndExpectedComments() Returns Task ParseFontFileAsync2_ParsesTheFileAsExpected() [TestMethod] public Task ParseFontFileAsync2_ParsesTheFileAsExpected() Returns Task ParseHeader_ParsesTheHeaderAsExpected_1() [TestMethod] public void ParseHeader_ParsesTheHeaderAsExpected_1() ParseHeader_ParsesTheHeaderAsExpected_2() [TestMethod] public void ParseHeader_ParsesTheHeaderAsExpected_2() ParseHeader_ParsesTheHeaderAsExpected_3() [TestMethod] public void ParseHeader_ParsesTheHeaderAsExpected_3() ParseHeader_ParsesTheHeaderAsExpected_4() [TestMethod] public void ParseHeader_ParsesTheHeaderAsExpected_4() ParseHeader_ParsesTheHeaderAsExpected_5() [TestMethod] public void ParseHeader_ParsesTheHeaderAsExpected_5() ParseHeader_Throws_IfBaselineIsInvalid_1() [TestMethod] public void ParseHeader_Throws_IfBaselineIsInvalid_1() ParseHeader_Throws_IfBaselineIsInvalid_2() [TestMethod] public void ParseHeader_Throws_IfBaselineIsInvalid_2() ParseHeader_Throws_IfComponentsAreInvalid(string) [TestMethod] [DataRow(\"flf2a$ -1 1 3 1 1 1 1 1 1\")] [DataRow(\"flf2a$ 1 -1 3 1 1 1 1 1 1\")] [DataRow(\"flf2a$ 2 1 -1 1 1 1 1 1 1\")] [DataRow(\"flf2a$ 2 1 3 -2 1 1 1 1 1\")] [DataRow(\"flf2a$ 2 1 3 1 -1 1 1 1 1\")] [DataRow(\"flf2a$ 2 1 3 1 1 -1 1 1 1\")] [DataRow(\"flf2a$ 2 1 3 1 1 1 -1 1 1\")] public void ParseHeader_Throws_IfComponentsAreInvalid(string str) Parameters str string ParseHeader_Throws_IfHardBlankIsInvalid() [TestMethod] public void ParseHeader_Throws_IfHardBlankIsInvalid() ParseHeader_Throws_IfInvalidSignature() [TestMethod] public void ParseHeader_Throws_IfInvalidSignature() ParseHeader_Throws_IfNotEnoughComponents(string) [TestMethod] [DataRow(\"\")] [DataRow(\"hello\")] [DataRow(\"1 2 3 4 5\")] public void ParseHeader_Throws_IfNotEnoughComponents(string str) Parameters str string ParseStandardCharacterAsync_ReturnsCharacterAndLines_1() [TestMethod] public Task ParseStandardCharacterAsync_ReturnsCharacterAndLines_1() Returns Task ParseStandardCharacterAsync_ReturnsCharacterAndLines_2() [TestMethod] public Task ParseStandardCharacterAsync_ReturnsCharacterAndLines_2() Returns Task ParseStandardCharacterAsync_Throws_IfCharacterHasDiffLineSizes() [TestMethod] public Task ParseStandardCharacterAsync_Throws_IfCharacterHasDiffLineSizes() Returns Task ParseStandardCharacterAsync_Throws_IfCharacterIncomplete() [TestMethod] public Task ParseStandardCharacterAsync_Throws_IfCharacterIncomplete() Returns Task ParseStandardCharacterAsync_Throws_IfCharacterLineTooLong() [TestMethod] public Task ParseStandardCharacterAsync_Throws_IfCharacterLineTooLong() Returns Task"
  },
  "api/Sharpie.Tests.FigletFontTests.html": {
    "href": "api/Sharpie.Tests.FigletFontTests.html",
    "title": "Class FigletFontTests | sharpie",
    "summary": "Class FigletFontTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class FigletFontTests Inheritance object FigletFontTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Baseline_ReturnsTheSuppliedValue() [TestMethod] public void Baseline_ReturnsTheSuppliedValue() DefaultLayout_ReturnsTheExpectedCombinations(int, AsciiFontLayout) [TestMethod] [DataRow(FigletAttribute.FullWidth, AsciiFontLayout.FullWidth)] [DataRow(16777216, AsciiFontLayout.FullWidth)] [DataRow(FigletAttribute.HorizontalFitting|FigletAttribute.VerticalSmushing, AsciiFontLayout.Fitted)] [DataRow(FigletAttribute.HorizontalSmushing|FigletAttribute.VerticalFitting, AsciiFontLayout.Smushed)] public void DefaultLayout_ReturnsTheExpectedCombinations(int attr, AsciiFontLayout exp) Parameters attr int exp AsciiFontLayout GetGlyphs_MergesCharactersUsingLayoutRules() [TestMethod] public void GetGlyphs_MergesCharactersUsingLayoutRules() GetGlyphs_ReplacesHardBlanksWithWhitespaces() [TestMethod] public void GetGlyphs_ReplacesHardBlanksWithWhitespaces() GetGlyphs_ReturnsChars_WithWidthOfOne() [TestMethod] public void GetGlyphs_ReturnsChars_WithWidthOfOne() GetGlyphs_ReturnsTheExpectedGlyphsIncludingDefault_GreaterWidth() [TestMethod] public void GetGlyphs_ReturnsTheExpectedGlyphsIncludingDefault_GreaterWidth() GetGlyphs_ReturnsTheExpectedGlyphsIncludingReplacement_GreaterWidth() [TestMethod] public void GetGlyphs_ReturnsTheExpectedGlyphsIncludingReplacement_GreaterWidth() GetGlyphs_Throws_IfSpanIsEmpty() [TestMethod] public void GetGlyphs_Throws_IfSpanIsEmpty() HasGlyph_ReturnsFalse_IfCharNotDefined() [TestMethod] public void HasGlyph_ReturnsFalse_IfCharNotDefined() HasGlyph_ReturnsTrue_IfCharDefined() [TestMethod] public void HasGlyph_ReturnsTrue_IfCharDefined() Height_ReturnsTheSuppliedValue() [TestMethod] public void Height_ReturnsTheSuppliedValue() LoadAsync1_LoadsTheFontAsExpected() [TestMethod] public Task LoadAsync1_LoadsTheFontAsExpected() Returns Task LoadAsync1_Throws_IfFailedToLoadFont() [TestMethod] public Task LoadAsync1_Throws_IfFailedToLoadFont() Returns Task LoadAsync1_Throws_IfNameIsNullOrEmpty() [TestMethod] public Task LoadAsync1_Throws_IfNameIsNullOrEmpty() Returns Task LoadAsync1_Throws_IfReaderIsNull() [TestMethod] public Task LoadAsync1_Throws_IfReaderIsNull() Returns Task LoadAsync2_LoadsTheFontAsExpected() [TestMethod] public Task LoadAsync2_LoadsTheFontAsExpected() Returns Task LoadAsync2_Throws_IfFailedToOpenFile() [TestMethod] public Task LoadAsync2_Throws_IfFailedToOpenFile() Returns Task LoadAsync2_Throws_IfPathIsNullOrEmpty() [TestMethod] public Task LoadAsync2_Throws_IfPathIsNullOrEmpty() Returns Task Name_ReturnsTheSuppliedValue() [TestMethod] public void Name_ReturnsTheSuppliedValue()"
  },
  "api/Sharpie.Tests.FigletLayoutEvaluatorTests.html": {
    "href": "api/Sharpie.Tests.FigletLayoutEvaluatorTests.html",
    "title": "Class FigletLayoutEvaluatorTests | sharpie",
    "summary": "Class FigletLayoutEvaluatorTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class FigletLayoutEvaluatorTests Inheritance object FigletLayoutEvaluatorTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HorizontalJoin_IfFitting_AlwaysReturnsZero() [TestMethod] public void HorizontalJoin_IfFitting_AlwaysReturnsZero() HorizontalJoin_IfSmushingRule1_ReturnsExpectedResult(char, char, char) [TestMethod] [DataRow('A', 'A', 'A')] [DataRow('$', '$', '\\0')] public void HorizontalJoin_IfSmushingRule1_ReturnsExpectedResult(char l, char r, char exp) Parameters l char r char exp char HorizontalJoin_IfSmushingRule2_ReturnsExpectedResult(char, char, char) [TestMethod] [DataRow('_', '|', '|')] [DataRow('|', '_', '|')] [DataRow('a', 'b', '\\0')] public void HorizontalJoin_IfSmushingRule2_ReturnsExpectedResult(char l, char r, char exp) Parameters l char r char exp char HorizontalJoin_IfSmushingRule3_ReturnsExpectedResult(char, char, char) [TestMethod] [DataRow('|', '(', '(')] [DataRow(')', '>', '>')] [DataRow('(', '\\\\', '(')] [DataRow('(', ')', '\\0')] [DataRow('a', 'b', '\\0')] public void HorizontalJoin_IfSmushingRule3_ReturnsExpectedResult(char l, char r, char exp) Parameters l char r char exp char HorizontalJoin_IfSmushingRule4_ReturnsExpectedResult(char, char, char) [TestMethod] [DataRow('[', ']', '|')] [DataRow(')', '(', '|')] [DataRow('(', '{', '\\0')] public void HorizontalJoin_IfSmushingRule4_ReturnsExpectedResult(char l, char r, char exp) Parameters l char r char exp char HorizontalJoin_IfSmushingRule5_ReturnsExpectedResult(char, char, char) [TestMethod] [DataRow('/', '\\\\', 'Y')] [DataRow('\\\\', '/', 'Y')] [DataRow('>', '<', 'X')] [DataRow('>', '/', '\\0')] public void HorizontalJoin_IfSmushingRule5_ReturnsExpectedResult(char l, char r, char exp) Parameters l char r char exp char HorizontalJoin_IfSmushingRule6_ReturnsExpectedResult(char, char, char) [TestMethod] [DataRow('$', '$', '$')] [DataRow('$', '/', '\\0')] public void HorizontalJoin_IfSmushingRule6_ReturnsExpectedResult(char l, char r, char exp) Parameters l char r char exp char HorizontalJoin_IfUniversalSmushing_AlwaysReturnsRight() [TestMethod] public void HorizontalJoin_IfUniversalSmushing_AlwaysReturnsRight() Join_FitsTwoFiguresAsExpected_1() [TestMethod] public void Join_FitsTwoFiguresAsExpected_1() Join_FitsTwoFiguresAsExpected_2() [TestMethod] public void Join_FitsTwoFiguresAsExpected_2() Join_FitsTwoFiguresAsExpected_3() [TestMethod] public void Join_FitsTwoFiguresAsExpected_3() Join_RemovesAllWhiteSpacesFromRight(string, string, string) [TestMethod] [DataRow(\" \", \" \", \" \")] [DataRow(\" \", \" \", \" \")] [DataRow(\" \", \" \", \" \")] [DataRow(\" \", \" \", \" \")] public void Join_RemovesAllWhiteSpacesFromRight(string ls, string rs, string exp) Parameters ls string rs string exp string Join_RemovesAllWhiteSpacesFromRightUntilMerge(string, string, string) [TestMethod] [DataRow(\"a \", \" \", \"a \")] [DataRow(\"a \", \" bc\", \"ac\")] public void Join_RemovesAllWhiteSpacesFromRightUntilMerge(string ls, string rs, string exp) Parameters ls string rs string exp string Join_RemovesAllWhiteSpacesFromRightUntilStop(string, string, string) [TestMethod] [DataRow(\"a b\", \" k z\", \"a bk z\")] [DataRow(\" start\", \"ed\", \" started\")] public void Join_RemovesAllWhiteSpacesFromRightUntilStop(string ls, string rs, string exp) Parameters ls string rs string exp string Join_SmushesTwoFiguresAsExpected_1() [TestMethod] public void Join_SmushesTwoFiguresAsExpected_1()"
  },
  "api/Sharpie.Tests.HelpersTests.html": {
    "href": "api/Sharpie.Tests.HelpersTests.html",
    "title": "Class HelpersTests | sharpie",
    "summary": "Class HelpersTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class HelpersTests Inheritance object HelpersTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AdjustToActualArea1_ReturnsFalse_IfNewAreaIsEmpty(int, int) [TestMethod] [DataRow(100, 99)] [DataRow(99, 100)] [DataRow(100, 100)] public void AdjustToActualArea1_ReturnsFalse_IfNewAreaIsEmpty(int x, int y) Parameters x int y int AdjustToActualArea1_ReturnsTrueAndNewArea() [TestMethod] public void AdjustToActualArea1_ReturnsTrueAndNewArea() AdjustToActualArea2_ReturnsFalse_IfNewAreaIsEmpty(float, float) [TestMethod] [DataRow(100, 99)] [DataRow(99, 100)] [DataRow(100, 100)] public void AdjustToActualArea2_ReturnsFalse_IfNewAreaIsEmpty(float x, float y) Parameters x float y float AdjustToActualArea2_ReturnsTrueAndNewArea() [TestMethod] public void AdjustToActualArea2_ReturnsTrueAndNewArea() AdjustToActualArea3_ReturnsFalse_IfNewAreaIsEmpty(int, int) [TestMethod] [DataRow(110, 109)] [DataRow(109, 110)] [DataRow(110, 110)] public void AdjustToActualArea3_ReturnsFalse_IfNewAreaIsEmpty(int x, int y) Parameters x int y int AdjustToActualArea3_ReturnsTrueAndNewArea() [TestMethod] public void AdjustToActualArea3_ReturnsTrueAndNewArea() Check_ReturnsCode_IfCodeIsNotMinus1() [TestMethod] public void Check_ReturnsCode_IfCodeIsNotMinus1() Check_ReturnsPointer_IfNotZeroPointer() [TestMethod] public void Check_ReturnsPointer_IfNotZeroPointer() Check_Throws_IfCodeIsMinus1() [TestMethod] public void Check_Throws_IfCodeIsMinus1() Check_Throws_IfZeroPointer() [TestMethod] public void Check_Throws_IfZeroPointer() EnumerateInHalves_OffsetsByStart_1() [TestMethod] public void EnumerateInHalves_OffsetsByStart_1() EnumerateInHalves_OffsetsByStart_2() [TestMethod] public void EnumerateInHalves_OffsetsByStart_2() EnumerateInHalves_ReturnsNothingIsCountIsLessThanHalf() [TestMethod] public void EnumerateInHalves_ReturnsNothingIsCountIsLessThanHalf() EnumerateInHalves_ReturnsNothingIsCountIsZero() [TestMethod] public void EnumerateInHalves_ReturnsNothingIsCountIsZero() EnumerateInHalves_ReturnsOneIfCountIsApproxHalf() [TestMethod] public void EnumerateInHalves_ReturnsOneIfCountIsApproxHalf() EnumerateInHalves_ReturnsThreeIfCountAllows() [TestMethod] public void EnumerateInHalves_ReturnsThreeIfCountAllows() EnumerateInHalves_ReturnsTwoIfCountAllows() [TestMethod] public void EnumerateInHalves_ReturnsTwoIfCountAllows() EnumerateInHalves_Throws_IfCountIsNegative() [TestMethod] public void EnumerateInHalves_Throws_IfCountIsNegative() EnumerateInHalves_UnderstandsNegativeSpectrum() [TestMethod] public void EnumerateInHalves_UnderstandsNegativeSpectrum() Failed_ReturnsFalse_IfCodeIsNotMinus1() [TestMethod] public void Failed_ReturnsFalse_IfCodeIsNotMinus1() Failed_ReturnsTrue_IfCodeIsMinus1() [TestMethod] public void Failed_ReturnsTrue_IfCodeIsMinus1() FromComplexChar_ReturnsCursesChar() [TestMethod] public void FromComplexChar_ReturnsCursesChar() FromComplexChar_Throws_IfCursesFails() [TestMethod] public void FromComplexChar_Throws_IfCursesFails() GetRawValue_ReturnsTheRawValue_IfCharIsOk() [TestMethod] public void GetRawValue_ReturnsTheRawValue_IfCharIsOk() GetRawValue_Throws_IfCharIsNull() [TestMethod] public void GetRawValue_Throws_IfCharIsNull() GetRawValue_Throws_IfCharOfBadType() [TestMethod] public void GetRawValue_Throws_IfCharOfBadType() IntersectSegments_CalculatesTheProperLength(int, int, int, int, int, int) [TestMethod] [DataRow(0, 0, 0, 5, -1, 0)] [DataRow(0, 5, 0, 0, -1, 0)] [DataRow(0, 5, 6, 5, -1, 0)] [DataRow(0, 5, -10, 5, -1, 0)] [DataRow(-10, 20, 0, 5, 0, 5)] [DataRow(0, 10, -10, 11, 0, 1)] [DataRow(0, 1, 0, 5, 0, 1)] [DataRow(0, 10, 0, 5, 0, 5)] public void IntersectSegments_CalculatesTheProperLength(int s1, int c1, int s2, int c2, int si, int sc) Parameters s1 int c1 int s2 int c2 int si int sc int IntersectSegments_Throws_IfLength1IsLessThanZero() [TestMethod] public void IntersectSegments_Throws_IfLength1IsLessThanZero() IntersectSegments_Throws_IfLength2IsLessThanZero() [TestMethod] public void IntersectSegments_Throws_IfLength2IsLessThanZero() Refresh_Fails_IfCursesFails_InBatch() [TestMethod] public void Refresh_Fails_IfCursesFails_InBatch() Refresh_Fails_IfCursesFails_NoBatch() [TestMethod] public void Refresh_Fails_IfCursesFails_NoBatch() Refresh_Succeeds_IfCursesSucceeds_InBatch() [TestMethod] public void Refresh_Succeeds_IfCursesSucceeds_InBatch() Refresh_Succeeds_IfCursesSucceeds_NoBatch() [TestMethod] public void Refresh_Succeeds_IfCursesSucceeds_NoBatch() TestInitialize() [TestInitialize] public void TestInitialize() ToComplexChar_ConvertsSpecialAsciiToUnicode(int, string) [TestMethod] [DataRow(31, \"␟\")] [DataRow(127, \"⑿\")] [DataRow(159, \"⒟\")] public void ToComplexChar_ConvertsSpecialAsciiToUnicode(int ch, string expected) Parameters ch int expected string ToComplexChar_DoesNotConvertOtherAsciiToUnicode(int, string) [TestMethod] [DataRow(32, \" \")] [DataRow(126, \"~\")] [DataRow(160, \" \")] [DataRow(10, \"\\n\")] [DataRow(8, \"\\b\")] [DataRow(9, \"\\t\")] public void ToComplexChar_DoesNotConvertOtherAsciiToUnicode(int ch, string expected) Parameters ch int expected string ToComplexChar_Throws_IfCursesFails() [TestMethod] public void ToComplexChar_Throws_IfCursesFails() TraceLineInHalves_GeneratesTheExpectedOutput_1() [TestMethod] public void TraceLineInHalves_GeneratesTheExpectedOutput_1() TraceLineInHalves_GeneratesTheExpectedOutput_2() [TestMethod] public void TraceLineInHalves_GeneratesTheExpectedOutput_2() TraceLineInHalves_GeneratesTheExpectedOutput_3() [TestMethod] public void TraceLineInHalves_GeneratesTheExpectedOutput_3() TraceLineInHalves_GeneratesTheExpectedOutput_4() [TestMethod] public void TraceLineInHalves_GeneratesTheExpectedOutput_4() TraceLineInHalves_GeneratesTheExpectedOutput_5() [TestMethod] public void TraceLineInHalves_GeneratesTheExpectedOutput_5()"
  },
  "api/Sharpie.Tests.KeyEventTests.html": {
    "href": "api/Sharpie.Tests.KeyEventTests.html",
    "title": "Class KeyEventTests | sharpie",
    "summary": "Class KeyEventTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class KeyEventTests Inheritance object KeyEventTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_InitializesPropertiesCorrectly() [TestMethod] public void Ctor_InitializesPropertiesCorrectly() Equals_ReturnsFalse_IfDifferentChar() [TestMethod] public void Equals_ReturnsFalse_IfDifferentChar() Equals_ReturnsFalse_IfDifferentKey() [TestMethod] public void Equals_ReturnsFalse_IfDifferentKey() Equals_ReturnsFalse_IfDifferentModifiers() [TestMethod] public void Equals_ReturnsFalse_IfDifferentModifiers() Equals_ReturnsFalse_IfDifferentName() [TestMethod] public void Equals_ReturnsFalse_IfDifferentName() Equals_ReturnsFalse_IfNotKeyEvent(object?) [TestMethod] [DataRow(null)] [DataRow(\"\")] public void Equals_ReturnsFalse_IfNotKeyEvent(object? b) Parameters b object Equals_ReturnsTrue_IfAllPropertiesAreSame() [TestMethod] public void Equals_ReturnsTrue_IfAllPropertiesAreSame() GetHashCode_IsDifferent_IfDifferentChar() [TestMethod] public void GetHashCode_IsDifferent_IfDifferentChar() GetHashCode_IsDifferent_IfDifferentKey() [TestMethod] public void GetHashCode_IsDifferent_IfDifferentKey() GetHashCode_IsDifferent_IfDifferentModifiers() [TestMethod] public void GetHashCode_IsDifferent_IfDifferentModifiers() GetHashCode_IsDifferent_IfDifferentName() [TestMethod] public void GetHashCode_IsDifferent_IfDifferentName() GetHashCode_IsEqual_IfAllPropertiesAreSame() [TestMethod] public void GetHashCode_IsEqual_IfAllPropertiesAreSame() ToString_ProperlyFormatsChar_WithModifiers_AndName() [TestMethod] public void ToString_ProperlyFormatsChar_WithModifiers_AndName() ToString_ProperlyFormatsChar_WithNoModifiers_AndName() [TestMethod] public void ToString_ProperlyFormatsChar_WithNoModifiers_AndName() ToString_ProperlyFormatsChar_WithNoModifiers_AndNoName() [TestMethod] public void ToString_ProperlyFormatsChar_WithNoModifiers_AndNoName() ToString_ProperlyFormatsKeyPress_WithModifiers_AndName() [TestMethod] public void ToString_ProperlyFormatsKeyPress_WithModifiers_AndName() ToString_ProperlyFormatsKeyPress_WithNoModifiers_AndName() [TestMethod] public void ToString_ProperlyFormatsKeyPress_WithNoModifiers_AndName() ToString_ProperlyFormatsKeyPress_WithNoModifiers_AndNoName() [TestMethod] public void ToString_ProperlyFormatsKeyPress_WithNoModifiers_AndNoName()"
  },
  "api/Sharpie.Tests.KeySequenceResolverTests.html": {
    "href": "api/Sharpie.Tests.KeySequenceResolverTests.html",
    "title": "Class KeySequenceResolverTests | sharpie",
    "summary": "Class KeySequenceResolverTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class KeySequenceResolverTests Inheritance object KeySequenceResolverTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AltKeyResolver_ReturnsTheExpectedResult_ForKnown(Key, int, ModifierKey, Key, int, ModifierKey, bool) [TestMethod] [DataRow(Key.Character, 'f', ModifierKey.Shift, Key.KeypadRight, '\\0', ModifierKey.Shift|ModifierKey.Alt, true)] [DataRow(Key.Character, 'b', ModifierKey.Shift, Key.KeypadLeft, '\\0', ModifierKey.Shift|ModifierKey.Alt, true)] [DataRow(Key.F1, '\\0', ModifierKey.Shift, Key.F1, '\\0', ModifierKey.Shift|ModifierKey.Alt, false)] [DataRow(Key.Character, 'A', ModifierKey.Shift, Key.Character, 'A', ModifierKey.Shift|ModifierKey.Alt, true)] [DataRow(Key.Character, '.', ModifierKey.None, Key.Character, '.', ModifierKey.Alt, true)] public void AltKeyResolver_ReturnsTheExpectedResult_ForKnown(Key inKey, int inCode, ModifierKey inMod, Key expKey, int expCode, ModifierKey expMod, bool chName) Parameters inKey Key inCode int inMod ModifierKey expKey Key expCode int expMod ModifierKey chName bool AltKeyResolver_ReturnsTheExpectedResult_ForPartial() [TestMethod] public void AltKeyResolver_ReturnsTheExpectedResult_ForPartial() AltKeyResolver_ReturnsTheExpectedResult_ForUnknown() [TestMethod] public void AltKeyResolver_ReturnsTheExpectedResult_ForUnknown() AltKeyResolver_ThrowsIfSequenceIsNull() [TestMethod] public void AltKeyResolver_ThrowsIfSequenceIsNull() ControlKeyResolver_ReturnsTheExpectedResult_ForKnown(Key, int, ModifierKey, Key, int, ModifierKey) [TestMethod] [DataRow(Key.Character, 0, ModifierKey.Shift, Key.Character, ' ', ModifierKey.Shift|ModifierKey.Ctrl)] [DataRow(Key.Character, 1, ModifierKey.Shift, Key.Character, 'A', ModifierKey.Shift|ModifierKey.Ctrl)] [DataRow(Key.Character, 26, ModifierKey.Shift, Key.Character, 'Z', ModifierKey.Shift|ModifierKey.Ctrl)] public void ControlKeyResolver_ReturnsTheExpectedResult_ForKnown(Key inKey, int inCode, ModifierKey inMod, Key expKey, int expCode, ModifierKey expMod) Parameters inKey Key inCode int inMod ModifierKey expKey Key expCode int expMod ModifierKey ControlKeyResolver_ReturnsTheExpectedResult_ForUnknown(Key, int) [TestMethod] [DataRow(Key.Character, 'a')] [DataRow(Key.Unknown, '\\0')] [DataRow(Key.Backspace, '\\0')] [DataRow(Key.F1, '\\0')] public void ControlKeyResolver_ReturnsTheExpectedResult_ForUnknown(Key inKey, int inCode) Parameters inKey Key inCode int ControlKeyResolver_ThrowsIfSequenceIsNull() [TestMethod] public void ControlKeyResolver_ThrowsIfSequenceIsNull() KeyPadModifiersResolver_ReturnsTheExpectedResult_ForKnown(int, Key) [TestMethod] [DataRow('A', Key.KeypadUp)] [DataRow('B', Key.KeypadDown)] [DataRow('C', Key.KeypadRight)] [DataRow('D', Key.KeypadLeft)] [DataRow('E', Key.KeypadPageUp)] [DataRow('F', Key.KeypadEnd)] [DataRow('G', Key.KeypadPageDown)] [DataRow('H', Key.KeypadHome)] public void KeyPadModifiersResolver_ReturnsTheExpectedResult_ForKnown(int ch, Key expKey) Parameters ch int expKey Key KeyPadModifiersResolver_ReturnsTheExpectedResult_ForPartial_1() [TestMethod] public void KeyPadModifiersResolver_ReturnsTheExpectedResult_ForPartial_1() KeyPadModifiersResolver_ReturnsTheExpectedResult_ForPartial_2() [TestMethod] public void KeyPadModifiersResolver_ReturnsTheExpectedResult_ForPartial_2() KeyPadModifiersResolver_ReturnsTheExpectedResult_ForPartial_3() [TestMethod] public void KeyPadModifiersResolver_ReturnsTheExpectedResult_ForPartial_3() KeyPadModifiersResolver_ReturnsTheExpectedResult_Unknown() [TestMethod] public void KeyPadModifiersResolver_ReturnsTheExpectedResult_Unknown() KeyPadModifiersResolver_ThrowsIfSequenceIsNull() [TestMethod] public void KeyPadModifiersResolver_ThrowsIfSequenceIsNull() SpecialCharacterResolver_ReturnsTheExpectedResult_ForKnown(Key, int, ModifierKey, Key, int, ModifierKey) [TestMethod] [DataRow(Key.Character, 27, ModifierKey.Shift, Key.Escape, '\\0', ModifierKey.Shift)] [DataRow(Key.Character, '\\t', ModifierKey.Shift, Key.Tab, '\\0', ModifierKey.Shift)] [DataRow(Key.Character, '\\n', ModifierKey.Shift, Key.Return, '\\0', ModifierKey.Shift)] [DataRow(Key.Character, 127, ModifierKey.Shift, Key.Backspace, '\\0', ModifierKey.Shift)] public void SpecialCharacterResolver_ReturnsTheExpectedResult_ForKnown(Key inKey, int inCode, ModifierKey inMod, Key expKey, int expCode, ModifierKey expMod) Parameters inKey Key inCode int inMod ModifierKey expKey Key expCode int expMod ModifierKey SpecialCharacterResolver_ReturnsTheExpectedResult_ForUnknown(Key, int) [TestMethod] [DataRow(Key.Character, 'a')] [DataRow(Key.Unknown, '\\0')] [DataRow(Key.Backspace, '\\0')] [DataRow(Key.F1, '\\0')] public void SpecialCharacterResolver_ReturnsTheExpectedResult_ForUnknown(Key inKey, int inCode) Parameters inKey Key inCode int SpecialCharacterResolver_ThrowsIfSequenceIsNull() [TestMethod] public void SpecialCharacterResolver_ThrowsIfSequenceIsNull()"
  },
  "api/Sharpie.Tests.MouseActionEventTests.html": {
    "href": "api/Sharpie.Tests.MouseActionEventTests.html",
    "title": "Class MouseActionEventTests | sharpie",
    "summary": "Class MouseActionEventTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class MouseActionEventTests Inheritance object MouseActionEventTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_InitializesPropertiesCorrectly() [TestMethod] public void Ctor_InitializesPropertiesCorrectly() Equals_ReturnsFalse_IfDifferentButton() [TestMethod] public void Equals_ReturnsFalse_IfDifferentButton() Equals_ReturnsFalse_IfDifferentModifiers() [TestMethod] public void Equals_ReturnsFalse_IfDifferentModifiers() Equals_ReturnsFalse_IfDifferentPosition() [TestMethod] public void Equals_ReturnsFalse_IfDifferentPosition() Equals_ReturnsFalse_IfDifferentState() [TestMethod] public void Equals_ReturnsFalse_IfDifferentState() Equals_ReturnsFalse_IfNotMouseActionEvent(object?) [TestMethod] [DataRow(null)] [DataRow(\"\")] public void Equals_ReturnsFalse_IfNotMouseActionEvent(object? b) Parameters b object Equals_ReturnsTrue_IfAllPropertiesAreSame() [TestMethod] public void Equals_ReturnsTrue_IfAllPropertiesAreSame() GetHashCode_IsDifferent_IfDifferentButton() [TestMethod] public void GetHashCode_IsDifferent_IfDifferentButton() GetHashCode_IsDifferent_IfDifferentModifiers() [TestMethod] public void GetHashCode_IsDifferent_IfDifferentModifiers() GetHashCode_IsDifferent_IfDifferentPosition() [TestMethod] public void GetHashCode_IsDifferent_IfDifferentPosition() GetHashCode_IsDifferent_IfDifferentState() [TestMethod] public void GetHashCode_IsDifferent_IfDifferentState() GetHashCode_IsEqual_IfAllPropertiesAreSame() [TestMethod] public void GetHashCode_IsEqual_IfAllPropertiesAreSame() ToString_ProperlyFormatsKeyPress_WithModifiers() [TestMethod] public void ToString_ProperlyFormatsKeyPress_WithModifiers() ToString_ProperlyFormatsKeyPress_WithNoModifiers() [TestMethod] public void ToString_ProperlyFormatsKeyPress_WithNoModifiers()"
  },
  "api/Sharpie.Tests.MouseEventResolverTests.html": {
    "href": "api/Sharpie.Tests.MouseEventResolverTests.html",
    "title": "Class MouseEventResolverTests | sharpie",
    "summary": "Class MouseEventResolverTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class MouseEventResolverTests Inheritance object MouseEventResolverTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Process1_EatsEvent_IfSamePosition() [TestMethod] public void Process1_EatsEvent_IfSamePosition() Process1_ReturnsSameEvent_IfDifferentPosition() [TestMethod] public void Process1_ReturnsSameEvent_IfDifferentPosition() Process1_Throws_IfEventIsNull() [TestMethod] public void Process1_Throws_IfEventIsNull() Process2_AssumesFirstButtonReleased_EvenIfSecondIsDifferent() [TestMethod] public void Process2_AssumesFirstButtonReleased_EvenIfSecondIsDifferent() Process2_ConvertsClicksIntoPressAndReleaseEvents() [TestMethod] public void Process2_ConvertsClicksIntoPressAndReleaseEvents() Process2_DoesNotEatButtonPress_IfFirstOneNotReleasedYet_AndPositionDidNotChange() [TestMethod] public void Process2_DoesNotEatButtonPress_IfFirstOneNotReleasedYet_AndPositionDidNotChange() Process2_DoesNotIssueAMove_IfSamePosition() [TestMethod] public void Process2_DoesNotIssueAMove_IfSamePosition() Process2_EatsButtonPress_IfFirstOneNotReleasedYet_AndPositionChanged() [TestMethod] public void Process2_EatsButtonPress_IfFirstOneNotReleasedYet_AndPositionChanged() Process2_EatsEvent_IfItWasReleaseWithoutAnythingBeingPressedBefore() [TestMethod] public void Process2_EatsEvent_IfItWasReleaseWithoutAnythingBeingPressedBefore() Process2_IssuesActionSecond_IfDifferentPosition() [TestMethod] public void Process2_IssuesActionSecond_IfDifferentPosition() Process2_IssuesMoveFirst_IfDifferentPosition() [TestMethod] public void Process2_IssuesMoveFirst_IfDifferentPosition() Process2_IssuesOnlyAction_IfSamePosition() [TestMethod] public void Process2_IssuesOnlyAction_IfSamePosition() Process2_Throws_IfEventIsNull() [TestMethod] public void Process2_Throws_IfEventIsNull() TestInitialize() [TestInitialize] public void TestInitialize()"
  },
  "api/Sharpie.Tests.MouseMoveEventTests.html": {
    "href": "api/Sharpie.Tests.MouseMoveEventTests.html",
    "title": "Class MouseMoveEventTests | sharpie",
    "summary": "Class MouseMoveEventTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class MouseMoveEventTests Inheritance object MouseMoveEventTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_InitializesPropertiesCorrectly() [TestMethod] public void Ctor_InitializesPropertiesCorrectly() Equals_ReturnsFalse_IfNotMouseMoveEvent(object?) [TestMethod] [DataRow(null)] [DataRow(\"\")] public void Equals_ReturnsFalse_IfNotMouseMoveEvent(object? b) Parameters b object Equals_ReturnsFalse_IfPosition() [TestMethod] public void Equals_ReturnsFalse_IfPosition() Equals_ReturnsTrue_IfSamePosition() [TestMethod] public void Equals_ReturnsTrue_IfSamePosition() GetHashCode_IsDifferent_IfPositionDifferent() [TestMethod] public void GetHashCode_IsDifferent_IfPositionDifferent() GetHashCode_IsEqual_IfAllPropertiesAreSame() [TestMethod] public void GetHashCode_IsEqual_IfAllPropertiesAreSame() ToString_ProperlyFormats() [TestMethod] public void ToString_ProperlyFormats()"
  },
  "api/Sharpie.Tests.NCursesBackendTests.html": {
    "href": "api/Sharpie.Tests.NCursesBackendTests.html",
    "title": "Class NCursesBackendTests | sharpie",
    "summary": "Class NCursesBackendTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class NCursesBackendTests Inheritance object NCursesBackendTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CursesMouseEventParser_ReturnsMouseParserBasedOnAbi(string, int) [TestMethod] [DataRow(\"something\", -1)] [DataRow(\"6.2.3\", 2)] [DataRow(\"something6.2.3\", 2)] [DataRow(\"something 5.7\", -1)] [DataRow(\"something 4.7.5\", -1)] [DataRow(\"something 5.7.12312\", 1)] public void CursesMouseEventParser_ReturnsMouseParserBasedOnAbi(string ver, int m) Parameters ver string m int DecodeCursesAttributes_WorksAsExpected() [TestMethod] public void DecodeCursesAttributes_WorksAsExpected() DecodeKeyCodeType_DecodesProperly(int, uint, int) [TestMethod] [DataRow(-1, 10, 0)] [DataRow(0, 32, 1)] [DataRow(100, 32, 1)] [DataRow(256, 267, 4)] [DataRow(256, 410, 3)] [DataRow(256, 409, 2)] public void DecodeKeyCodeType_DecodesProperly(int res, uint code, int exp) Parameters res int code uint exp int DecodeRawKey_DecodesProperly(uint, char, Key, ModifierKey) [TestMethod] [DataRow(NCursesKeyCode.F1, '\\0', Key.F1, ModifierKey.None)] [DataRow(NCursesKeyCode.F2, '\\0', Key.F2, ModifierKey.None)] [DataRow(NCursesKeyCode.F3, '\\0', Key.F3, ModifierKey.None)] [DataRow(NCursesKeyCode.F4, '\\0', Key.F4, ModifierKey.None)] [DataRow(NCursesKeyCode.F5, '\\0', Key.F5, ModifierKey.None)] [DataRow(NCursesKeyCode.F6, '\\0', Key.F6, ModifierKey.None)] [DataRow(NCursesKeyCode.F7, '\\0', Key.F7, ModifierKey.None)] [DataRow(NCursesKeyCode.F8, '\\0', Key.F8, ModifierKey.None)] [DataRow(NCursesKeyCode.F9, '\\0', Key.F9, ModifierKey.None)] [DataRow(NCursesKeyCode.F10, '\\0', Key.F10, ModifierKey.None)] [DataRow(NCursesKeyCode.F11, '\\0', Key.F11, ModifierKey.None)] [DataRow(NCursesKeyCode.F12, '\\0', Key.F12, ModifierKey.None)] [DataRow(NCursesKeyCode.ShiftF1, '\\0', Key.F1, ModifierKey.Shift)] [DataRow(NCursesKeyCode.ShiftF2, '\\0', Key.F2, ModifierKey.Shift)] [DataRow(NCursesKeyCode.ShiftF3, '\\0', Key.F3, ModifierKey.Shift)] [DataRow(NCursesKeyCode.ShiftF4, '\\0', Key.F4, ModifierKey.Shift)] [DataRow(NCursesKeyCode.ShiftF5, '\\0', Key.F5, ModifierKey.Shift)] [DataRow(NCursesKeyCode.ShiftF6, '\\0', Key.F6, ModifierKey.Shift)] [DataRow(NCursesKeyCode.ShiftF7, '\\0', Key.F7, ModifierKey.Shift)] [DataRow(NCursesKeyCode.ShiftF8, '\\0', Key.F8, ModifierKey.Shift)] [DataRow(NCursesKeyCode.ShiftF9, '\\0', Key.F9, ModifierKey.Shift)] [DataRow(NCursesKeyCode.ShiftF10, '\\0', Key.F10, ModifierKey.Shift)] [DataRow(NCursesKeyCode.ShiftF11, '\\0', Key.F11, ModifierKey.Shift)] [DataRow(NCursesKeyCode.ShiftF12, '\\0', Key.F12, ModifierKey.Shift)] [DataRow(NCursesKeyCode.CtrlF1, '\\0', Key.F1, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.CtrlF2, '\\0', Key.F2, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.CtrlF3, '\\0', Key.F3, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.CtrlF4, '\\0', Key.F4, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.CtrlF5, '\\0', Key.F5, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.CtrlF6, '\\0', Key.F6, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.CtrlF7, '\\0', Key.F7, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.CtrlF8, '\\0', Key.F8, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.CtrlF9, '\\0', Key.F9, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.CtrlF10, '\\0', Key.F10, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.CtrlF11, '\\0', Key.F11, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.CtrlF12, '\\0', Key.F12, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.AltF1, '\\0', Key.F1, ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltF2, '\\0', Key.F2, ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltF3, '\\0', Key.F3, ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltF4, '\\0', Key.F4, ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltF5, '\\0', Key.F5, ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltF6, '\\0', Key.F6, ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltF7, '\\0', Key.F7, ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltF8, '\\0', Key.F8, ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltF9, '\\0', Key.F9, ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltF10, '\\0', Key.F10, ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltF11, '\\0', Key.F11, ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltF12, '\\0', Key.F12, ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltF1, '\\0', Key.F1, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltF2, '\\0', Key.F2, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltF3, '\\0', Key.F3, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltF4, '\\0', Key.F4, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltF5, '\\0', Key.F5, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltF6, '\\0', Key.F6, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltF7, '\\0', Key.F7, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltF8, '\\0', Key.F8, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltF9, '\\0', Key.F9, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltF10, '\\0', Key.F10, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltF11, '\\0', Key.F11, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltF12, '\\0', Key.F12, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.Up, '\\0', Key.KeypadUp, ModifierKey.None)] [DataRow(NCursesKeyCode.Down, '\\0', Key.KeypadDown, ModifierKey.None)] [DataRow(NCursesKeyCode.Left, '\\0', Key.KeypadLeft, ModifierKey.None)] [DataRow(NCursesKeyCode.Right, '\\0', Key.KeypadRight, ModifierKey.None)] [DataRow(NCursesKeyCode.Home, '\\0', Key.KeypadHome, ModifierKey.None)] [DataRow(NCursesKeyCode.End, '\\0', Key.KeypadEnd, ModifierKey.None)] [DataRow(NCursesKeyCode.PageDown, '\\0', Key.KeypadPageDown, ModifierKey.None)] [DataRow(NCursesKeyCode.PageUp, '\\0', Key.KeypadPageUp, ModifierKey.None)] [DataRow(NCursesKeyCode.Delete, '\\0', Key.Delete, ModifierKey.None)] [DataRow(NCursesKeyCode.Insert, '\\0', Key.Insert, ModifierKey.None)] [DataRow(NCursesKeyCode.BackTab, '\\0', Key.Tab, ModifierKey.Shift)] [DataRow(NCursesKeyCode.Backspace, '\\0', Key.Backspace, ModifierKey.None)] [DataRow(NCursesKeyCode.ShiftUp, '\\0', Key.KeypadUp, ModifierKey.Shift)] [DataRow(NCursesKeyCode.ShiftDown, '\\0', Key.KeypadDown, ModifierKey.Shift)] [DataRow(NCursesKeyCode.ShiftLeft, '\\0', Key.KeypadLeft, ModifierKey.Shift)] [DataRow(NCursesKeyCode.ShiftRight, '\\0', Key.KeypadRight, ModifierKey.Shift)] [DataRow(NCursesKeyCode.ShiftHome, '\\0', Key.KeypadHome, ModifierKey.Shift)] [DataRow(NCursesKeyCode.ShiftEnd, '\\0', Key.KeypadEnd, ModifierKey.Shift)] [DataRow(NCursesKeyCode.ShiftPageDown, '\\0', Key.KeypadPageDown, ModifierKey.Shift)] [DataRow(NCursesKeyCode.ShiftPageUp, '\\0', Key.KeypadPageUp, ModifierKey.Shift)] [DataRow(NCursesKeyCode.AltUp, '\\0', Key.KeypadUp, ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltDown, '\\0', Key.KeypadDown, ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltLeft, '\\0', Key.KeypadLeft, ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltRight, '\\0', Key.KeypadRight, ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltHome, '\\0', Key.KeypadHome, ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltEnd, '\\0', Key.KeypadEnd, ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltPageDown, '\\0', Key.KeypadPageDown, ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltPageUp, '\\0', Key.KeypadPageUp, ModifierKey.Alt)] [DataRow(NCursesKeyCode.CtrlUp, '\\0', Key.KeypadUp, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.CtrlDown, '\\0', Key.KeypadDown, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.CtrlLeft, '\\0', Key.KeypadLeft, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.CtrlRight, '\\0', Key.KeypadRight, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.CtrlHome, '\\0', Key.KeypadHome, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.CtrlEnd, '\\0', Key.KeypadEnd, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.CtrlPageDown, '\\0', Key.KeypadPageDown, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.CtrlPageUp, '\\0', Key.KeypadPageUp, ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.ShiftCtrlUp, '\\0', Key.KeypadUp, ModifierKey.Shift|ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.ShiftCtrlDown, '\\0', Key.KeypadDown, ModifierKey.Shift|ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.ShiftCtrlLeft, '\\0', Key.KeypadLeft, ModifierKey.Shift|ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.ShiftCtrlRight, '\\0', Key.KeypadRight, ModifierKey.Shift|ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.ShiftCtrlHome, '\\0', Key.KeypadHome, ModifierKey.Shift|ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.ShiftCtrlEnd, '\\0', Key.KeypadEnd, ModifierKey.Shift|ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.ShiftCtrlPageDown, '\\0', Key.KeypadPageDown, ModifierKey.Shift|ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.ShiftCtrlPageUp, '\\0', Key.KeypadPageUp, ModifierKey.Shift|ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.ShiftAltUp, '\\0', Key.KeypadUp, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltDown, '\\0', Key.KeypadDown, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltLeft, '\\0', Key.KeypadLeft, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltRight, '\\0', Key.KeypadRight, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltPageDown, '\\0', Key.KeypadPageDown, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltPageUp, '\\0', Key.KeypadPageUp, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltHome, '\\0', Key.KeypadHome, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.ShiftAltEnd, '\\0', Key.KeypadEnd, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(NCursesKeyCode.AltCtrlPageDown, '\\0', Key.KeypadPageDown, ModifierKey.Alt|ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.AltCtrlPageUp, '\\0', Key.KeypadPageUp, ModifierKey.Alt|ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.AltCtrlHome, '\\0', Key.KeypadHome, ModifierKey.Alt|ModifierKey.Ctrl)] [DataRow(NCursesKeyCode.AltCtrlEnd, '\\0', Key.KeypadEnd, ModifierKey.Alt|ModifierKey.Ctrl)] [DataRow(9999, '\\0', Key.Unknown, ModifierKey.None)] public void DecodeRawKey_DecodesProperly(uint rawKey, char chr, Key expKey, ModifierKey expMod) Parameters rawKey uint chr char expKey Key expMod ModifierKey EncodeCursesAttribute_WorksAsExpected() [TestMethod] public void EncodeCursesAttribute_WorksAsExpected() TestInitialize() [TestInitialize] public void TestInitialize() endwin_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void endwin_IsRelayedToLibrary(int ret) Parameters ret int getcchar_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void getcchar_IsRelayedToLibrary(int ret) Parameters ret int getcchar_Throws_IfCharIsIncompatible() [TestMethod] public void getcchar_Throws_IfCharIsIncompatible() getcchar_Throws_IfCharIsNull() [TestMethod] public void getcchar_Throws_IfCharIsNull() getmouse_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void getmouse_IsRelayedToLibrary(int ret) Parameters ret int is_immedok_IsRelayedToLibrary(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void is_immedok_IsRelayedToLibrary(bool ret) Parameters ret bool is_scrollok_IsRelayedToLibrary(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void is_scrollok_IsRelayedToLibrary(bool ret) Parameters ret bool setcchar_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void setcchar_IsRelayedToLibrary(int ret) Parameters ret int slk_attr_IsRelayedToLibrary_1() [TestMethod] public void slk_attr_IsRelayedToLibrary_1() slk_attr_IsRelayedToLibrary_2() [TestMethod] public void slk_attr_IsRelayedToLibrary_2() slk_attr_off_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_attr_off_IsRelayedToLibrary(int ret) Parameters ret int slk_attr_on_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_attr_on_IsRelayedToLibrary(int ret) Parameters ret int slk_attr_set_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_attr_set_IsRelayedToLibrary(int ret) Parameters ret int slk_clear_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_clear_IsRelayedToLibrary(int ret) Parameters ret int slk_color_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_color_IsRelayedToLibrary(int ret) Parameters ret int slk_init_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_init_IsRelayedToLibrary(int ret) Parameters ret int slk_noutrefresh_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_noutrefresh_IsRelayedToLibrary(int ret) Parameters ret int slk_refresh_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_refresh_IsRelayedToLibrary(int ret) Parameters ret int slk_restore_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_restore_IsRelayedToLibrary(int ret) Parameters ret int slk_set_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_set_IsRelayedToLibrary(int ret) Parameters ret int slk_touch_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_touch_IsRelayedToLibrary(int ret) Parameters ret int wadd_wch_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wadd_wch_IsRelayedToLibrary(int ret) Parameters ret int wadd_wch_Throws_IfCharIsIncompatible() [TestMethod] public void wadd_wch_Throws_IfCharIsIncompatible() wadd_wch_Throws_IfCharIsNull() [TestMethod] public void wadd_wch_Throws_IfCharIsNull() wbkgrnd_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wbkgrnd_IsRelayedToLibrary(int ret) Parameters ret int wbkgrnd_Throws_IfCharIsIncompatible() [TestMethod] public void wbkgrnd_Throws_IfCharIsIncompatible() wbkgrnd_Throws_IfCharIsNull() [TestMethod] public void wbkgrnd_Throws_IfCharIsNull() wborder_set_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wborder_set_IsRelayedToLibrary(int ret) Parameters ret int wborder_set_Throws_IfCharIsIncompatible(int) [TestMethod] [DataRow(0)] [DataRow(1)] [DataRow(2)] [DataRow(3)] [DataRow(4)] [DataRow(5)] [DataRow(6)] [DataRow(7)] public void wborder_set_Throws_IfCharIsIncompatible(int bad) Parameters bad int wborder_set_Throws_IfCharIsNull(int) [TestMethod] [DataRow(0)] [DataRow(1)] [DataRow(2)] [DataRow(3)] [DataRow(4)] [DataRow(5)] [DataRow(6)] [DataRow(7)] public void wborder_set_Throws_IfCharIsNull(int bad) Parameters bad int wgetbkgrnd_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wgetbkgrnd_IsRelayedToLibrary(int ret) Parameters ret int wgetbkgrnd_Throws_IfCharIsIncompatible() [TestMethod] public void wgetbkgrnd_Throws_IfCharIsIncompatible() wgetbkgrnd_Throws_IfCharIsNull() [TestMethod] public void wgetbkgrnd_Throws_IfCharIsNull() whline_set_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void whline_set_IsRelayedToLibrary(int ret) Parameters ret int whline_set_Throws_IfCharIsIncompatible() [TestMethod] public void whline_set_Throws_IfCharIsIncompatible() whline_set_Throws_IfCharIsNull() [TestMethod] public void whline_set_Throws_IfCharIsNull() win_wch_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void win_wch_IsRelayedToLibrary(int ret) Parameters ret int wvline_set_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wvline_set_IsRelayedToLibrary(int ret) Parameters ret int wvline_set_Throws_IfCharIsIncompatible() [TestMethod] public void wvline_set_Throws_IfCharIsIncompatible() wvline_set_Throws_IfCharIsNull() [TestMethod] public void wvline_set_Throws_IfCharIsNull()"
  },
  "api/Sharpie.Tests.NCursesComplexCharTests.html": {
    "href": "api/Sharpie.Tests.NCursesComplexCharTests.html",
    "title": "Class NCursesComplexCharTests | sharpie",
    "summary": "Class NCursesComplexCharTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class NCursesComplexCharTests Inheritance object NCursesComplexCharTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToString_ProperlyFormats() [TestMethod] public void ToString_ProperlyFormats()"
  },
  "api/Sharpie.Tests.NativeLibraryWrapperTests.html": {
    "href": "api/Sharpie.Tests.NativeLibraryWrapperTests.html",
    "title": "Class NativeLibraryWrapperTests | sharpie",
    "summary": "Class NativeLibraryWrapperTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class NativeLibraryWrapperTests Inheritance object NativeLibraryWrapperTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_ExtractsOnlyTheSupportedSymbols() [TestMethod] public void Ctor_ExtractsOnlyTheSupportedSymbols() Ctor_StoresTheHandleValue() [TestMethod] public void Ctor_StoresTheHandleValue() Ctor_Throws_IfFailedToExtractOneSymbol() [TestMethod] public void Ctor_Throws_IfFailedToExtractOneSymbol() Dispose_FreesTheLibrary_OnlyOnce() [TestMethod] public void Dispose_FreesTheLibrary_OnlyOnce() Resolve_ExtractsTheKnownSymbol() [TestMethod] public void Resolve_ExtractsTheKnownSymbol() Resolve_Throws_IfUnknownDelegate() [TestMethod] public void Resolve_Throws_IfUnknownDelegate() Resolve_TraversesInheritance() [TestMethod] public void Resolve_TraversesInheritance() TestInitialize() [TestInitialize] public void TestInitialize() TryLoad_ReturnsAnInstance_IfLoadedByName() [TestMethod] public void TryLoad_ReturnsAnInstance_IfLoadedByName() TryLoad_ReturnsAnInstance_IfLoadedByPath() [TestMethod] public void TryLoad_ReturnsAnInstance_IfLoadedByPath() TryLoad_ReturnsNull_IfFailedToLoadAnything() [TestMethod] public void TryLoad_ReturnsNull_IfFailedToLoadAnything() TryLoad_ReturnsNull_IfLibraryNameOrPathsIsEmpty() [TestMethod] public void TryLoad_ReturnsNull_IfLibraryNameOrPathsIsEmpty() TryLoad_TriesToLoadByName_IfHasNoDirectory_ThenByPath() [TestMethod] public void TryLoad_TriesToLoadByName_IfHasNoDirectory_ThenByPath() TryLoad_TriesToLoadByPath_IfHasDirectory() [TestMethod] public void TryLoad_TriesToLoadByPath_IfHasDirectory()"
  },
  "api/Sharpie.Tests.PadTests.html": {
    "href": "api/Sharpie.Tests.PadTests.html",
    "title": "Class PadTests | sharpie",
    "summary": "Class PadTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class PadTests Inheritance object PadTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_Throws_IfScreenIsNull() [TestMethod] public void Ctor_Throws_IfScreenIsNull() Destroy_CallsCurses() [TestMethod] public void Destroy_CallsCurses() Destroy_DestroysChildren() [TestMethod] public void Destroy_DestroysChildren() Destroy_RemovesWindowFromParent() [TestMethod] public void Destroy_RemovesWindowFromParent() Duplicate_PreservesManagedCaret(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void Duplicate_PreservesManagedCaret(bool mc) Parameters mc bool Duplicate_ReturnsNewPad_IfCursesSucceeds() [TestMethod] public void Duplicate_ReturnsNewPad_IfCursesSucceeds() Duplicate_Throws_IfCursesFails() [TestMethod] public void Duplicate_Throws_IfCursesFails() Refresh1_CallsCurses_InBatch() [TestMethod] public void Refresh1_CallsCurses_InBatch() Refresh1_CallsCurses_NoBatch() [TestMethod] public void Refresh1_CallsCurses_NoBatch() Refresh1_DoesNothing_IfDestinationAdjustedArea_IsOutsideTheScreenBounds() [TestMethod] public void Refresh1_DoesNothing_IfDestinationAdjustedArea_IsOutsideTheScreenBounds() Refresh1_Throws_IfCursesFails_InBatch() [TestMethod] public void Refresh1_Throws_IfCursesFails_InBatch() Refresh1_Throws_IfCursesFails_NoBatch() [TestMethod] public void Refresh1_Throws_IfCursesFails_NoBatch() Refresh1_Throws_IfSourceAdjustedArea_IsOutsideTheBounds() [TestMethod] public void Refresh1_Throws_IfSourceAdjustedArea_IsOutsideTheBounds() Refresh2_Calls_Refresh1_InBatch() [TestMethod] public void Refresh2_Calls_Refresh1_InBatch() Refresh2_Calls_Refresh1_NoBatch() [TestMethod] public void Refresh2_Calls_Refresh1_NoBatch() Screen_IsInitialized() [TestMethod] public void Screen_IsInitialized() Size_Set_SetsValue_IfCursesSucceeded() [TestMethod] public void Size_Set_SetsValue_IfCursesSucceeded() Size_Set_Throws_IfCursesFails() [TestMethod] public void Size_Set_Throws_IfCursesFails() Size_Set_Throws_IfOutsideParent() [TestMethod] public void Size_Set_Throws_IfOutsideParent() Size_Set_UpdatesSize_IfInsideParent() [TestMethod] public void Size_Set_UpdatesSize_IfInsideParent() SubPad_AdjustsArea_ToMatchParent() [TestMethod] public void SubPad_AdjustsArea_ToMatchParent() SubPad_PreservesManagedCaret(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void SubPad_PreservesManagedCaret(bool mc) Parameters mc bool SubPad_ReturnsNewPad_IfCursesSucceeds() [TestMethod] public void SubPad_ReturnsNewPad_IfCursesSucceeds() SubPad_Throws_IfAdjustedAreaIsEmpty() [TestMethod] public void SubPad_Throws_IfAdjustedAreaIsEmpty() SubPad_Throws_IfCursesFails() [TestMethod] public void SubPad_Throws_IfCursesFails() SubPads_ContainsTheChild_WhenPassedAsParent() [TestMethod] public void SubPads_ContainsTheChild_WhenPassedAsParent() SubPads_DoesNotContainTheChild_WhenChildDestroyed() [TestMethod] public void SubPads_DoesNotContainTheChild_WhenChildDestroyed() SubPads_IsEmpty_WhenCreated() [TestMethod] public void SubPads_IsEmpty_WhenCreated() SubPads_Throws_IfPadIsDestroyed() [TestMethod] public void SubPads_Throws_IfPadIsDestroyed() TestCleanup() [TestCleanup] public void TestCleanup() TestInitialize() [TestInitialize] public void TestInitialize() ToString_ReturnsFormattedRepresentation() [TestMethod] public void ToString_ReturnsFormattedRepresentation()"
  },
  "api/Sharpie.Tests.PdCursesBackendTests.html": {
    "href": "api/Sharpie.Tests.PdCursesBackendTests.html",
    "title": "Class PdCursesBackendTests | sharpie",
    "summary": "Class PdCursesBackendTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class PdCursesBackendTests Inheritance object PdCursesBackendTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CursesMouseEventParser_ReturnsMouseParserAbi2() [TestMethod] public void CursesMouseEventParser_ReturnsMouseParserAbi2() DecodeCursesAttributes_WorksAsExpected(VideoAttribute, int) [TestMethod] [DataRow(VideoAttribute.None, 0)] [DataRow(VideoAttribute.StandOut, 10485760)] [DataRow(VideoAttribute.Underline, 1048576)] [DataRow(VideoAttribute.Reverse, 2097152)] [DataRow(VideoAttribute.Blink, 4194304)] [DataRow(VideoAttribute.Bold, 8388608)] [DataRow(VideoAttribute.AltCharset, 65536)] [DataRow(VideoAttribute.LeftHighlight, 262144)] [DataRow(VideoAttribute.RightHighlight, 131072)] [DataRow(VideoAttribute.Italic, 524288)] [DataRow(VideoAttribute.Bold|VideoAttribute.AltCharset, 8454144)] public void DecodeCursesAttributes_WorksAsExpected(VideoAttribute exp, int attr) Parameters exp VideoAttribute attr int DecodeKeyCodeType_DecodesProperly(int, uint, int) [TestMethod] [DataRow(-1, 10, 0)] [DataRow(0, 32, 1)] [DataRow(100, 32, 1)] [DataRow(256, 267, 4)] [DataRow(256, 546, 3)] [DataRow(256, 539, 2)] public void DecodeKeyCodeType_DecodesProperly(int res, uint code, int exp) Parameters res int code uint exp int DecodeRawKey_DecodesProperly(uint, char, Key, ModifierKey) [TestMethod] [DataRow(PdCursesKeyCode.F1, '\\0', Key.F1, ModifierKey.None)] [DataRow(PdCursesKeyCode.F2, '\\0', Key.F2, ModifierKey.None)] [DataRow(PdCursesKeyCode.F3, '\\0', Key.F3, ModifierKey.None)] [DataRow(PdCursesKeyCode.F4, '\\0', Key.F4, ModifierKey.None)] [DataRow(PdCursesKeyCode.F5, '\\0', Key.F5, ModifierKey.None)] [DataRow(PdCursesKeyCode.F6, '\\0', Key.F6, ModifierKey.None)] [DataRow(PdCursesKeyCode.F7, '\\0', Key.F7, ModifierKey.None)] [DataRow(PdCursesKeyCode.F8, '\\0', Key.F8, ModifierKey.None)] [DataRow(PdCursesKeyCode.F9, '\\0', Key.F9, ModifierKey.None)] [DataRow(PdCursesKeyCode.F10, '\\0', Key.F10, ModifierKey.None)] [DataRow(PdCursesKeyCode.F11, '\\0', Key.F11, ModifierKey.None)] [DataRow(PdCursesKeyCode.F12, '\\0', Key.F12, ModifierKey.None)] [DataRow(PdCursesKeyCode.ShiftF1, '\\0', Key.F1, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF2, '\\0', Key.F2, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF3, '\\0', Key.F3, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF4, '\\0', Key.F4, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF5, '\\0', Key.F5, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF6, '\\0', Key.F6, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF7, '\\0', Key.F7, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF8, '\\0', Key.F8, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF9, '\\0', Key.F9, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF10, '\\0', Key.F10, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF11, '\\0', Key.F11, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF12, '\\0', Key.F12, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.CtrlF1, '\\0', Key.F1, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF2, '\\0', Key.F2, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF3, '\\0', Key.F3, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF4, '\\0', Key.F4, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF5, '\\0', Key.F5, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF6, '\\0', Key.F6, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF7, '\\0', Key.F7, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF8, '\\0', Key.F8, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF9, '\\0', Key.F9, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF10, '\\0', Key.F10, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF11, '\\0', Key.F11, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF12, '\\0', Key.F12, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.AltF1, '\\0', Key.F1, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF2, '\\0', Key.F2, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF3, '\\0', Key.F3, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF4, '\\0', Key.F4, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF5, '\\0', Key.F5, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF6, '\\0', Key.F6, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF7, '\\0', Key.F7, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF8, '\\0', Key.F8, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF9, '\\0', Key.F9, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF10, '\\0', Key.F10, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF11, '\\0', Key.F11, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF12, '\\0', Key.F12, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF1, '\\0', Key.F1, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF2, '\\0', Key.F2, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF3, '\\0', Key.F3, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF4, '\\0', Key.F4, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF5, '\\0', Key.F5, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF6, '\\0', Key.F6, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF7, '\\0', Key.F7, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF8, '\\0', Key.F8, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF9, '\\0', Key.F9, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF10, '\\0', Key.F10, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF11, '\\0', Key.F11, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF12, '\\0', Key.F12, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Up, '\\0', Key.KeypadUp, ModifierKey.None)] [DataRow(PdCursesKeyCode.Down, '\\0', Key.KeypadDown, ModifierKey.None)] [DataRow(PdCursesKeyCode.Left, '\\0', Key.KeypadLeft, ModifierKey.None)] [DataRow(PdCursesKeyCode.Right, '\\0', Key.KeypadRight, ModifierKey.None)] [DataRow(PdCursesKeyCode.Home, '\\0', Key.KeypadHome, ModifierKey.None)] [DataRow(PdCursesKeyCode.End, '\\0', Key.KeypadEnd, ModifierKey.None)] [DataRow(PdCursesKeyCode.PageDown, '\\0', Key.KeypadPageDown, ModifierKey.None)] [DataRow(PdCursesKeyCode.PageUp, '\\0', Key.KeypadPageUp, ModifierKey.None)] [DataRow(PdCursesKeyCode.Delete, '\\0', Key.Delete, ModifierKey.None)] [DataRow(PdCursesKeyCode.Insert, '\\0', Key.Insert, ModifierKey.None)] [DataRow(PdCursesKeyCode.BackTab, '\\0', Key.Tab, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.Backspace, '\\0', Key.Backspace, ModifierKey.None)] [DataRow(PdCursesKeyCode.ShiftUp, '\\0', Key.KeypadUp, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftDown, '\\0', Key.KeypadDown, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftLeft, '\\0', Key.KeypadLeft, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftRight, '\\0', Key.KeypadRight, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftHome, '\\0', Key.KeypadHome, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftEnd, '\\0', Key.KeypadEnd, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.AltUp, '\\0', Key.KeypadUp, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltDown, '\\0', Key.KeypadDown, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltLeft, '\\0', Key.KeypadLeft, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltRight, '\\0', Key.KeypadRight, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltHome, '\\0', Key.KeypadHome, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltEnd, '\\0', Key.KeypadEnd, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltPageUp, '\\0', Key.KeypadPageUp, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.CtrlUp, '\\0', Key.KeypadUp, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlDown, '\\0', Key.KeypadDown, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlLeft, '\\0', Key.KeypadLeft, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlRight, '\\0', Key.KeypadRight, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlHome, '\\0', Key.KeypadHome, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlEnd, '\\0', Key.KeypadEnd, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlPageDown, '\\0', Key.KeypadPageDown, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlPageUp, '\\0', Key.KeypadPageUp, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.ScrollDown, '\\0', Key.KeypadPageDown, ModifierKey.None)] [DataRow(PdCursesKeyCode.ScrollUp, '\\0', Key.KeypadPageUp, ModifierKey.None)] [DataRow(PdCursesKeyCode.Alt0, '0', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Alt1, '1', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Alt2, '2', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Alt3, '3', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Alt4, '4', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Alt5, '5', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Alt6, '6', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Alt7, '7', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Alt8, '8', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Alt9, '9', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltA, 'A', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltB, 'B', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltC, 'C', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltD, 'D', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltE, 'E', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF, 'F', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltG, 'G', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltH, 'H', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltI, 'I', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltJ, 'J', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltK, 'K', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltL, 'L', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltM, 'M', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltN, 'N', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltO, 'O', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltP, 'P', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltQ, 'Q', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltR, 'R', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltS, 'S', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltT, 'T', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltU, 'U', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltV, 'V', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltW, 'W', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltX, 'X', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltY, 'Y', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltZ, 'Z', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeypadSlash, '/', Key.Character, ModifierKey.None)] [DataRow(PdCursesKeyCode.KeypadEnter, '\\n', Key.Character, ModifierKey.None)] [DataRow(PdCursesKeyCode.KeypadCtrlEnter, '\\n', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeypadAltEnter, '\\n', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeypadStop, '\\0', Key.KeypadHome, ModifierKey.None)] [DataRow(PdCursesKeyCode.KeypadAsterisk, '*', Key.Character, ModifierKey.None)] [DataRow(PdCursesKeyCode.KeypadMinus, '-', Key.Character, ModifierKey.None)] [DataRow(PdCursesKeyCode.KeypadPlus, '+', Key.Character, ModifierKey.None)] [DataRow(PdCursesKeyCode.KeypadCtrlStop, '\\0', Key.KeypadHome, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeypadCtrlMiddle, '5', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeypadCtrlPlus, '+', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeypadCtrlMinus, '-', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeypadCtrlSlash, '/', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeypadCtrlAsterisk, '*', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeypadAltPlus, '+', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeypadAltMinus, '-', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeypadAltSlash, '/', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeypadAltAsterisk, '*', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeypadAltStop, '\\0', Key.KeypadHome, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.CtrlInsert, '\\0', Key.Insert, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.AltDelete, '\\0', Key.Delete, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltInsert, '\\0', Key.Insert, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.CtrlTab, '\\0', Key.Tab, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.AltTab, '\\0', Key.Tab, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltMinus, '-', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltEqual, '=', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltPageDown, '+', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltEnter, '\\n', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltEscape, '\\0', Key.Escape, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltBackQuote, '\\'', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltLeftBracket, '(', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltRightBracket, ')', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltSemicolon, ';', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltForwardQuote, '`', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltComma, ',', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltStop, '\\0', Key.KeypadHome, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltForwardSlash, '\\\\', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltBackspace, '\\0', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.CtrlBackspace, '\\0', Key.Backspace, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPad0, '0', Key.Character, ModifierKey.None)] [DataRow(PdCursesKeyCode.KeyPadCtrl0, '0', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadCtrl1, '1', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadCtrl2, '2', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadCtrl3, '3', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadCtrl4, '4', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadCtrl5, '5', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadCtrl6, '6', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadCtrl7, '7', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadCtrl8, '8', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadCtrl9, '9', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadAlt0, '0', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeyPadAlt1, '1', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeyPadAlt2, '2', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeyPadAlt3, '3', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeyPadAlt4, '4', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeyPadAlt5, '5', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeyPadAlt6, '6', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeyPadAlt7, '7', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeyPadAlt8, '8', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeyPadAlt9, '9', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.CtrlDelete, '\\0', Key.Delete, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.AltBackSlash, '\\\\', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.CtrlEnter, '\\n', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadShiftEnter, '\\n', Key.Character, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.KeyPadShiftPlus, '+', Key.Character, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.KeyPadShiftMinus, '-', Key.Character, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.KeyPadShiftSlash, '/', Key.Character, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.KeyPadShiftAsterisk, '*', Key.Character, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.KeyPadShiftUp, '\\0', Key.KeypadUp, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.KeyPadShiftDown, '\\0', Key.KeypadDown, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.KeyPadShiftInsert, '\\0', Key.Insert, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.KeyPadShiftDelete, '\\0', Key.Delete, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.LeftShift, '\\0', Key.Character, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.RightShift, '\\0', Key.Character, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.LeftCtrl, '\\0', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.RightCtrl, '\\0', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.LeftAlt, '\\0', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.RightAlt, '\\0', Key.Character, ModifierKey.Alt)] [DataRow(9999, '\\0', Key.Unknown, ModifierKey.None)] public void DecodeRawKey_DecodesProperly(uint rawKey, char chr, Key expKey, ModifierKey expMod) Parameters rawKey uint chr char expKey Key expMod ModifierKey EncodeCursesAttribute_WorksAsExpected(VideoAttribute, int) [TestMethod] [DataRow(VideoAttribute.None, 0)] [DataRow(VideoAttribute.StandOut, 10485760)] [DataRow(VideoAttribute.Underline, 1048576)] [DataRow(VideoAttribute.Reverse, 2097152)] [DataRow(VideoAttribute.Blink, 4194304)] [DataRow(VideoAttribute.Dim, 0)] [DataRow(VideoAttribute.Bold, 8388608)] [DataRow(VideoAttribute.AltCharset, 65536)] [DataRow(VideoAttribute.Invisible, 0)] [DataRow(VideoAttribute.Protect, 0)] [DataRow(VideoAttribute.HorizontalHighlight, 0)] [DataRow(VideoAttribute.LeftHighlight, 262144)] [DataRow(VideoAttribute.LowHighlight, 0)] [DataRow(VideoAttribute.LowHighlight, 0)] [DataRow(VideoAttribute.RightHighlight, 131072)] [DataRow(VideoAttribute.TopHighlight, 0)] [DataRow(VideoAttribute.VerticalHighlight, 0)] [DataRow(VideoAttribute.Italic, 524288)] [DataRow(VideoAttribute.Bold|VideoAttribute.AltCharset, 8454144)] public void EncodeCursesAttribute_WorksAsExpected(VideoAttribute attr, int exp) Parameters attr VideoAttribute exp int TestInitialize() [TestInitialize] public void TestInitialize() endwin_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void endwin_IsRelayedToLibrary(int ret) Parameters ret int getcchar_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void getcchar_IsRelayedToLibrary(int ret) Parameters ret int getcchar_Throws_IfCharIsIncompatible() [TestMethod] public void getcchar_Throws_IfCharIsIncompatible() getcchar_Throws_IfCharIsNull() [TestMethod] public void getcchar_Throws_IfCharIsNull() getmouse_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void getmouse_IsRelayedToLibrary(int ret) Parameters ret int immedok_RetainsValueInLocalCache(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void immedok_RetainsValueInLocalCache(bool yes) Parameters yes bool scrollok_And_immedok_DoeNotTouchEachOthersValues() [TestMethod] public void scrollok_And_immedok_DoeNotTouchEachOthersValues() scrollok_RetainsValueInLocalCache(bool, int) [TestMethod] [DataRow(true, 0)] [DataRow(false, -1)] public void scrollok_RetainsValueInLocalCache(bool yes, int ret) Parameters yes bool ret int setcchar_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void setcchar_IsRelayedToLibrary(int ret) Parameters ret int slk_attr_ReturnsError() [TestMethod] public void slk_attr_ReturnsError() slk_attr_off_ReturnsError() [TestMethod] public void slk_attr_off_ReturnsError() slk_attr_on_ReturnsError() [TestMethod] public void slk_attr_on_ReturnsError() slk_attr_set_ReturnsError() [TestMethod] public void slk_attr_set_ReturnsError() slk_clear_ReturnsError() [TestMethod] public void slk_clear_ReturnsError() slk_color_ReturnsError() [TestMethod] public void slk_color_ReturnsError() slk_init_ReturnsError() [TestMethod] public void slk_init_ReturnsError() slk_noutrefresh_ReturnsError() [TestMethod] public void slk_noutrefresh_ReturnsError() slk_refresh_ReturnsError() [TestMethod] public void slk_refresh_ReturnsError() slk_restore_ReturnsError() [TestMethod] public void slk_restore_ReturnsError() slk_set_ReturnsError() [TestMethod] public void slk_set_ReturnsError() slk_touch_ReturnsError() [TestMethod] public void slk_touch_ReturnsError() wadd_wch_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wadd_wch_IsRelayedToLibrary(int ret) Parameters ret int wadd_wch_Throws_IfCharIsIncompatible() [TestMethod] public void wadd_wch_Throws_IfCharIsIncompatible() wadd_wch_Throws_IfCharIsNull() [TestMethod] public void wadd_wch_Throws_IfCharIsNull() wbkgrnd_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wbkgrnd_IsRelayedToLibrary(int ret) Parameters ret int wbkgrnd_Throws_IfCharIsIncompatible() [TestMethod] public void wbkgrnd_Throws_IfCharIsIncompatible() wbkgrnd_Throws_IfCharIsNull() [TestMethod] public void wbkgrnd_Throws_IfCharIsNull() wborder_set_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wborder_set_IsRelayedToLibrary(int ret) Parameters ret int wborder_set_Throws_IfCharIsIncompatible(int) [TestMethod] [DataRow(0)] [DataRow(1)] [DataRow(2)] [DataRow(3)] [DataRow(4)] [DataRow(5)] [DataRow(6)] [DataRow(7)] public void wborder_set_Throws_IfCharIsIncompatible(int bad) Parameters bad int wborder_set_Throws_IfCharIsNull(int) [TestMethod] [DataRow(0)] [DataRow(1)] [DataRow(2)] [DataRow(3)] [DataRow(4)] [DataRow(5)] [DataRow(6)] [DataRow(7)] public void wborder_set_Throws_IfCharIsNull(int bad) Parameters bad int wgetbkgrnd_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wgetbkgrnd_IsRelayedToLibrary(int ret) Parameters ret int wgetbkgrnd_Throws_IfCharIsIncompatible() [TestMethod] public void wgetbkgrnd_Throws_IfCharIsIncompatible() wgetbkgrnd_Throws_IfCharIsNull() [TestMethod] public void wgetbkgrnd_Throws_IfCharIsNull() whline_set_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void whline_set_IsRelayedToLibrary(int ret) Parameters ret int whline_set_Throws_IfCharIsIncompatible() [TestMethod] public void whline_set_Throws_IfCharIsIncompatible() whline_set_Throws_IfCharIsNull() [TestMethod] public void whline_set_Throws_IfCharIsNull() win_wch_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void win_wch_IsRelayedToLibrary(int ret) Parameters ret int wvline_set_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wvline_set_IsRelayedToLibrary(int ret) Parameters ret int wvline_set_Throws_IfCharIsIncompatible() [TestMethod] public void wvline_set_Throws_IfCharIsIncompatible() wvline_set_Throws_IfCharIsNull() [TestMethod] public void wvline_set_Throws_IfCharIsNull()"
  },
  "api/Sharpie.Tests.PdCursesMod32BackendTests.html": {
    "href": "api/Sharpie.Tests.PdCursesMod32BackendTests.html",
    "title": "Class PdCursesMod32BackendTests | sharpie",
    "summary": "Class PdCursesMod32BackendTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class PdCursesMod32BackendTests Inheritance object PdCursesMod32BackendTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CursesMouseEventParser_ReturnsMouseParserAbi2() [TestMethod] public void CursesMouseEventParser_ReturnsMouseParserAbi2() DecodeCursesAttributes_WorksAsExpected(VideoAttribute, int) [TestMethod] [DataRow(VideoAttribute.None, 0)] [DataRow(VideoAttribute.StandOut, 10485760)] [DataRow(VideoAttribute.Underline, 1048576)] [DataRow(VideoAttribute.Reverse, 2097152)] [DataRow(VideoAttribute.Blink, 4194304)] [DataRow(VideoAttribute.Bold, 8388608)] [DataRow(VideoAttribute.AltCharset, 65536)] [DataRow(VideoAttribute.LeftHighlight, 262144)] [DataRow(VideoAttribute.RightHighlight, 131072)] [DataRow(VideoAttribute.Italic, 524288)] [DataRow(VideoAttribute.Bold|VideoAttribute.AltCharset, 8454144)] public void DecodeCursesAttributes_WorksAsExpected(VideoAttribute exp, int attr) Parameters exp VideoAttribute attr int DecodeKeyCodeType_DecodesProperly(int, uint, int) [TestMethod] [DataRow(-1, 10, 0)] [DataRow(0, 32, 1)] [DataRow(100, 32, 1)] [DataRow(60416, 60427, 4)] [DataRow(60416, 60706, 3)] [DataRow(60416, 60699, 2)] public void DecodeKeyCodeType_DecodesProperly(int res, uint code, int exp) Parameters res int code uint exp int DecodeRawKey_DecodesProperly(uint, char, Key, ModifierKey) [TestMethod] [DataRow(PdCursesKeyCode.F1, '\\0', Key.F1, ModifierKey.None)] [DataRow(PdCursesKeyCode.F2, '\\0', Key.F2, ModifierKey.None)] [DataRow(PdCursesKeyCode.F3, '\\0', Key.F3, ModifierKey.None)] [DataRow(PdCursesKeyCode.F4, '\\0', Key.F4, ModifierKey.None)] [DataRow(PdCursesKeyCode.F5, '\\0', Key.F5, ModifierKey.None)] [DataRow(PdCursesKeyCode.F6, '\\0', Key.F6, ModifierKey.None)] [DataRow(PdCursesKeyCode.F7, '\\0', Key.F7, ModifierKey.None)] [DataRow(PdCursesKeyCode.F8, '\\0', Key.F8, ModifierKey.None)] [DataRow(PdCursesKeyCode.F9, '\\0', Key.F9, ModifierKey.None)] [DataRow(PdCursesKeyCode.F10, '\\0', Key.F10, ModifierKey.None)] [DataRow(PdCursesKeyCode.F11, '\\0', Key.F11, ModifierKey.None)] [DataRow(PdCursesKeyCode.F12, '\\0', Key.F12, ModifierKey.None)] [DataRow(PdCursesKeyCode.ShiftF1, '\\0', Key.F1, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF2, '\\0', Key.F2, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF3, '\\0', Key.F3, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF4, '\\0', Key.F4, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF5, '\\0', Key.F5, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF6, '\\0', Key.F6, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF7, '\\0', Key.F7, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF8, '\\0', Key.F8, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF9, '\\0', Key.F9, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF10, '\\0', Key.F10, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF11, '\\0', Key.F11, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftF12, '\\0', Key.F12, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.CtrlF1, '\\0', Key.F1, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF2, '\\0', Key.F2, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF3, '\\0', Key.F3, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF4, '\\0', Key.F4, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF5, '\\0', Key.F5, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF6, '\\0', Key.F6, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF7, '\\0', Key.F7, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF8, '\\0', Key.F8, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF9, '\\0', Key.F9, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF10, '\\0', Key.F10, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF11, '\\0', Key.F11, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlF12, '\\0', Key.F12, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.AltF1, '\\0', Key.F1, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF2, '\\0', Key.F2, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF3, '\\0', Key.F3, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF4, '\\0', Key.F4, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF5, '\\0', Key.F5, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF6, '\\0', Key.F6, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF7, '\\0', Key.F7, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF8, '\\0', Key.F8, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF9, '\\0', Key.F9, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF10, '\\0', Key.F10, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF11, '\\0', Key.F11, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF12, '\\0', Key.F12, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF1, '\\0', Key.F1, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF2, '\\0', Key.F2, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF3, '\\0', Key.F3, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF4, '\\0', Key.F4, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF5, '\\0', Key.F5, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF6, '\\0', Key.F6, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF7, '\\0', Key.F7, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF8, '\\0', Key.F8, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF9, '\\0', Key.F9, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF10, '\\0', Key.F10, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF11, '\\0', Key.F11, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.ShiftAltF12, '\\0', Key.F12, ModifierKey.Shift|ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Up, '\\0', Key.KeypadUp, ModifierKey.None)] [DataRow(PdCursesKeyCode.Down, '\\0', Key.KeypadDown, ModifierKey.None)] [DataRow(PdCursesKeyCode.Left, '\\0', Key.KeypadLeft, ModifierKey.None)] [DataRow(PdCursesKeyCode.Right, '\\0', Key.KeypadRight, ModifierKey.None)] [DataRow(PdCursesKeyCode.Home, '\\0', Key.KeypadHome, ModifierKey.None)] [DataRow(PdCursesKeyCode.End, '\\0', Key.KeypadEnd, ModifierKey.None)] [DataRow(PdCursesKeyCode.PageDown, '\\0', Key.KeypadPageDown, ModifierKey.None)] [DataRow(PdCursesKeyCode.PageUp, '\\0', Key.KeypadPageUp, ModifierKey.None)] [DataRow(PdCursesKeyCode.Delete, '\\0', Key.Delete, ModifierKey.None)] [DataRow(PdCursesKeyCode.Insert, '\\0', Key.Insert, ModifierKey.None)] [DataRow(PdCursesKeyCode.BackTab, '\\0', Key.Tab, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.Backspace, '\\0', Key.Backspace, ModifierKey.None)] [DataRow(PdCursesKeyCode.ShiftUp, '\\0', Key.KeypadUp, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftDown, '\\0', Key.KeypadDown, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftLeft, '\\0', Key.KeypadLeft, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftRight, '\\0', Key.KeypadRight, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftHome, '\\0', Key.KeypadHome, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.ShiftEnd, '\\0', Key.KeypadEnd, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.AltUp, '\\0', Key.KeypadUp, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltDown, '\\0', Key.KeypadDown, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltLeft, '\\0', Key.KeypadLeft, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltRight, '\\0', Key.KeypadRight, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltHome, '\\0', Key.KeypadHome, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltEnd, '\\0', Key.KeypadEnd, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltPageUp, '\\0', Key.KeypadPageUp, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.CtrlUp, '\\0', Key.KeypadUp, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlDown, '\\0', Key.KeypadDown, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlLeft, '\\0', Key.KeypadLeft, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlRight, '\\0', Key.KeypadRight, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlHome, '\\0', Key.KeypadHome, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlEnd, '\\0', Key.KeypadEnd, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlPageDown, '\\0', Key.KeypadPageDown, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.CtrlPageUp, '\\0', Key.KeypadPageUp, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.ScrollDown, '\\0', Key.KeypadPageDown, ModifierKey.None)] [DataRow(PdCursesKeyCode.ScrollUp, '\\0', Key.KeypadPageUp, ModifierKey.None)] [DataRow(PdCursesKeyCode.Alt0, '0', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Alt1, '1', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Alt2, '2', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Alt3, '3', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Alt4, '4', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Alt5, '5', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Alt6, '6', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Alt7, '7', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Alt8, '8', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.Alt9, '9', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltA, 'A', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltB, 'B', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltC, 'C', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltD, 'D', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltE, 'E', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltF, 'F', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltG, 'G', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltH, 'H', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltI, 'I', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltJ, 'J', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltK, 'K', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltL, 'L', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltM, 'M', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltN, 'N', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltO, 'O', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltP, 'P', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltQ, 'Q', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltR, 'R', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltS, 'S', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltT, 'T', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltU, 'U', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltV, 'V', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltW, 'W', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltX, 'X', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltY, 'Y', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltZ, 'Z', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeypadSlash, '/', Key.Character, ModifierKey.None)] [DataRow(PdCursesKeyCode.KeypadEnter, '\\n', Key.Character, ModifierKey.None)] [DataRow(PdCursesKeyCode.KeypadCtrlEnter, '\\n', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeypadAltEnter, '\\n', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeypadStop, '\\0', Key.KeypadHome, ModifierKey.None)] [DataRow(PdCursesKeyCode.KeypadAsterisk, '*', Key.Character, ModifierKey.None)] [DataRow(PdCursesKeyCode.KeypadMinus, '-', Key.Character, ModifierKey.None)] [DataRow(PdCursesKeyCode.KeypadPlus, '+', Key.Character, ModifierKey.None)] [DataRow(PdCursesKeyCode.KeypadCtrlStop, '\\0', Key.KeypadHome, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeypadCtrlMiddle, '5', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeypadCtrlPlus, '+', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeypadCtrlMinus, '-', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeypadCtrlSlash, '/', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeypadCtrlAsterisk, '*', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeypadAltPlus, '+', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeypadAltMinus, '-', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeypadAltSlash, '/', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeypadAltAsterisk, '*', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeypadAltStop, '\\0', Key.KeypadHome, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.CtrlInsert, '\\0', Key.Insert, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.AltDelete, '\\0', Key.Delete, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltInsert, '\\0', Key.Insert, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.CtrlTab, '\\0', Key.Tab, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.AltTab, '\\0', Key.Tab, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltMinus, '-', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltEqual, '=', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltPageDown, '+', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltEnter, '\\n', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltEscape, '\\0', Key.Escape, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltBackQuote, '\\'', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltLeftBracket, '(', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltRightBracket, ')', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltSemicolon, ';', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltForwardQuote, '`', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltComma, ',', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltStop, '\\0', Key.KeypadHome, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltForwardSlash, '\\\\', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.AltBackspace, '\\0', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.CtrlBackspace, '\\0', Key.Backspace, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPad0, '0', Key.Character, ModifierKey.None)] [DataRow(PdCursesKeyCode.KeyPadCtrl0, '0', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadCtrl1, '1', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadCtrl2, '2', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadCtrl3, '3', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadCtrl4, '4', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadCtrl5, '5', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadCtrl6, '6', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadCtrl7, '7', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadCtrl8, '8', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadCtrl9, '9', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadAlt0, '0', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeyPadAlt1, '1', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeyPadAlt2, '2', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeyPadAlt3, '3', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeyPadAlt4, '4', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeyPadAlt5, '5', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeyPadAlt6, '6', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeyPadAlt7, '7', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeyPadAlt8, '8', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.KeyPadAlt9, '9', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.CtrlDelete, '\\0', Key.Delete, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.AltBackSlash, '\\\\', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.CtrlEnter, '\\n', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.KeyPadShiftEnter, '\\n', Key.Character, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.KeyPadShiftPlus, '+', Key.Character, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.KeyPadShiftMinus, '-', Key.Character, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.KeyPadShiftSlash, '/', Key.Character, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.KeyPadShiftAsterisk, '*', Key.Character, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.KeyPadShiftUp, '\\0', Key.KeypadUp, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.KeyPadShiftDown, '\\0', Key.KeypadDown, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.KeyPadShiftInsert, '\\0', Key.Insert, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.KeyPadShiftDelete, '\\0', Key.Delete, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.LeftShift, '\\0', Key.Character, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.RightShift, '\\0', Key.Character, ModifierKey.Shift)] [DataRow(PdCursesKeyCode.LeftCtrl, '\\0', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.RightCtrl, '\\0', Key.Character, ModifierKey.Ctrl)] [DataRow(PdCursesKeyCode.LeftAlt, '\\0', Key.Character, ModifierKey.Alt)] [DataRow(PdCursesKeyCode.RightAlt, '\\0', Key.Character, ModifierKey.Alt)] [DataRow(9999, '\\0', Key.Unknown, ModifierKey.None)] public void DecodeRawKey_DecodesProperly(uint rawKey, char chr, Key expKey, ModifierKey expMod) Parameters rawKey uint chr char expKey Key expMod ModifierKey EncodeCursesAttribute_WorksAsExpected(VideoAttribute, int) [TestMethod] [DataRow(VideoAttribute.None, 0)] [DataRow(VideoAttribute.StandOut, 10485760)] [DataRow(VideoAttribute.Underline, 1048576)] [DataRow(VideoAttribute.Reverse, 2097152)] [DataRow(VideoAttribute.Blink, 4194304)] [DataRow(VideoAttribute.Dim, 0)] [DataRow(VideoAttribute.Bold, 8388608)] [DataRow(VideoAttribute.AltCharset, 65536)] [DataRow(VideoAttribute.Invisible, 0)] [DataRow(VideoAttribute.Protect, 0)] [DataRow(VideoAttribute.HorizontalHighlight, 0)] [DataRow(VideoAttribute.LeftHighlight, 262144)] [DataRow(VideoAttribute.LowHighlight, 0)] [DataRow(VideoAttribute.LowHighlight, 0)] [DataRow(VideoAttribute.RightHighlight, 131072)] [DataRow(VideoAttribute.TopHighlight, 0)] [DataRow(VideoAttribute.VerticalHighlight, 0)] [DataRow(VideoAttribute.Italic, 524288)] [DataRow(VideoAttribute.Bold|VideoAttribute.AltCharset, 8454144)] public void EncodeCursesAttribute_WorksAsExpected(VideoAttribute attr, int exp) Parameters attr VideoAttribute exp int TestInitialize() [TestInitialize] public void TestInitialize() endwin_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void endwin_IsRelayedToLibrary(int ret) Parameters ret int getcchar_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void getcchar_IsRelayedToLibrary(int ret) Parameters ret int getcchar_Throws_IfCharIsIncompatible() [TestMethod] public void getcchar_Throws_IfCharIsIncompatible() getcchar_Throws_IfCharIsNull() [TestMethod] public void getcchar_Throws_IfCharIsNull() getmouse_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void getmouse_IsRelayedToLibrary(int ret) Parameters ret int is_immedok_IsRelayedToLibrary(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void is_immedok_IsRelayedToLibrary(bool ret) Parameters ret bool is_scrollok_IsRelayedToLibrary(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void is_scrollok_IsRelayedToLibrary(bool ret) Parameters ret bool setcchar_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void setcchar_IsRelayedToLibrary(int ret) Parameters ret int slk_attr_IsRelayedToLibrary_1() [TestMethod] public void slk_attr_IsRelayedToLibrary_1() slk_attr_IsRelayedToLibrary_2() [TestMethod] public void slk_attr_IsRelayedToLibrary_2() slk_attr_off_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_attr_off_IsRelayedToLibrary(int ret) Parameters ret int slk_attr_on_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_attr_on_IsRelayedToLibrary(int ret) Parameters ret int slk_attr_set_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_attr_set_IsRelayedToLibrary(int ret) Parameters ret int slk_clear_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_clear_IsRelayedToLibrary(int ret) Parameters ret int slk_color_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_color_IsRelayedToLibrary(int ret) Parameters ret int slk_init_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_init_IsRelayedToLibrary(int ret) Parameters ret int slk_noutrefresh_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_noutrefresh_IsRelayedToLibrary(int ret) Parameters ret int slk_refresh_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_refresh_IsRelayedToLibrary(int ret) Parameters ret int slk_restore_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_restore_IsRelayedToLibrary(int ret) Parameters ret int slk_set_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_set_IsRelayedToLibrary(int ret) Parameters ret int slk_touch_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void slk_touch_IsRelayedToLibrary(int ret) Parameters ret int wadd_wch_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wadd_wch_IsRelayedToLibrary(int ret) Parameters ret int wadd_wch_Throws_IfCharIsIncompatible() [TestMethod] public void wadd_wch_Throws_IfCharIsIncompatible() wadd_wch_Throws_IfCharIsNull() [TestMethod] public void wadd_wch_Throws_IfCharIsNull() wbkgrnd_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wbkgrnd_IsRelayedToLibrary(int ret) Parameters ret int wbkgrnd_Throws_IfCharIsIncompatible() [TestMethod] public void wbkgrnd_Throws_IfCharIsIncompatible() wbkgrnd_Throws_IfCharIsNull() [TestMethod] public void wbkgrnd_Throws_IfCharIsNull() wborder_set_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wborder_set_IsRelayedToLibrary(int ret) Parameters ret int wborder_set_Throws_IfCharIsIncompatible(int) [TestMethod] [DataRow(0)] [DataRow(1)] [DataRow(2)] [DataRow(3)] [DataRow(4)] [DataRow(5)] [DataRow(6)] [DataRow(7)] public void wborder_set_Throws_IfCharIsIncompatible(int bad) Parameters bad int wborder_set_Throws_IfCharIsNull(int) [TestMethod] [DataRow(0)] [DataRow(1)] [DataRow(2)] [DataRow(3)] [DataRow(4)] [DataRow(5)] [DataRow(6)] [DataRow(7)] public void wborder_set_Throws_IfCharIsNull(int bad) Parameters bad int wgetbkgrnd_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wgetbkgrnd_IsRelayedToLibrary(int ret) Parameters ret int wgetbkgrnd_Throws_IfCharIsIncompatible() [TestMethod] public void wgetbkgrnd_Throws_IfCharIsIncompatible() wgetbkgrnd_Throws_IfCharIsNull() [TestMethod] public void wgetbkgrnd_Throws_IfCharIsNull() whline_set_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void whline_set_IsRelayedToLibrary(int ret) Parameters ret int whline_set_Throws_IfCharIsIncompatible() [TestMethod] public void whline_set_Throws_IfCharIsIncompatible() whline_set_Throws_IfCharIsNull() [TestMethod] public void whline_set_Throws_IfCharIsNull() win_wch_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void win_wch_IsRelayedToLibrary(int ret) Parameters ret int wvline_set_IsRelayedToLibrary(int) [TestMethod] [DataRow(0)] [DataRow(-1)] public void wvline_set_IsRelayedToLibrary(int ret) Parameters ret int wvline_set_Throws_IfCharIsIncompatible() [TestMethod] public void wvline_set_Throws_IfCharIsIncompatible() wvline_set_Throws_IfCharIsNull() [TestMethod] public void wvline_set_Throws_IfCharIsNull()"
  },
  "api/Sharpie.Tests.ScreenTests.html": {
    "href": "api/Sharpie.Tests.ScreenTests.html",
    "title": "Class ScreenTests | sharpie",
    "summary": "Class ScreenTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class ScreenTests Inheritance object ScreenTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TestContext [UsedImplicitly] public TestContext TestContext { get; set; } Property Value TestContext Methods AdjustToExplicitArea_AdjustsEachChild() [TestMethod] public void AdjustToExplicitArea_AdjustsEachChild() Ctor_ConfiguresWindow_InCurses() [TestMethod] public void Ctor_ConfiguresWindow_InCurses() Ctor_Throws_IfConfigureWindow_FailsInCurses_1() [TestMethod] public void Ctor_Throws_IfConfigureWindow_FailsInCurses_1() Ctor_Throws_IfTerminalIsNull() [TestMethod] public void Ctor_Throws_IfTerminalIsNull() Destroy_CallsCurses() [TestMethod] public void Destroy_CallsCurses() Destroy_DestroysChildren() [TestMethod] public void Destroy_DestroysChildren() ManagedWindows_WhenManaged_IsTrue() [TestMethod] public void ManagedWindows_WhenManaged_IsTrue() ManagedWindows_WhenUnmanaged_IsFalse() [TestMethod] public void ManagedWindows_WhenUnmanaged_IsFalse() MarkDirty_WhenManaged_PropagatesOnChildren() [TestMethod] public void MarkDirty_WhenManaged_PropagatesOnChildren() MarkDirty_WhenUnmanaged_OnlyMarksScreenAsDirty() [TestMethod] public void MarkDirty_WhenUnmanaged_OnlyMarksScreenAsDirty() Pad_PreservesManagedCaret(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void Pad_PreservesManagedCaret(bool mc) Parameters mc bool Pad_ReturnsNewPad_IfCursesSucceeds() [TestMethod] public void Pad_ReturnsNewPad_IfCursesSucceeds() Pad_Throws_IfCursesFails() [TestMethod] public void Pad_Throws_IfCursesFails() Pad_Throws_IfHeightLessThanOne() [TestMethod] public void Pad_Throws_IfHeightLessThanOne() Pad_Throws_IfWidthLessThanOne() [TestMethod] public void Pad_Throws_IfWidthLessThanOne() Pads_ContainsTheChild_WhenPassedAsParent() [TestMethod] public void Pads_ContainsTheChild_WhenPassedAsParent() Pads_DoesNotContainTheChild_WhenChildDestroyed() [TestMethod] public void Pads_DoesNotContainTheChild_WhenChildDestroyed() Pads_IsEmpty_WhenCreated() [TestMethod] public void Pads_IsEmpty_WhenCreated() Pads_Throws_IfScreenIsDestroyed() [TestMethod] public void Pads_Throws_IfScreenIsDestroyed() Refresh1_WhenManaged_RefreshesAllWindows_InBatch() [TestMethod] public void Refresh1_WhenManaged_RefreshesAllWindows_InBatch() Refresh1_WhenManaged_RefreshesAllWindows_NoBatch() [TestMethod] public void Refresh1_WhenManaged_RefreshesAllWindows_NoBatch() Refresh2_WhenManaged_PropagatesOnChildren() [TestMethod] public void Refresh2_WhenManaged_PropagatesOnChildren() Refresh2_WhenUnmanaged_OnlyRefreshesTheScreen() [TestMethod] public void Refresh2_WhenUnmanaged_OnlyRefreshesTheScreen() Refresh_Fails_IfCursesFails() [TestMethod] public void Refresh_Fails_IfCursesFails() Refresh_Succeeds_IfCursesSucceeds() [TestMethod] public void Refresh_Succeeds_IfCursesSucceeds() Terminal_IsInitialized() [TestMethod] public void Terminal_IsInitialized() TestCleanup() [TestCleanup] public void TestCleanup() TestInitialize() [TestInitialize] public void TestInitialize() ToString_ReturnsFormattedRepresentation() [TestMethod] public void ToString_ReturnsFormattedRepresentation() Window_AdjustsArea_ToMatchParent() [TestMethod] public void Window_AdjustsArea_ToMatchParent() Window_PreservesManagedCaret(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void Window_PreservesManagedCaret(bool mc) Parameters mc bool Window_ReturnsNewWindow_IfCursesSucceeds() [TestMethod] public void Window_ReturnsNewWindow_IfCursesSucceeds() Window_Throws_IfAdjustedAreaIsEmpty() [TestMethod] public void Window_Throws_IfAdjustedAreaIsEmpty() Window_Throws_IfCursesFails() [TestMethod] public void Window_Throws_IfCursesFails() Windows_ContainsTheChild_WhenPassedAsParent() [TestMethod] public void Windows_ContainsTheChild_WhenPassedAsParent() Windows_DoesNotContainTheChild_WhenChildDestroyed() [TestMethod] public void Windows_DoesNotContainTheChild_WhenChildDestroyed() Windows_IsEmpty_WhenCreated() [TestMethod] public void Windows_IsEmpty_WhenCreated() Windows_Throws_IfScreenIsDestroyed() [TestMethod] public void Windows_Throws_IfScreenIsDestroyed()"
  },
  "api/Sharpie.Tests.SoftLabelKeyManagerTests.html": {
    "href": "api/Sharpie.Tests.SoftLabelKeyManagerTests.html",
    "title": "Class SoftLabelKeyManagerTests | sharpie",
    "summary": "Class SoftLabelKeyManagerTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class SoftLabelKeyManagerTests Inheritance object SoftLabelKeyManagerTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Clear_Succeeds_IfCursesSucceeds() [TestMethod] public void Clear_Succeeds_IfCursesSucceeds() Clear_Throws_IfCursesFails() [TestMethod] public void Clear_Throws_IfCursesFails() Clear_Throws_IfNotEnabled() [TestMethod] public void Clear_Throws_IfNotEnabled() ColorMixtureGet_ReturnsStyle_FromCurses() [TestMethod] public void ColorMixtureGet_ReturnsStyle_FromCurses() ColorMixtureGet_Throws_IfCursesFails() [TestMethod] public void ColorMixtureGet_Throws_IfCursesFails() ColorMixtureSet_Succeeds_IfCursesSucceeds() [TestMethod] public void ColorMixtureSet_Succeeds_IfCursesSucceeds() ColorMixtureSet_Throws_IfCursesFails() [TestMethod] public void ColorMixtureSet_Throws_IfCursesFails() ColorMixture_Throws_IfNotEnabled() [TestMethod] public void ColorMixture_Throws_IfNotEnabled() Ctor_Throws_IfCursesIsNull() [TestMethod] public void Ctor_Throws_IfCursesIsNull() DisableAttributes_Succeeds_IfCursesSucceeds() [TestMethod] public void DisableAttributes_Succeeds_IfCursesSucceeds() DisableAttributes_Throws_IfCursesFails() [TestMethod] public void DisableAttributes_Throws_IfCursesFails() DisableAttributes_Throws_IfNotEnabled() [TestMethod] public void DisableAttributes_Throws_IfNotEnabled() EnableAttributes_Succeeds_IfCursesSucceeds() [TestMethod] public void EnableAttributes_Succeeds_IfCursesSucceeds() EnableAttributes_Throws_IfCursesFails() [TestMethod] public void EnableAttributes_Throws_IfCursesFails() EnableAttributes_Throws_IfNotEnabled() [TestMethod] public void EnableAttributes_Throws_IfNotEnabled() Enabled_IsFalse_IfModeIsDisabled() [TestMethod] public void Enabled_IsFalse_IfModeIsDisabled() Enabled_IsTrue_IfModeIsNotDisabled() [TestMethod] public void Enabled_IsTrue_IfModeIsNotDisabled() LabelCount_ReturnsTheCorrectNumberBasedOnMode(SoftLabelKeyMode, int) [TestMethod] [DataRow(SoftLabelKeyMode.FourFour, 8)] [DataRow(SoftLabelKeyMode.FourFourFour, 12)] [DataRow(SoftLabelKeyMode.ThreeTwoThree, 8)] [DataRow(SoftLabelKeyMode.FourFourFourWithIndex, 12)] public void LabelCount_ReturnsTheCorrectNumberBasedOnMode(SoftLabelKeyMode mode, int expected) Parameters mode SoftLabelKeyMode expected int LabelCount_Throws_IfNotEnabled() [TestMethod] public void LabelCount_Throws_IfNotEnabled() MarkDirty_Succeeds_IfCursesSucceeds() [TestMethod] public void MarkDirty_Succeeds_IfCursesSucceeds() MarkDirty_Throws_IfCursesFails() [TestMethod] public void MarkDirty_Throws_IfCursesFails() MarkDirty_Throws_IfNotEnabled() [TestMethod] public void MarkDirty_Throws_IfNotEnabled() Refresh_Succeeds_IfCursesSucceeds_InBatch() [TestMethod] public void Refresh_Succeeds_IfCursesSucceeds_InBatch() Refresh_Succeeds_IfCursesSucceeds_NoBatch() [TestMethod] public void Refresh_Succeeds_IfCursesSucceeds_NoBatch() Refresh_Throws_IfCursesFails_InBatch() [TestMethod] public void Refresh_Throws_IfCursesFails_InBatch() Refresh_Throws_IfCursesFails_NoQueue() [TestMethod] public void Refresh_Throws_IfCursesFails_NoQueue() Refresh_Throws_IfNotEnabled() [TestMethod] public void Refresh_Throws_IfNotEnabled() Restore_Succeeds_IfCursesSucceeds() [TestMethod] public void Restore_Succeeds_IfCursesSucceeds() Restore_Throws_IfCursesFails() [TestMethod] public void Restore_Throws_IfCursesFails() Restore_Throws_IfNotEnabled() [TestMethod] public void Restore_Throws_IfNotEnabled() SetLabel_Succeeds_IfCursesSucceeds() [TestMethod] public void SetLabel_Succeeds_IfCursesSucceeds() SetLabel_Throws_IfCursesFails() [TestMethod] public void SetLabel_Throws_IfCursesFails() SetLabel_Throws_IfIndexIsInvalid() [TestMethod] public void SetLabel_Throws_IfIndexIsInvalid() SetLabel_Throws_IfNotEnabled() [TestMethod] public void SetLabel_Throws_IfNotEnabled() SetLabel_Throws_IfTitleIsNull() [TestMethod] public void SetLabel_Throws_IfTitleIsNull() StyleGet_ReturnsStyle_FromCurses() [TestMethod] public void StyleGet_ReturnsStyle_FromCurses() StyleGet_Throws_IfCursesFails() [TestMethod] public void StyleGet_Throws_IfCursesFails() StyleSet_CallsCurses() [TestMethod] public void StyleSet_CallsCurses() StyleSet_Throws_IfCursesFails() [TestMethod] public void StyleSet_Throws_IfCursesFails() Style_Throws_IfNotEnabled() [TestMethod] public void Style_Throws_IfNotEnabled() Terminal_IsInitialized() [TestMethod] public void Terminal_IsInitialized() TestCleanup() [TestCleanup] public void TestCleanup() TestInitialize() [TestInitialize] public void TestInitialize()"
  },
  "api/Sharpie.Tests.StartEventTests.html": {
    "href": "api/Sharpie.Tests.StartEventTests.html",
    "title": "Class StartEventTests | sharpie",
    "summary": "Class StartEventTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class StartEventTests Inheritance object StartEventTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_InitializesPropertiesCorrectly() [TestMethod] public void Ctor_InitializesPropertiesCorrectly() Equals_ReturnsFalse_IfNotSameType(object?) [TestMethod] [DataRow(null)] [DataRow(\"\")] public void Equals_ReturnsFalse_IfNotSameType(object? b) Parameters b object Equals_ReturnsTrue_IfSameType() [TestMethod] public void Equals_ReturnsTrue_IfSameType() GetHashCode_IsEqual_Always() [TestMethod] public void GetHashCode_IsEqual_Always() ToString_ProperlyFormats() [TestMethod] public void ToString_ProperlyFormats()"
  },
  "api/Sharpie.Tests.StopEventTests.html": {
    "href": "api/Sharpie.Tests.StopEventTests.html",
    "title": "Class StopEventTests | sharpie",
    "summary": "Class StopEventTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class StopEventTests Inheritance object StopEventTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_InitializesPropertiesCorrectly() [TestMethod] public void Ctor_InitializesPropertiesCorrectly() Equals_ReturnsFalse_IfNotSameType(object?) [TestMethod] [DataRow(null)] [DataRow(\"\")] public void Equals_ReturnsFalse_IfNotSameType(object? b) Parameters b object Equals_ReturnsTrue_IfSameType() [TestMethod] public void Equals_ReturnsTrue_IfSameType() GetHashCode_IsEqual_Always() [TestMethod] public void GetHashCode_IsEqual_Always() ToString_ProperlyFormats() [TestMethod] public void ToString_ProperlyFormats()"
  },
  "api/Sharpie.Tests.StyleTests.html": {
    "href": "api/Sharpie.Tests.StyleTests.html",
    "title": "Class StyleTests | sharpie",
    "summary": "Class StyleTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class StyleTests Inheritance object StyleTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_StoresTheProperties() [TestMethod] public void Ctor_StoresTheProperties() Default_HasValues() [TestMethod] public void Default_HasValues() EqualOperator_ReturnsFalse_IfNotEqual() [TestMethod] public void EqualOperator_ReturnsFalse_IfNotEqual() EqualOperator_ReturnsTrue_IfEqual() [TestMethod] public void EqualOperator_ReturnsTrue_IfEqual() Equals_ReturnsFalse_IfDifferentColorMixtures() [TestMethod] public void Equals_ReturnsFalse_IfDifferentColorMixtures() Equals_ReturnsFalse_IfDifferentVideoAttributes() [TestMethod] public void Equals_ReturnsFalse_IfDifferentVideoAttributes() Equals_ReturnsFalse_IfNotStyle(object?) [TestMethod] [DataRow(null)] [DataRow(\"\")] public void Equals_ReturnsFalse_IfNotStyle(object? b) Parameters b object Equals_ReturnsTrue_IfAllPropertiesAreSame() [TestMethod] public void Equals_ReturnsTrue_IfAllPropertiesAreSame() GetHashCode_IsDifferent_ForDifferentAttributes() [TestMethod] public void GetHashCode_IsDifferent_ForDifferentAttributes() GetHashCode_IsDifferent_ForDifferentColorMixtures() [TestMethod] public void GetHashCode_IsDifferent_ForDifferentColorMixtures() GetHashCode_IsTheSame_IfAllPropertiesAreSame() [TestMethod] public void GetHashCode_IsTheSame_IfAllPropertiesAreSame() NotEqualOperator_ReturnsFalse_IfEqual() [TestMethod] public void NotEqualOperator_ReturnsFalse_IfEqual() NotEqualOperator_ReturnsTrue_IfDifferent() [TestMethod] public void NotEqualOperator_ReturnsTrue_IfDifferent() ToString_ProperlyFormats() [TestMethod] public void ToString_ProperlyFormats()"
  },
  "api/Sharpie.Tests.StyledTextTests.html": {
    "href": "api/Sharpie.Tests.StyledTextTests.html",
    "title": "Class StyledTextTests | sharpie",
    "summary": "Class StyledTextTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class StyledTextTests Inheritance object StyledTextTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_StoresTheTextAndStyle() [TestMethod] public void Ctor_StoresTheTextAndStyle() Ctor_Throws_IfTextIsNull() [TestMethod] public void Ctor_Throws_IfTextIsNull() EqualOperator_ReturnsFalse_IfNotEqual() [TestMethod] public void EqualOperator_ReturnsFalse_IfNotEqual() EqualOperator_ReturnsTrue_IfEqual() [TestMethod] public void EqualOperator_ReturnsTrue_IfEqual() Equals_ReturnsFalse_IfDifferentParts() [TestMethod] public void Equals_ReturnsFalse_IfDifferentParts() Equals_ReturnsFalse_IfLengthsAreDifferent() [TestMethod] public void Equals_ReturnsFalse_IfLengthsAreDifferent() Equals_ReturnsFalse_IfLhsNotInitialized() [TestMethod] public void Equals_ReturnsFalse_IfLhsNotInitialized() Equals_ReturnsFalse_IfNotSameObjectType(object?) [TestMethod] [DataRow(null)] [DataRow(\"\")] public void Equals_ReturnsFalse_IfNotSameObjectType(object? b) Parameters b object Equals_ReturnsFalse_IfRhsNotInitialized() [TestMethod] public void Equals_ReturnsFalse_IfRhsNotInitialized() Equals_ReturnsTrue_IfAllPropertiesAreSame() [TestMethod] public void Equals_ReturnsTrue_IfAllPropertiesAreSame() Equals_ReturnsTrue_IfBothAreNotInitialized() [TestMethod] public void Equals_ReturnsTrue_IfBothAreNotInitialized() GetHashCode_IsDifferent_WhenPartsAreDifferent() [TestMethod] public void GetHashCode_IsDifferent_WhenPartsAreDifferent() GetHashCode_IsDifferent_WhenSomePartsAreDifferent() [TestMethod] public void GetHashCode_IsDifferent_WhenSomePartsAreDifferent() GetHashCode_IsTheSame_WhenPartsAreEqual() [TestMethod] public void GetHashCode_IsTheSame_WhenPartsAreEqual() GetHashCode_IsZeroWhenNotInitialized() [TestMethod] public void GetHashCode_IsZeroWhenNotInitialized() NotEqualOperator_ReturnsFalse_IfEqual() [TestMethod] public void NotEqualOperator_ReturnsFalse_IfEqual() NotEqualOperator_ReturnsTrue_IfDifferent() [TestMethod] public void NotEqualOperator_ReturnsTrue_IfDifferent() Plus1_ConcatenatesWithOtherText() [TestMethod] public void Plus1_ConcatenatesWithOtherText() Plus1_Throws_IfTextIsNull() [TestMethod] public void Plus1_Throws_IfTextIsNull() Plus1_UsesOtherText_IfThisIsUninitialized() [TestMethod] public void Plus1_UsesOtherText_IfThisIsUninitialized() Plus2_ConcatenatesWithOtherText() [TestMethod] public void Plus2_ConcatenatesWithOtherText() Plus2_UsesOtherText_IfThisIsUninitialized() [TestMethod] public void Plus2_UsesOtherText_IfThisIsUninitialized() Plus2_UsesThisText_IfOtherIsUninitialized() [TestMethod] public void Plus2_UsesThisText_IfOtherIsUninitialized() PlusOperator_Concatenates() [TestMethod] public void PlusOperator_Concatenates() ToString_ProperlyFormats() [TestMethod] public void ToString_ProperlyFormats() ToString_ReturnsNullIfUninitialized() [TestMethod] public void ToString_ReturnsNullIfUninitialized()"
  },
  "api/Sharpie.Tests.SubPadTests.html": {
    "href": "api/Sharpie.Tests.SubPadTests.html",
    "title": "Class SubPadTests | sharpie",
    "summary": "Class SubPadTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class SubPadTests Inheritance object SubPadTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_Throws_IfScreenIsNull() [TestMethod] public void Ctor_Throws_IfScreenIsNull() Destroy_CallsCurses() [TestMethod] public void Destroy_CallsCurses() Destroy_RemovesWindowFromParent() [TestMethod] public void Destroy_RemovesWindowFromParent() Duplicate_PreservesManagedCaret(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void Duplicate_PreservesManagedCaret(bool mc) Parameters mc bool Duplicate_ReturnsNewPad_IfCursesSucceeds() [TestMethod] public void Duplicate_ReturnsNewPad_IfCursesSucceeds() Duplicate_Throws_IfCursesFails() [TestMethod] public void Duplicate_Throws_IfCursesFails() Location_Get_Returns_IfCursesSucceeded() [TestMethod] public void Location_Get_Returns_IfCursesSucceeded() Location_Get_Throws_IfCursesFails_1() [TestMethod] public void Location_Get_Throws_IfCursesFails_1() Location_Get_Throws_IfCursesFails_2() [TestMethod] public void Location_Get_Throws_IfCursesFails_2() Location_Set_SetsValue_IfCursesSucceeded() [TestMethod] public void Location_Set_SetsValue_IfCursesSucceeded() Location_Set_Throws_IfCursesFails() [TestMethod] public void Location_Set_Throws_IfCursesFails() Location_Set_Throws_IfOutsideParent() [TestMethod] public void Location_Set_Throws_IfOutsideParent() Location_Set_UpdatesLocation_IfInsideParent() [TestMethod] public void Location_Set_UpdatesLocation_IfInsideParent() Origin_Calls_Location() [TestMethod] public void Origin_Calls_Location() Pad_IsInitialized() [TestMethod] public void Pad_IsInitialized() Size_Set_AdjustsSizeToMatchParent() [TestMethod] public void Size_Set_AdjustsSizeToMatchParent() Size_Set_SetsValue_IfCursesSucceeded() [TestMethod] public void Size_Set_SetsValue_IfCursesSucceeded() Size_Set_Throws_AdjustedAreaIsEmpty() [TestMethod] public void Size_Set_Throws_AdjustedAreaIsEmpty() Size_Set_Throws_IfCursesFails() [TestMethod] public void Size_Set_Throws_IfCursesFails() Size_Set_UpdatesSize_IfInsideParent() [TestMethod] public void Size_Set_UpdatesSize_IfInsideParent() TestCleanup() [TestCleanup] public void TestCleanup() TestInitialize() [TestInitialize] public void TestInitialize() ToString_ReturnsFormattedRepresentation() [TestMethod] public void ToString_ReturnsFormattedRepresentation()"
  },
  "api/Sharpie.Tests.SubWindowTests.html": {
    "href": "api/Sharpie.Tests.SubWindowTests.html",
    "title": "Class SubWindowTests | sharpie",
    "summary": "Class SubWindowTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class SubWindowTests Inheritance object SubWindowTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_ConfiguresWindow_InCurses() [TestMethod] public void Ctor_ConfiguresWindow_InCurses() Ctor_RegistersItselfIntoParent() [TestMethod] public void Ctor_RegistersItselfIntoParent() Ctor_Throws_IfScreenIsNull() [TestMethod] public void Ctor_Throws_IfScreenIsNull() Destroy_CallsCurses() [TestMethod] public void Destroy_CallsCurses() Destroy_RemovesWindowFromParent() [TestMethod] public void Destroy_RemovesWindowFromParent() Duplicate_PreservesManagedCaret(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void Duplicate_PreservesManagedCaret(bool mc) Parameters mc bool Duplicate_ReturnsNewWindow_IfCursesSucceeds() [TestMethod] public void Duplicate_ReturnsNewWindow_IfCursesSucceeds() Duplicate_Throws_IfCursesFails() [TestMethod] public void Duplicate_Throws_IfCursesFails() Location_Get_Returns_IfCursesSucceeded() [TestMethod] public void Location_Get_Returns_IfCursesSucceeded() Location_Get_Throws_IfCursesFails_1() [TestMethod] public void Location_Get_Throws_IfCursesFails_1() Location_Get_Throws_IfCursesFails_2() [TestMethod] public void Location_Get_Throws_IfCursesFails_2() Location_Set_SetsValue_IfCursesSucceeded() [TestMethod] public void Location_Set_SetsValue_IfCursesSucceeded() Location_Set_Throws_IfCursesFails() [TestMethod] public void Location_Set_Throws_IfCursesFails() Location_Set_Throws_IfOutsideParent() [TestMethod] public void Location_Set_Throws_IfOutsideParent() Location_Set_UpdatesLocation_IfInsideParent() [TestMethod] public void Location_Set_UpdatesLocation_IfInsideParent() Origin_Calls_Location() [TestMethod] public void Origin_Calls_Location() Size_Set_AdjustsSizeToMatchParent() [TestMethod] public void Size_Set_AdjustsSizeToMatchParent() Size_Set_SetsValue_IfCursesSucceeded() [TestMethod] public void Size_Set_SetsValue_IfCursesSucceeded() Size_Set_Throws_AdjustedAreaIsEmpty() [TestMethod] public void Size_Set_Throws_AdjustedAreaIsEmpty() Size_Set_Throws_IfCursesFails() [TestMethod] public void Size_Set_Throws_IfCursesFails() Size_Set_UpdatesSize_IfInsideParent() [TestMethod] public void Size_Set_UpdatesSize_IfInsideParent() TestCleanup() [TestCleanup] public void TestCleanup() TestInitialize() [TestInitialize] public void TestInitialize() ToString_ReturnsFormattedRepresentation() [TestMethod] public void ToString_ReturnsFormattedRepresentation() Window_IsInitialized() [TestMethod] public void Window_IsInitialized()"
  },
  "api/Sharpie.Tests.SurfaceDrawTextTests.html": {
    "href": "api/Sharpie.Tests.SurfaceDrawTextTests.html",
    "title": "Class SurfaceDrawTextTests | sharpie",
    "summary": "Class SurfaceDrawTextTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class SurfaceDrawTextTests Inheritance object SurfaceDrawTextTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DrawText1_AsksFontForGlyphs() [TestMethod] public void DrawText1_AsksFontForGlyphs() DrawText1_DoesNothing_IfTextIsEmpty() [TestMethod] public void DrawText1_DoesNothing_IfTextIsEmpty() DrawText1_Ltr_DoesNotProcessNewLine_IfAsked() [TestMethod] public void DrawText1_Ltr_DoesNotProcessNewLine_IfAsked() DrawText1_Ltr_DrawsFromTopSmallerArea_IfNotScrollableAndNotEnoughSpaceForHeight() [TestMethod] public void DrawText1_Ltr_DrawsFromTopSmallerArea_IfNotScrollableAndNotEnoughSpaceForHeight() DrawText1_Ltr_LeavesTheCaretAfterTheDrawnGlyph_IfFits() [TestMethod] public void DrawText1_Ltr_LeavesTheCaretAfterTheDrawnGlyph_IfFits() DrawText1_Ltr_LeavesTheCaretAtEndOfDrawnGlyph_IfNotFits() [TestMethod] public void DrawText1_Ltr_LeavesTheCaretAtEndOfDrawnGlyph_IfNotFits() DrawText1_Ltr_ProcessesNewLine_IfAsked() [TestMethod] public void DrawText1_Ltr_ProcessesNewLine_IfAsked() DrawText1_Ltr_ScrollsUpToZero_IfScrollableAndNotEnoughSpaceForHeight() [TestMethod] public void DrawText1_Ltr_ScrollsUpToZero_IfScrollableAndNotEnoughSpaceForHeight() DrawText1_Ltr_ScrollsUp_IfWrappingAndScrollable() [TestMethod] public void DrawText1_Ltr_ScrollsUp_IfWrappingAndScrollable() DrawText1_Ltr_WhenEnoughSpaceOnXForOneCharOnlyAndNotWrapping_DrawsOnlyOne() [TestMethod] public void DrawText1_Ltr_WhenEnoughSpaceOnXForOneCharOnlyAndNotWrapping_DrawsOnlyOne() DrawText1_Ltr_WhenEnoughSpace_DrawsOnGlyphsAtExpectedLocation() [TestMethod] public void DrawText1_Ltr_WhenEnoughSpace_DrawsOnGlyphsAtExpectedLocation() DrawText1_Ltr_WhenNotEnoughSpaceOnXAndNotWrapping_DoesNotDrawGlyphs() [TestMethod] public void DrawText1_Ltr_WhenNotEnoughSpaceOnXAndNotWrapping_DoesNotDrawGlyphs() DrawText1_Ltr_WhenNotEnoughSpaceOnXAndWrapping_MovesToNextLine() [TestMethod] public void DrawText1_Ltr_WhenNotEnoughSpaceOnXAndWrapping_MovesToNextLine() DrawText1_Throws_IfFontIsNull() [TestMethod] public void DrawText1_Throws_IfFontIsNull() DrawText1_Throws_IfFontIsStringIsNull() [TestMethod] public void DrawText1_Throws_IfFontIsStringIsNull() DrawText2_CallsDrawText1() [TestMethod] public void DrawText2_CallsDrawText1() DrawText2_DoesNothing_IfTextIsEmpty() [TestMethod] public void DrawText2_DoesNothing_IfTextIsEmpty() DrawText2_Throws_IfFontIsNull() [TestMethod] public void DrawText2_Throws_IfFontIsNull() DrawText2_Throws_IfFontIsStringIsNull() [TestMethod] public void DrawText2_Throws_IfFontIsStringIsNull() TestInitialize() [TestInitialize] public void TestInitialize()"
  },
  "api/Sharpie.Tests.SurfaceTests.html": {
    "href": "api/Sharpie.Tests.SurfaceTests.html",
    "title": "Class SurfaceTests | sharpie",
    "summary": "Class SurfaceTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class SurfaceTests Inheritance object SurfaceTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Area_ShouldBeBoundBySize() [TestMethod] public void Area_ShouldBeBoundBySize() AssertAlive_DoesNothing_IfNotDisposed() [TestMethod] public void AssertAlive_DoesNothing_IfNotDisposed() AssertAlive_Throws_IfDisposed() [TestMethod] public void AssertAlive_Throws_IfDisposed() Background_Get_Returns_IfCursesSucceeded() [TestMethod] public void Background_Get_Returns_IfCursesSucceeded() Background_Get_Throws_IfCursesFails() [TestMethod] public void Background_Get_Throws_IfCursesFails() Background_Set_SetsValue_IfCursesSucceeded() [TestMethod] public void Background_Set_SetsValue_IfCursesSucceeded() Background_Set_Throws_IfCursesFails() [TestMethod] public void Background_Set_Throws_IfCursesFails() CaretLocation_Get_Returns_IfCursesSucceeded() [TestMethod] public void CaretLocation_Get_Returns_IfCursesSucceeded() CaretLocation_Get_Throws_IfCursesFails_1() [TestMethod] public void CaretLocation_Get_Throws_IfCursesFails_1() CaretLocation_Get_Throws_IfCursesFails_2() [TestMethod] public void CaretLocation_Get_Throws_IfCursesFails_2() CaretLocation_Set_SetsValue_IfCursesSucceeded() [TestMethod] public void CaretLocation_Set_SetsValue_IfCursesSucceeded() CaretLocation_Set_Throws_IfCursesFails() [TestMethod] public void CaretLocation_Set_Throws_IfCursesFails() CaretLocation_Set_Throws_IfOutsideArea() [TestMethod] public void CaretLocation_Set_Throws_IfOutsideArea() CaretLocation_Set_UpdatesLocation_IfInsideArea() [TestMethod] public void CaretLocation_Set_UpdatesLocation_IfInsideArea() ChangeTextStyle_AddsLines_IfCursesSucceeds() [TestMethod] public void ChangeTextStyle_AddsLines_IfCursesSucceeds() ChangeTextStyle_DoesNothing_IfWidthIsLessThanOne() [TestMethod] public void ChangeTextStyle_DoesNothing_IfWidthIsLessThanOne() ChangeTextStyle_Throws_IfCursesFails() [TestMethod] public void ChangeTextStyle_Throws_IfCursesFails() Clear_AsksCurses_1() [TestMethod] public void Clear_AsksCurses_1() Clear_AsksCurses_2() [TestMethod] public void Clear_AsksCurses_2() Clear_AsksCurses_3() [TestMethod] public void Clear_AsksCurses_3() Clear_Throws_IfCursesFails_1() [TestMethod] public void Clear_Throws_IfCursesFails_1() Clear_Throws_IfCursesFails_2() [TestMethod] public void Clear_Throws_IfCursesFails_2() Clear_Throws_IfCursesFails_3() [TestMethod] public void Clear_Throws_IfCursesFails_3() ColorMixture_Get_Returns_IfCursesSucceeded() [TestMethod] public void ColorMixture_Get_Returns_IfCursesSucceeded() ColorMixture_Set_SetsValue_IfCursesSucceeded() [TestMethod] public void ColorMixture_Set_SetsValue_IfCursesSucceeded() ColorMixture_Set_Throws_IfCursesFails() [TestMethod] public void ColorMixture_Set_Throws_IfCursesFails() ColorMixture_Throws_IfCursesFails() [TestMethod] public void ColorMixture_Throws_IfCursesFails() Ctor_ConfiguresSurface_InCurses() [TestMethod] public void Ctor_ConfiguresSurface_InCurses() Ctor_Throws_IfConfigureSurface_FailsInCurses_1() [TestMethod] public void Ctor_Throws_IfConfigureSurface_FailsInCurses_1() Ctor_Throws_IfConfigureSurface_FailsInCurses_2() [TestMethod] public void Ctor_Throws_IfConfigureSurface_FailsInCurses_2() Ctor_Throws_WhenCursesIfNull() [TestMethod] public void Ctor_Throws_WhenCursesIfNull() Ctor_Throws_WhenHandleIsZero() [TestMethod] public void Ctor_Throws_WhenHandleIsZero() Curses_IsInitialized() [TestMethod] public void Curses_IsInitialized() DeleteLines_DeletesLines_IfCursesSucceeds() [TestMethod] public void DeleteLines_DeletesLines_IfCursesSucceeds() DeleteLines_DoesNothing_IfLinesIsLessThanOne() [TestMethod] public void DeleteLines_DoesNothing_IfLinesIsLessThanOne() DeleteLines_Throws_IfCursesFails() [TestMethod] public void DeleteLines_Throws_IfCursesFails() Destroy_CallsCurses() [TestMethod] public void Destroy_CallsCurses() Destroy_Succeeds_EventIfCursesFails() [TestMethod] public void Destroy_Succeeds_EventIfCursesFails() Dirty_Returns_IfCursesSucceeded() [TestMethod] public void Dirty_Returns_IfCursesSucceeded() DisableAttributes_CallsCurses() [TestMethod] public void DisableAttributes_CallsCurses() DisableAttributes_Throws_IfCursesCallFails() [TestMethod] public void DisableAttributes_Throws_IfCursesCallFails() Dispose_CallsCurses() [TestMethod] public void Dispose_CallsCurses() Dispose_CanBeCalledTwice() [TestMethod] public void Dispose_CanBeCalledTwice() Dispose_DisposesTheSurface() [TestMethod] public void Dispose_DisposesTheSurface() Disposed_ReturnsFalse_IfNotDisposed() [TestMethod] public void Disposed_ReturnsFalse_IfNotDisposed() Disposed_ReturnsTrue_IfDisposed() [TestMethod] public void Disposed_ReturnsTrue_IfDisposed() Draw1_CallsDrawing_DrawTo_ToDraw() [TestMethod] public void Draw1_CallsDrawing_DrawTo_ToDraw() Draw1_Throws_IfDrawingIsNull() [TestMethod] public void Draw1_Throws_IfDrawingIsNull() Draw2_CallsDrawing_DrawTo_ToDraw() [TestMethod] public void Draw2_CallsDrawing_DrawTo_ToDraw() DrawBorder2_DrawsBorder_IfCursesSucceeds() [TestMethod] public void DrawBorder2_DrawsBorder_IfCursesSucceeds() DrawBorder2_Throws_IfCursesFails() [TestMethod] public void DrawBorder2_Throws_IfCursesFails() DrawBorder_DrawsBorder_IfCursesSucceeds() [TestMethod] public void DrawBorder_DrawsBorder_IfCursesSucceeds() DrawBorder_Throws_IfCursesFails() [TestMethod] public void DrawBorder_Throws_IfCursesFails() DrawCell_CallsCurses() [TestMethod] public void DrawCell_CallsCurses() DrawCell_DoesNothing_IfLocationOutsideBounds() [TestMethod] public void DrawCell_DoesNothing_IfLocationOutsideBounds() DrawCell_Throws_IfCursesFails_1() [TestMethod] public void DrawCell_Throws_IfCursesFails_1() DrawCell_Throws_IfCursesFails_2() [TestMethod] public void DrawCell_Throws_IfCursesFails_2() DrawHorizontalLine1_DoesNothing_IfLengthIsLessThanOne() [TestMethod] public void DrawHorizontalLine1_DoesNothing_IfLengthIsLessThanOne() DrawHorizontalLine1_DrawsLine_IfCursesSucceeds() [TestMethod] public void DrawHorizontalLine1_DrawsLine_IfCursesSucceeds() DrawHorizontalLine1_Throws_IfCursesFails() [TestMethod] public void DrawHorizontalLine1_Throws_IfCursesFails() DrawHorizontalLine2_DoesNothing_IfWidthIsLessThanOne() [TestMethod] public void DrawHorizontalLine2_DoesNothing_IfWidthIsLessThanOne() DrawHorizontalLine2_DrawsLine_IfCursesSucceeds() [TestMethod] public void DrawHorizontalLine2_DrawsLine_IfCursesSucceeds() DrawHorizontalLine2_Throws_IfCursesFails() [TestMethod] public void DrawHorizontalLine2_Throws_IfCursesFails() DrawVerticalLine1_DoesNothing_IfWLengthIsLessThanOne() [TestMethod] public void DrawVerticalLine1_DoesNothing_IfWLengthIsLessThanOne() DrawVerticalLine1_DrawsLine_IfCursesSucceeds() [TestMethod] public void DrawVerticalLine1_DrawsLine_IfCursesSucceeds() DrawVerticalLine1_Throws_IfCursesFails() [TestMethod] public void DrawVerticalLine1_Throws_IfCursesFails() DrawVerticalLine2_DoesNothing_IfLengthIsLessThanOne() [TestMethod] public void DrawVerticalLine2_DoesNothing_IfLengthIsLessThanOne() DrawVerticalLine2_DrawsLine_IfCursesSucceeds() [TestMethod] public void DrawVerticalLine2_DrawsLine_IfCursesSucceeds() DrawVerticalLine2_Throws_IfCursesFails() [TestMethod] public void DrawVerticalLine2_Throws_IfCursesFails() EnableAttributes_CallsCurses() [TestMethod] public void EnableAttributes_CallsCurses() EnableAttributes_Throws_IfCursesCallFails() [TestMethod] public void EnableAttributes_Throws_IfCursesCallFails() GetText_AsksCurses_UntilMovingCursorFails() [TestMethod] public void GetText_AsksCurses_UntilMovingCursorFails() GetText_AsksCurses_UntilReadFails() [TestMethod] public void GetText_AsksCurses_UntilReadFails() GetText_AsksCurses_WithTheGivenCountUpToEnd() [TestMethod] public void GetText_AsksCurses_WithTheGivenCountUpToEnd() GetText_DoesNothing_IfCountIsLessThanOne() [TestMethod] public void GetText_DoesNothing_IfCountIsLessThanOne() Handle_IsInitialized() [TestMethod] public void Handle_IsInitialized() Handle_Throws_IfDisposed() [TestMethod] public void Handle_Throws_IfDisposed() InsertEmptyLines_AddsLines_IfCursesSucceeds() [TestMethod] public void InsertEmptyLines_AddsLines_IfCursesSucceeds() InsertEmptyLines_DoesNothing_IfLinesIsLessThanOne() [TestMethod] public void InsertEmptyLines_DoesNothing_IfLinesIsLessThanOne() InsertEmptyLines_Throws_IfCursesFails() [TestMethod] public void InsertEmptyLines_Throws_IfCursesFails() IsPointWithin_Checks_IfPointInside(int, int, bool) [TestMethod] [DataRow(0, 0, true)] [DataRow(-1, 0, false)] [DataRow(9, 19, true)] [DataRow(10, 9, false)] public void IsPointWithin_Checks_IfPointInside(int x, int y, bool exp) Parameters x int y int exp bool IsRectangleWithin_Checks_IfAreaInside(int, int, int, int, bool) [TestMethod] [DataRow(0, 0, 2, 2, true)] [DataRow(1, 2, 2, 2, true)] [DataRow(11, 12, -2, -2, false)] [DataRow(12, 16, 3, 3, false)] [DataRow(5, 5, 10, 10, false)] [DataRow(0, 0, 10, 10, true)] public void IsRectangleWithin_Checks_IfAreaInside(int x, int y, int w, int h, bool exp) Parameters x int y int w int h int exp bool LineDirty_DoesNothing_IfYIsNegative() [TestMethod] public void LineDirty_DoesNothing_IfYIsNegative() LineDirty_Succeeds_IfCursesSucceeds() [TestMethod] public void LineDirty_Succeeds_IfCursesSucceeds() ManagedCaret_Get_ReturnsWhatCursesSays() [TestMethod] public void ManagedCaret_Get_ReturnsWhatCursesSays() ManagedCaret_Set_Throws_IfCursesFails() [TestMethod] public void ManagedCaret_Set_Throws_IfCursesFails() MarkDirty1_AdjustsYAndCountToMatchActualHeight() [TestMethod] public void MarkDirty1_AdjustsYAndCountToMatchActualHeight() MarkDirty1_DoesNotDoAnythingIfNotInBounds() [TestMethod] public void MarkDirty1_DoesNotDoAnythingIfNotInBounds() MarkDirty1_DoesNothing_IfCountIsNegative() [TestMethod] public void MarkDirty1_DoesNothing_IfCountIsNegative() MarkDirty1_Succeeds_IfCursesSucceeds() [TestMethod] public void MarkDirty1_Succeeds_IfCursesSucceeds() MarkDirty1_Throws_IfCursesFails() [TestMethod] public void MarkDirty1_Throws_IfCursesFails() MarkDirty2_Calls_MarkDirty1() [TestMethod] public void MarkDirty2_Calls_MarkDirty1() NextLine_Calls_WriteText2() [TestMethod] public void NextLine_Calls_WriteText2() Origin_ShouldBeZero() [TestMethod] public void Origin_ShouldBeZero() RemoveText_CallsCurses_ForCountTimes() [TestMethod] public void RemoveText_CallsCurses_ForCountTimes() RemoveText_CallsCurses_UntilTheFirstFailure() [TestMethod] public void RemoveText_CallsCurses_UntilTheFirstFailure() RemoveText_DoesNothing_IfCountIsLessThanOne() [TestMethod] public void RemoveText_DoesNothing_IfCountIsLessThanOne() Replace2_CallsCurses_IfCursesOverlay() [TestMethod] public void Replace2_CallsCurses_IfCursesOverlay() Replace2_CallsCurses_IfCursesOverwrite() [TestMethod] public void Replace2_CallsCurses_IfCursesOverwrite() Replace2_CopiesAdjustedArea() [TestMethod] public void Replace2_CopiesAdjustedArea() Replace2_DoesNothing_IfTheDestinationAreaIsOutsideBounds() [TestMethod] public void Replace2_DoesNothing_IfTheDestinationAreaIsOutsideBounds() Replace2_DoesNothing_IfTheSourceAreaIsOutsideBounds() [TestMethod] public void Replace2_DoesNothing_IfTheSourceAreaIsOutsideBounds() Replace2_Throws_IfCursesFails() [TestMethod] public void Replace2_Throws_IfCursesFails() Replace2_Throws_IfSurfaceIsItself() [TestMethod] public void Replace2_Throws_IfSurfaceIsItself() Replace2_Throws_IfSurfaceIsNull() [TestMethod] public void Replace2_Throws_IfSurfaceIsNull() Replace_Succeeds_IfCursesSucceeds_Overlay() [TestMethod] public void Replace_Succeeds_IfCursesSucceeds_Overlay() Replace_Succeeds_IfCursesSucceeds_Overwrite() [TestMethod] public void Replace_Succeeds_IfCursesSucceeds_Overwrite() Replace_Throws_IfCursesFails_Overlay() [TestMethod] public void Replace_Throws_IfCursesFails_Overlay() Replace_Throws_IfCursesFails_Overwrite() [TestMethod] public void Replace_Throws_IfCursesFails_Overwrite() Replace_Throws_IfSurfaceIsItself() [TestMethod] public void Replace_Throws_IfSurfaceIsItself() Replace_Throws_IfSurfaceIsNull() [TestMethod] public void Replace_Throws_IfSurfaceIsNull() ScrollDown_DoesNothing_IfLinesIsLessThanOne() [TestMethod] public void ScrollDown_DoesNothing_IfLinesIsLessThanOne() ScrollDown_Scrolls_IfCursesSucceeds() [TestMethod] public void ScrollDown_Scrolls_IfCursesSucceeds() ScrollDown_Throws_IfCursesFails() [TestMethod] public void ScrollDown_Throws_IfCursesFails() ScrollDown_Throws_IfScrollingNotEnabled() [TestMethod] public void ScrollDown_Throws_IfScrollingNotEnabled() ScrollDown_UsesHeight_IfLinesIsGreaterThanTheHeight() [TestMethod] public void ScrollDown_UsesHeight_IfLinesIsGreaterThanTheHeight() ScrollUp_DoesNothing_IfLinesIsLessThanOne() [TestMethod] public void ScrollUp_DoesNothing_IfLinesIsLessThanOne() ScrollUp_Scrolls_IfCursesSucceeds() [TestMethod] public void ScrollUp_Scrolls_IfCursesSucceeds() ScrollUp_Throws_IfCursesFails() [TestMethod] public void ScrollUp_Throws_IfCursesFails() ScrollUp_Throws_IfScrollingNotEnabled() [TestMethod] public void ScrollUp_Throws_IfScrollingNotEnabled() ScrollUp_UsesHeight_IfLinesIsGreaterThanTheHeight() [TestMethod] public void ScrollUp_UsesHeight_IfLinesIsGreaterThanTheHeight() Scrollable_Get_Returns_IfCursesSucceeded() [TestMethod] public void Scrollable_Get_Returns_IfCursesSucceeded() Scrollable_Set_SetsValue_IfCursesSucceeded(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void Scrollable_Set_SetsValue_IfCursesSucceeded(bool enabled) Parameters enabled bool Scrollable_Throws_IfCursesFails() [TestMethod] public void Scrollable_Throws_IfCursesFails() Size_Get_Returns_IfCursesSucceeded() [TestMethod] public void Size_Get_Returns_IfCursesSucceeded() Size_Get_Throws_IfCursesFails_1() [TestMethod] public void Size_Get_Throws_IfCursesFails_1() Size_Get_Throws_IfCursesFails_2() [TestMethod] public void Size_Get_Throws_IfCursesFails_2() Style_Get_Returns_IfCursesSucceeded() [TestMethod] public void Style_Get_Returns_IfCursesSucceeded() Style_Get_Throws_IfCursesFails() [TestMethod] public void Style_Get_Throws_IfCursesFails() Style_Set_SetsValue_IfCursesSucceeded() [TestMethod] public void Style_Set_SetsValue_IfCursesSucceeded() Style_Set_Throws_IfCursesFails() [TestMethod] public void Style_Set_Throws_IfCursesFails() TestInitialize() [TestInitialize] public void TestInitialize() ToString_ReturnsFormattedRepresentation() [TestMethod] public void ToString_ReturnsFormattedRepresentation() WriteText1_CallsCursesForEachChar() [TestMethod] public void WriteText1_CallsCursesForEachChar() WriteText1_DoesNotCallCurse_IfEmptyString() [TestMethod] public void WriteText1_DoesNotCallCurse_IfEmptyString() WriteText1_StopsAtWidthIfNotWrapping() [TestMethod] public void WriteText1_StopsAtWidthIfNotWrapping() WriteText1_Throws_IfCursesFails() [TestMethod] public void WriteText1_Throws_IfCursesFails() WriteText1_Throws_IfStringIsNull() [TestMethod] public void WriteText1_Throws_IfStringIsNull() WriteText2_Calls_WriteText1() [TestMethod] public void WriteText2_Calls_WriteText1() WriteText2_StopsAtWidthIfNotWrapping() [TestMethod] public void WriteText2_StopsAtWidthIfNotWrapping() WriteText3_CallsCursesForEachCharInAllParts() [TestMethod] public void WriteText3_CallsCursesForEachCharInAllParts() WriteText3_DoesNotCallCurse_IfEmpty() [TestMethod] public void WriteText3_DoesNotCallCurse_IfEmpty() WriteText3_DoesNotCallCurse_IfUninitialized() [TestMethod] public void WriteText3_DoesNotCallCurse_IfUninitialized() WriteText3_StopsAtWidthIfNotWrapping() [TestMethod] public void WriteText3_StopsAtWidthIfNotWrapping() WriteText3_Throws_IfCursesFails() [TestMethod] public void WriteText3_Throws_IfCursesFails()"
  },
  "api/Sharpie.Tests.SynchronizationTests.html": {
    "href": "api/Sharpie.Tests.SynchronizationTests.html",
    "title": "Class SynchronizationTests | sharpie",
    "summary": "Class SynchronizationTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class SynchronizationTests Inheritance object SynchronizationTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TestContext [UsedImplicitly] public TestContext TestContext { get; set; } Property Value TestContext Methods ColorManager_BreakdownColor1() [TestMethod] public void ColorManager_BreakdownColor1() ColorManager_BreakdownColor2() [TestMethod] public void ColorManager_BreakdownColor2() ColorManager_MixColors1() [TestMethod] public void ColorManager_MixColors1() ColorManager_MixColors2() [TestMethod] public void ColorManager_MixColors2() ColorManager_RedefineColor1() [TestMethod] public void ColorManager_RedefineColor1() ColorManager_RedefineColor2() [TestMethod] public void ColorManager_RedefineColor2() ColorManager_RemixColors1() [TestMethod] public void ColorManager_RemixColors1() ColorManager_RemixColors2() [TestMethod] public void ColorManager_RemixColors2() ColorManager_RemixDefaultColors1() [TestMethod] public void ColorManager_RemixDefaultColors1() ColorManager_RemixDefaultColors2() [TestMethod] public void ColorManager_RemixDefaultColors2() ColorManager_UnMixColors1() [TestMethod] public void ColorManager_UnMixColors1() EventPump_Listen3() [TestMethod] public void EventPump_Listen3() EventPump_Listen4() [TestMethod] public void EventPump_Listen4() EventPump_Use() [TestMethod] public void EventPump_Use() EventPump_Uses() [TestMethod] public void EventPump_Uses() Events_Listen1() [TestMethod] public void Events_Listen1() Events_Listen2() [TestMethod] public void Events_Listen2() Pad_Destroy() [TestMethod] public void Pad_Destroy() Pad_Duplicate() [TestMethod] public void Pad_Duplicate() Pad_Refresh1() [TestMethod] public void Pad_Refresh1() Pad_Refresh2() [TestMethod] public void Pad_Refresh2() Pad_Size_Get() [TestMethod] public void Pad_Size_Get() Pad_Size_Set() [TestMethod] public void Pad_Size_Set() Pad_SubPad() [TestMethod] public void Pad_SubPad() Pad_SubPads() [TestMethod] public void Pad_SubPads() Screen_Destroy() [TestMethod] public void Screen_Destroy() Screen_Pad() [TestMethod] public void Screen_Pad() Screen_Pads() [TestMethod] public void Screen_Pads() Screen_Window() [TestMethod] public void Screen_Window() Screen_Windows() [TestMethod] public void Screen_Windows() SoftLabelKeyManager_Clear() [TestMethod] public void SoftLabelKeyManager_Clear() SoftLabelKeyManager_ColorMixture_Get() [TestMethod] public void SoftLabelKeyManager_ColorMixture_Get() SoftLabelKeyManager_ColorMixture_Set() [TestMethod] public void SoftLabelKeyManager_ColorMixture_Set() SoftLabelKeyManager_DisableAttributes() [TestMethod] public void SoftLabelKeyManager_DisableAttributes() SoftLabelKeyManager_EnableAttributes() [TestMethod] public void SoftLabelKeyManager_EnableAttributes() SoftLabelKeyManager_MarkDirty() [TestMethod] public void SoftLabelKeyManager_MarkDirty() SoftLabelKeyManager_Refresh() [TestMethod] public void SoftLabelKeyManager_Refresh() SoftLabelKeyManager_Restore() [TestMethod] public void SoftLabelKeyManager_Restore() SoftLabelKeyManager_SetLabel() [TestMethod] public void SoftLabelKeyManager_SetLabel() SoftLabelKeyManager_Style_Get() [TestMethod] public void SoftLabelKeyManager_Style_Get() SoftLabelKeyManager_Style_Set() [TestMethod] public void SoftLabelKeyManager_Style_Set() SubPad_Destroy() [TestMethod] public void SubPad_Destroy() SubPad_Duplicate() [TestMethod] public void SubPad_Duplicate() SubPad_Location_Get() [TestMethod] public void SubPad_Location_Get() SubPad_Location_Set() [TestMethod] public void SubPad_Location_Set() SubPad_Size_Get() [TestMethod] public void SubPad_Size_Get() SubPad_Size_Set() [TestMethod] public void SubPad_Size_Set() SubWindow_Destroy() [TestMethod] public void SubWindow_Destroy() SubWindow_Duplicate() [TestMethod] public void SubWindow_Duplicate() SubWindow_Location_Get() [TestMethod] public void SubWindow_Location_Get() SubWindow_Location_Set() [TestMethod] public void SubWindow_Location_Set() SubWindow_Size_Get() [TestMethod] public void SubWindow_Size_Get() SubWindow_Size_Set() [TestMethod] public void SubWindow_Size_Set() Surface_Background_Get() [TestMethod] public void Surface_Background_Get() Surface_Background_Set() [TestMethod] public void Surface_Background_Set() Surface_CaretLocation_Get() [TestMethod] public void Surface_CaretLocation_Get() Surface_CaretLocation_Set() [TestMethod] public void Surface_CaretLocation_Set() Surface_ChangeTextStyle() [TestMethod] public void Surface_ChangeTextStyle() Surface_Clear() [TestMethod] public void Surface_Clear() Surface_ColorMixture_Get() [TestMethod] public void Surface_ColorMixture_Get() Surface_ColorMixture_Set() [TestMethod] public void Surface_ColorMixture_Set() Surface_DeleteLines() [TestMethod] public void Surface_DeleteLines() Surface_Destroy() [TestMethod] public void Surface_Destroy() Surface_Dirty_Get() [TestMethod] public void Surface_Dirty_Get() Surface_DisableAttributes() [TestMethod] public void Surface_DisableAttributes() Surface_Draw1() [TestMethod] public void Surface_Draw1() Surface_Draw2() [TestMethod] public void Surface_Draw2() Surface_DrawBorder1() [TestMethod] public void Surface_DrawBorder1() Surface_DrawBorder2() [TestMethod] public void Surface_DrawBorder2() Surface_DrawCell() [TestMethod] public void Surface_DrawCell() Surface_DrawHorizontalLine1() [TestMethod] public void Surface_DrawHorizontalLine1() Surface_DrawHorizontalLine2() [TestMethod] public void Surface_DrawHorizontalLine2() Surface_DrawVerticalLine1() [TestMethod] public void Surface_DrawVerticalLine1() Surface_DrawVerticalLine2() [TestMethod] public void Surface_DrawVerticalLine2() Surface_EnableAttributes() [TestMethod] public void Surface_EnableAttributes() Surface_GetText() [TestMethod] public void Surface_GetText() Surface_InsertEmptyLines() [TestMethod] public void Surface_InsertEmptyLines() Surface_IsPointWithin() [TestMethod] public void Surface_IsPointWithin() Surface_IsRectangleWithin() [TestMethod] public void Surface_IsRectangleWithin() Surface_LineDirty() [TestMethod] public void Surface_LineDirty() Surface_ManagedCaret_Get() [TestMethod] public void Surface_ManagedCaret_Get() Surface_ManagedCaret_Set() [TestMethod] public void Surface_ManagedCaret_Set() Surface_MarkDirty1() [TestMethod] public void Surface_MarkDirty1() Surface_MarkDirty2() [TestMethod] public void Surface_MarkDirty2() Surface_RemoveText() [TestMethod] public void Surface_RemoveText() Surface_Replace1() [TestMethod] public void Surface_Replace1() Surface_Replace2() [TestMethod] public void Surface_Replace2() Surface_ScrollDown() [TestMethod] public void Surface_ScrollDown() Surface_ScrollUp() [TestMethod] public void Surface_ScrollUp() Surface_Scrollable_Get() [TestMethod] public void Surface_Scrollable_Get() Surface_Scrollable_Set() [TestMethod] public void Surface_Scrollable_Set() Surface_Size_Get() [TestMethod] public void Surface_Size_Get() Surface_Style_Get() [TestMethod] public void Surface_Style_Get() Surface_Style_Set() [TestMethod] public void Surface_Style_Set() Surface_WriteText1() [TestMethod] public void Surface_WriteText1() Surface_WriteText2() [TestMethod] public void Surface_WriteText2() Surface_WriteText3() [TestMethod] public void Surface_WriteText3() TerminalSurface_Destroy() [TestMethod] public void TerminalSurface_Destroy() TerminalSurface_ImmediateRefresh_Get() [TestMethod] public void TerminalSurface_ImmediateRefresh_Get() TerminalSurface_ImmediateRefresh_Set() [TestMethod] public void TerminalSurface_ImmediateRefresh_Set() TerminalSurface_Refresh1() [TestMethod] public void TerminalSurface_Refresh1() TerminalSurface_Refresh2() [TestMethod] public void TerminalSurface_Refresh2() Terminal_Alert() [TestMethod] public void Terminal_Alert() Terminal_AtomicRefresh() [TestMethod] public void Terminal_AtomicRefresh() Terminal_SetTitle() [TestMethod] public void Terminal_SetTitle() Terminal_TryUpdate() [TestMethod] public void Terminal_TryUpdate() TestCleanup() [TestCleanup] public void TestCleanup() TestInitialize() [TestInitialize] public void TestInitialize() Window_AdjustToExplicitArea() [TestMethod] public void Window_AdjustToExplicitArea() Window_Destroy() [TestMethod] public void Window_Destroy() Window_Duplicate() [TestMethod] public void Window_Duplicate() Window_Location_Get() [TestMethod] public void Window_Location_Get() Window_Location_Set() [TestMethod] public void Window_Location_Set() Window_Size_Get() [TestMethod] public void Window_Size_Get() Window_Size_Set() [TestMethod] public void Window_Size_Set() Window_SubWindow() [TestMethod] public void Window_SubWindow() Window_SubWindows() [TestMethod] public void Window_SubWindows() Window_WhenManaged_BringToFront() [TestMethod] public void Window_WhenManaged_BringToFront() Window_WhenManaged_SendToBack() [TestMethod] public void Window_WhenManaged_SendToBack() Window_WhenManaged_Visible_Get() [TestMethod] public void Window_WhenManaged_Visible_Get() Window_WhenManaged_Visible_Set() [TestMethod] public void Window_WhenManaged_Visible_Set()"
  },
  "api/Sharpie.Tests.TerminalMainLoopTests.html": {
    "href": "api/Sharpie.Tests.TerminalMainLoopTests.html",
    "title": "Class TerminalMainLoopTests | sharpie",
    "summary": "Class TerminalMainLoopTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class TerminalMainLoopTests Inheritance object TerminalMainLoopTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Delay1_CanBeCancelledThroughReturnedInterval() [TestMethod] [Timeout(10000)] public Task Delay1_CanBeCancelledThroughReturnedInterval() Returns Task Delay1_EnqueuesAndExecutesTimerOnce() [TestMethod] [Timeout(10000)] public Task Delay1_EnqueuesAndExecutesTimerOnce() Returns Task Delay1_Throws_IfActionIsNull() [TestMethod] public void Delay1_Throws_IfActionIsNull() Delay1_Throws_IfDelayIsNegative() [TestMethod] public void Delay1_Throws_IfDelayIsNegative() Delay2_EnqueuesAndExecutesTimerOnce() [TestMethod] [Timeout(10000)] public Task Delay2_EnqueuesAndExecutesTimerOnce() Returns Task Delay2_Throws_IfActionIsNull() [TestMethod] public void Delay2_Throws_IfActionIsNull() Delay2_Throws_IfDelayIsNegative() [TestMethod] public void Delay2_Throws_IfDelayIsNegative() Delegate_DoesNotEnqueueAction_IfNotRunning() [TestMethod] [Timeout(10000)] public Task Delegate_DoesNotEnqueueAction_IfNotRunning() Returns Task Delegate_EnqueuesAction() [TestMethod] [Timeout(10000)] public Task Delegate_EnqueuesAction() Returns Task Delegate_Throws_IfActionIsNull() [TestMethod] public void Delegate_Throws_IfActionIsNull() Delegate_Throws_IfTerminalDisposed() [TestMethod] public void Delegate_Throws_IfTerminalDisposed() Dispose_CancelsTheRunning_AndKillsTimers() [TestMethod] [Timeout(10000)] public Task Dispose_CancelsTheRunning_AndKillsTimers() Returns Task Repeat1_CanBeCancelledThroughReturnedInterval() [TestMethod] [Timeout(10000)] public Task Repeat1_CanBeCancelledThroughReturnedInterval() Returns Task Repeat1_EnqueuesAndExecutesTimerMultipleTimes() [TestMethod] [Timeout(10000)] public Task Repeat1_EnqueuesAndExecutesTimerMultipleTimes() Returns Task Repeat1_Throws_IfActionIsNull() [TestMethod] public void Repeat1_Throws_IfActionIsNull() Repeat1_Throws_IfDelayIsNegative() [TestMethod] public void Repeat1_Throws_IfDelayIsNegative() Repeat2_Throws_IfActionIsNull() [TestMethod] public void Repeat2_Throws_IfActionIsNull() Repeat2_Throws_IfDelayIsNegative() [TestMethod] public void Repeat2_Throws_IfDelayIsNegative() Run_ExecutesDelegatedActionsInSequence() [TestMethod] [Timeout(10000)] public Task Run_ExecutesDelegatedActionsInSequence() Returns Task Run_ReadsEventsFromPump() [TestMethod] [Timeout(10000)] public void Run_ReadsEventsFromPump() Run_ResumesTimersAcrossRuns() [TestMethod] [Timeout(10000)] public void Run_ResumesTimersAcrossRuns() Run_Resumes_IfStopped() [TestMethod] [Timeout(10000)] public Task Run_Resumes_IfStopped() Returns Task Run_StopsOnCtrlC() [TestMethod] [Timeout(10000)] public void Run_StopsOnCtrlC() Run_Throws_IfActionIsNull() [TestMethod] public void Run_Throws_IfActionIsNull() Run_Throws_IfAnotherRunsAlready() [TestMethod] [Timeout(10000)] public Task Run_Throws_IfAnotherRunsAlready() Returns Task Run_Throws_IfInternalError() [TestMethod] [Timeout(10000)] public void Run_Throws_IfInternalError() Run_Throws_IfTerminalDisposed() [TestMethod] public void Run_Throws_IfTerminalDisposed() Stop_DoesNotEnqueueAction_IfNotRunning() [TestMethod] [Timeout(10000)] public Task Stop_DoesNotEnqueueAction_IfNotRunning() Returns Task Stop_EnqueuesStoppingTheRun() [TestMethod] [Timeout(10000)] public void Stop_EnqueuesStoppingTheRun() Stop_Throws_IfTerminalDisposed() [TestMethod] public void Stop_Throws_IfTerminalDisposed() Stop_WaitsForThingsToFinish() [TestMethod] [Timeout(10000)] public Task Stop_WaitsForThingsToFinish() Returns Task TestCleanup() [TestCleanup] public void TestCleanup() TestInitialize() [TestInitialize] public void TestInitialize()"
  },
  "api/Sharpie.Tests.TerminalOptionsTests.html": {
    "href": "api/Sharpie.Tests.TerminalOptionsTests.html",
    "title": "Class TerminalOptionsTests | sharpie",
    "summary": "Class TerminalOptionsTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class TerminalOptionsTests Inheritance object TerminalOptionsTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_SetsDefaults() [TestMethod] public void Ctor_SetsDefaults()"
  },
  "api/Sharpie.Tests.TerminalResizeEventTests.html": {
    "href": "api/Sharpie.Tests.TerminalResizeEventTests.html",
    "title": "Class TerminalResizeEventTests | sharpie",
    "summary": "Class TerminalResizeEventTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class TerminalResizeEventTests Inheritance object TerminalResizeEventTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_InitializesPropertiesCorrectly() [TestMethod] public void Ctor_InitializesPropertiesCorrectly() Equals_ReturnsFalse_IfNotTerminalResizeEvent(object?) [TestMethod] [DataRow(null)] [DataRow(\"\")] public void Equals_ReturnsFalse_IfNotTerminalResizeEvent(object? b) Parameters b object Equals_ReturnsFalse_IfSize() [TestMethod] public void Equals_ReturnsFalse_IfSize() Equals_ReturnsTrue_IfSameSize() [TestMethod] public void Equals_ReturnsTrue_IfSameSize() GetHashCode_IsDifferent_IfSizeDifferent() [TestMethod] public void GetHashCode_IsDifferent_IfSizeDifferent() GetHashCode_IsEqual_IfAllPropertiesAreSame() [TestMethod] public void GetHashCode_IsEqual_IfAllPropertiesAreSame() ToString_ProperlyFormats() [TestMethod] public void ToString_ProperlyFormats()"
  },
  "api/Sharpie.Tests.TerminalSurfaceTests.html": {
    "href": "api/Sharpie.Tests.TerminalSurfaceTests.html",
    "title": "Class TerminalSurfaceTests | sharpie",
    "summary": "Class TerminalSurfaceTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class TerminalSurfaceTests Inheritance object TerminalSurfaceTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ctor_ConfiguresWindow_InCurses() [TestMethod] public void Ctor_ConfiguresWindow_InCurses() Ctor_Throws_IfTerminalIsNull() [TestMethod] public void Ctor_Throws_IfTerminalIsNull() Destroy_CallsCurses() [TestMethod] public void Destroy_CallsCurses() ImmediateRefresh_Returns_IfCursesSucceeded() [TestMethod] public void ImmediateRefresh_Returns_IfCursesSucceeded() ImmediateRefresh_Sets_IfCursesSucceeded() [TestMethod] public void ImmediateRefresh_Sets_IfCursesSucceeded() Refresh1_Fails_IfCursesFails_InBatch() [TestMethod] public void Refresh1_Fails_IfCursesFails_InBatch() Refresh1_Fails_IfCursesFails_NoBatch() [TestMethod] public void Refresh1_Fails_IfCursesFails_NoBatch() Refresh1_Succeeds_IfCursesSucceeds_InBatch() [TestMethod] public void Refresh1_Succeeds_IfCursesSucceeds_InBatch() Refresh1_Succeeds_IfCursesSucceeds_NoBatch() [TestMethod] public void Refresh1_Succeeds_IfCursesSucceeds_NoBatch() Refresh2_AdjustsYAndCountToMatchActualHeight() [TestMethod] public void Refresh2_AdjustsYAndCountToMatchActualHeight() Refresh2_DoesNotDoAnythingIfNotInBounds() [TestMethod] public void Refresh2_DoesNotDoAnythingIfNotInBounds() Refresh2_DoesNothing_IfCountIsNegative() [TestMethod] public void Refresh2_DoesNothing_IfCountIsNegative() Refresh2_DoesNothing_IfDoesNotCoverArea_ForNegativeY() [TestMethod] public void Refresh2_DoesNothing_IfDoesNotCoverArea_ForNegativeY() Refresh2_Succeeds_IfCursesSucceeds() [TestMethod] public void Refresh2_Succeeds_IfCursesSucceeds() Refresh2_Throws_IfCursesFails() [TestMethod] public void Refresh2_Throws_IfCursesFails() Refresh2_Throws_IfWithinBatch() [TestMethod] public void Refresh2_Throws_IfWithinBatch() Terminal_IsInitialized() [TestMethod] public void Terminal_IsInitialized() TestCleanup() [TestCleanup] public void TestCleanup() TestInitialize() [TestInitialize] public void TestInitialize() ToString_ReturnsFormattedRepresentation() [TestMethod] public void ToString_ReturnsFormattedRepresentation()"
  },
  "api/Sharpie.Tests.TerminalTests.html": {
    "href": "api/Sharpie.Tests.TerminalTests.html",
    "title": "Class TerminalTests | sharpie",
    "summary": "Class TerminalTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class TerminalTests Inheritance object TerminalTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Alert_ShouldDoCursesBeep_IfSpecified() [TestMethod] public void Alert_ShouldDoCursesBeep_IfSpecified() Alert_ShouldDoCursesFlash_IfSpecified() [TestMethod] public void Alert_ShouldDoCursesFlash_IfSpecified() Alert_Throws_IfCursesBeepFails() [TestMethod] public void Alert_Throws_IfCursesBeepFails() Alert_Throws_IfCursesFlashFails() [TestMethod] public void Alert_Throws_IfCursesFlashFails() AtomicRefreshOpen_ProperlyIdentifiesAtomicBlocks() [TestMethod] public void AtomicRefreshOpen_ProperlyIdentifiesAtomicBlocks() AtomicRefresh_IsReentrant() [TestMethod] public void AtomicRefresh_IsReentrant() AtomicRefresh_UpdatesScreenWhenObjectIsDisposed() [TestMethod] public void AtomicRefresh_UpdatesScreenWhenObjectIsDisposed() BaudRate_Returns_IfCursesSucceeds() [TestMethod] public void BaudRate_Returns_IfCursesSucceeds() BaudRate_Throws_IfCursesFails() [TestMethod] public void BaudRate_Throws_IfCursesFails() Colors_ReturnsTheColorManager_IfTerminalAlive() [TestMethod] public void Colors_ReturnsTheColorManager_IfTerminalAlive() Colors_Throws_IfTerminalDisposed() [TestMethod] public void Colors_Throws_IfTerminalDisposed() Ctor_CreatesNewScreen_ByAskingCurses() [TestMethod] public void Ctor_CreatesNewScreen_ByAskingCurses() Ctor_DoesNotRegisterStandardKeySequenceResolvers_IfAsked() [TestMethod] public void Ctor_DoesNotRegisterStandardKeySequenceResolvers_IfAsked() Ctor_InitializesScreenIgnoreHardwareCaret_IfCaretDisabled() [TestMethod] public void Ctor_InitializesScreenIgnoreHardwareCaret_IfCaretDisabled() Ctor_InitializesScreenIgnoreHardwareCaret_IfCaretEnabled() [TestMethod] public void Ctor_InitializesScreenIgnoreHardwareCaret_IfCaretEnabled() Ctor_Initializes_ColorManager(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void Ctor_Initializes_ColorManager(bool enabled) Parameters enabled bool Ctor_Initializes_SoftLabelKeyManager(SoftLabelKeyMode) [TestMethod] [DataRow(SoftLabelKeyMode.Disabled)] [DataRow(SoftLabelKeyMode.ThreeTwoThree)] public void Ctor_Initializes_SoftLabelKeyManager(SoftLabelKeyMode mode) Parameters mode SoftLabelKeyMode Ctor_NotifiesCurses_AboutUseEnvironmentOverrides(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void Ctor_NotifiesCurses_AboutUseEnvironmentOverrides(bool enable) Parameters enable bool Ctor_PreparesCaretMode_ByAskingCurses() [TestMethod] public void Ctor_PreparesCaretMode_ByAskingCurses() Ctor_PreparesEchoInput_ByAskingCurses(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void Ctor_PreparesEchoInput_ByAskingCurses(bool enabled) Parameters enabled bool Ctor_PreparesFooter_ByAskingCurses() [TestMethod] public void Ctor_PreparesFooter_ByAskingCurses() Ctor_PreparesHeader_ByAskingCurses() [TestMethod] public void Ctor_PreparesHeader_ByAskingCurses() Ctor_PreparesInput_ByAskingCurses(bool, bool) [TestMethod] [DataRow(false, false)] [DataRow(false, true)] [DataRow(true, false)] [DataRow(true, true)] public void Ctor_PreparesInput_ByAskingCurses(bool useInputBuffering, bool suppressControlKeys) Parameters useInputBuffering bool suppressControlKeys bool Ctor_PreparesManualFlushMode_ByAskingCurses(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void Ctor_PreparesManualFlushMode_ByAskingCurses(bool enabled) Parameters enabled bool Ctor_PreparesMeta_ByAskingCurses() [TestMethod] public void Ctor_PreparesMeta_ByAskingCurses() Ctor_PreparesTranslateReturnToNewLineChar_ByAskingCurses() [TestMethod] public void Ctor_PreparesTranslateReturnToNewLineChar_ByAskingCurses() Ctor_PreparesUseMouse_ByAskingCurses(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void Ctor_PreparesUseMouse_ByAskingCurses(bool enabled) Parameters enabled bool Ctor_PreparesUseMouse_WithoutClickInterval_ByAskingCurses() [TestMethod] public void Ctor_PreparesUseMouse_WithoutClickInterval_ByAskingCurses() Ctor_RegistersStandardKeySequenceResolvers_IfAsked() [TestMethod] public void Ctor_RegistersStandardKeySequenceResolvers_IfAsked() Ctor_Throws_IfAnotherTerminalInstanceIsAlive() [TestMethod] public void Ctor_Throws_IfAnotherTerminalInstanceIsAlive() Ctor_Throws_IfCursesFails_WhenCreatingScreen() [TestMethod] public void Ctor_Throws_IfCursesFails_WhenCreatingScreen() Ctor_Throws_IfCursesFails_WhenSettingUpManualFlush(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void Ctor_Throws_IfCursesFails_WhenSettingUpManualFlush(bool enabled) Parameters enabled bool Ctor_Throws_IfCursesIsNull() [TestMethod] public void Ctor_Throws_IfCursesIsNull() Ctor_Throws_IfMouseClickIntervalNegative() [TestMethod] public void Ctor_Throws_IfMouseClickIntervalNegative() Ctor_Throws_WhenCursesFailsToPrepareInput_1() [TestMethod] public void Ctor_Throws_WhenCursesFailsToPrepareInput_1() Ctor_Throws_WhenCursesFailsToPrepareInput_2() [TestMethod] public void Ctor_Throws_WhenCursesFailsToPrepareInput_2() Ctor_Throws_WhenCursesFailsToPrepareInput_3() [TestMethod] public void Ctor_Throws_WhenCursesFailsToPrepareInput_3() Ctor_Throws_WhenCursesFailsToPrepareInput_4() [TestMethod] public void Ctor_Throws_WhenCursesFailsToPrepareInput_4() Ctor_Throws_WhenCursesFailsToPreparesEchoInput(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void Ctor_Throws_WhenCursesFailsToPreparesEchoInput(bool enabled) Parameters enabled bool Ctor_Throws_WhenCursesFailsToPreparesTranslateReturnToNewLineChar() [TestMethod] public void Ctor_Throws_WhenCursesFailsToPreparesTranslateReturnToNewLineChar() Ctor_Throws_WhenCursesFailsToPreparesUseMouse_1(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void Ctor_Throws_WhenCursesFailsToPreparesUseMouse_1(bool enabled) Parameters enabled bool Ctor_Throws_WhenCursesFailsToPreparesUseMouse_2(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void Ctor_Throws_WhenCursesFailsToPreparesUseMouse_2(bool enabled) Parameters enabled bool Ctor_Throws_WhenPreparingFooter_IfCursesFails() [TestMethod] public void Ctor_Throws_WhenPreparingFooter_IfCursesFails() Ctor_Throws_WhenPreparingFooter_IfCursesFailsToProvideValidHandle() [TestMethod] public void Ctor_Throws_WhenPreparingFooter_IfCursesFailsToProvideValidHandle() Ctor_Throws_WhenPreparingHeader_IfCursesFails() [TestMethod] public void Ctor_Throws_WhenPreparingHeader_IfCursesFails() Ctor_Throws_WhenPreparingHeader_IfCursesFailsToProvideValidHandle() [TestMethod] public void Ctor_Throws_WhenPreparingHeader_IfCursesFailsToProvideValidHandle() Ctor_WillNotThrow_IfCursesFailsToPrepareMeta() [TestMethod] public void Ctor_WillNotThrow_IfCursesFailsToPrepareMeta() CurrentEraseChar_ReturnsTheNull_IfCursesHasNoCharDefined() [TestMethod] public void CurrentEraseChar_ReturnsTheNull_IfCursesHasNoCharDefined() CurrentEraseChar_ReturnsTheRune_IfCursesHasCharDefined() [TestMethod] public void CurrentEraseChar_ReturnsTheRune_IfCursesHasCharDefined() CurrentKillChar_ReturnsTheNull_IfCursesHasNoCharDefined() [TestMethod] public void CurrentKillChar_ReturnsTheNull_IfCursesHasNoCharDefined() CurrentKillChar_ReturnsTheRune_IfCursesHasCharDefined() [TestMethod] public void CurrentKillChar_ReturnsTheRune_IfCursesHasCharDefined() CursesVersion_ReturnsNull_IfCursesReturnsNull() [TestMethod] public void CursesVersion_ReturnsNull_IfCursesReturnsNull() Curses_ReturnsTheCursesBackend() [TestMethod] public void Curses_ReturnsTheCursesBackend() Description_ReturnsNull_IfCursesReturnsNull() [TestMethod] public void Description_ReturnsNull_IfCursesReturnsNull() Description_Returns_IfCursesSucceeds() [TestMethod] public void Description_Returns_IfCursesSucceeds() Dispose_DisposesTheScreen() [TestMethod] public void Dispose_DisposesTheScreen() Dispose_DoesNotRestoreCaret_IfCursesFailsToPreparesCaretMode() [TestMethod] public void Dispose_DoesNotRestoreCaret_IfCursesFailsToPreparesCaretMode() Dispose_DoesNotThrow_IfCursesFails() [TestMethod] public void Dispose_DoesNotThrow_IfCursesFails() Dispose_RestoresCursesDefaults() [TestMethod] public void Dispose_RestoresCursesDefaults() Disposed_ReturnsFalse_IfTerminalIsAlive() [TestMethod] public void Disposed_ReturnsFalse_IfTerminalIsAlive() Disposed_ReturnsTrue_IfDisposeIsCalled() [TestMethod] public void Disposed_ReturnsTrue_IfDisposeIsCalled() Events_ReturnsTheInstance_IfTerminalAlive() [TestMethod] public void Events_ReturnsTheInstance_IfTerminalAlive() Events_Throws_IfTerminalDisposed() [TestMethod] public void Events_Throws_IfTerminalDisposed() Footer_Throws_IfTerminalDisposed() [TestMethod] public void Footer_Throws_IfTerminalDisposed() Header_Throws_IfTerminalDisposed() [TestMethod] public void Header_Throws_IfTerminalDisposed() Name_ReturnsNull_IfCursesReturnsNull() [TestMethod] public void Name_ReturnsNull_IfCursesReturnsNull() Name_Returns_IfCursesSucceeds() [TestMethod] public void Name_Returns_IfCursesSucceeds() Screen_ReturnsTheInstance_IfTerminalAlive() [TestMethod] public void Screen_ReturnsTheInstance_IfTerminalAlive() Screen_Throws_IfTerminalDisposed() [TestMethod] public void Screen_Throws_IfTerminalDisposed() SetTitle_AsksCurses() [TestMethod] public void SetTitle_AsksCurses() SetTitle_Throws_IfTitleIsNull() [TestMethod] public void SetTitle_Throws_IfTitleIsNull() SoftLabelKeys_ReturnsTheColorManager_IfTerminalAlive() [TestMethod] public void SoftLabelKeys_ReturnsTheColorManager_IfTerminalAlive() SoftLabelKeys_Throws_IfTerminalDisposed() [TestMethod] public void SoftLabelKeys_Throws_IfTerminalDisposed() SupportedAttributes_Returns_WhateverCursesReturns() [TestMethod] public void SupportedAttributes_Returns_WhateverCursesReturns() SupportedAttributes_Throws_IfCursesFails() [TestMethod] public void SupportedAttributes_Throws_IfCursesFails() TestCleanup() [TestCleanup] public void TestCleanup() TestInitialize() [TestInitialize] public void TestInitialize() TryUpdate_ReturnsFalseAndDoesNotCallCursesIfBatch() [TestMethod] public void TryUpdate_ReturnsFalseAndDoesNotCallCursesIfBatch() TryUpdate_ReturnsTrueAndCallsCursesIfNotBatch() [TestMethod] public void TryUpdate_ReturnsTrueAndCallsCursesIfNotBatch() TryUpdate_Throws_IfCursesFails() [TestMethod] public void TryUpdate_Throws_IfCursesFails() TryUpdate_Throws_IfTerminalIsDisposed() [TestMethod] public void TryUpdate_Throws_IfTerminalIsDisposed() Version_Returns_IfCursesSucceeds() [TestMethod] public void Version_Returns_IfCursesSucceeds()"
  },
  "api/Sharpie.Tests.WindowTests.html": {
    "href": "api/Sharpie.Tests.WindowTests.html",
    "title": "Class WindowTests | sharpie",
    "summary": "Class WindowTests Namespace Sharpie.Tests Assembly sharpie-tests.dll [TestClass] public class WindowTests Inheritance object WindowTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TestContext [UsedImplicitly] public TestContext TestContext { get; set; } Property Value TestContext Methods AdjustToExplicitArea_DoesNotThrow_IfCursesFails_1() [TestMethod] public void AdjustToExplicitArea_DoesNotThrow_IfCursesFails_1() AdjustToExplicitArea_DoesNotThrow_IfCursesFails_2() [TestMethod] public void AdjustToExplicitArea_DoesNotThrow_IfCursesFails_2() AdjustToExplicitArea_RecalculatesTheLocationAsExpected(int, int, int, int, bool) [TestMethod] [DataRow(0, 0, 8, 8, true)] [DataRow(5, 5, 15, 15, true)] [DataRow(5, 5, 5, 5, false)] public void AdjustToExplicitArea_RecalculatesTheLocationAsExpected(int x, int y, int newX, int newY, bool call) Parameters x int y int newX int newY int call bool AdjustToExplicitArea_RecalculatesTheSizeAsExpected(int, int, int, int, int, int, int, int, bool) [TestMethod] [DataRow(5, 6, 10, 11, 9, 8, 4, 2, true)] [DataRow(0, 0, 5, 6, 2, 2, 2, 2, true)] [DataRow(0, 0, 5, 6, 0, 0, 0, 0, true)] [DataRow(0, 0, 5, 6, 100, 100, 0, 0, false)] public void AdjustToExplicitArea_RecalculatesTheSizeAsExpected(int x, int y, int width, int height, int scrWidth, int scrHeight, int expWidth, int expHeight, bool call) Parameters x int y int width int height int scrWidth int scrHeight int expWidth int expHeight int call bool AdjustToExplicitArea_UnderstandNegativeHeightAndWidth() [TestMethod] public void AdjustToExplicitArea_UnderstandNegativeHeightAndWidth() Area_ShouldBeBoundByLocationAndSize() [TestMethod] public void Area_ShouldBeBoundByLocationAndSize() BringToFront_WhenManaged_DoesNotRefreshWindow_IfInFront() [TestMethod] public void BringToFront_WhenManaged_DoesNotRefreshWindow_IfInFront() BringToFront_WhenManaged_DoesNotUpdate_IfInvisible() [TestMethod] public void BringToFront_WhenManaged_DoesNotUpdate_IfInvisible() BringToFront_WhenManaged_RefreshesWindow_IfNotInFront() [TestMethod] public void BringToFront_WhenManaged_RefreshesWindow_IfNotInFront() BringToFront_WhenUnmanaged_Throws() [TestMethod] public void BringToFront_WhenUnmanaged_Throws() Ctor_ConfiguresWindow_InCurses() [TestMethod] public void Ctor_ConfiguresWindow_InCurses() Ctor_RegistersItselfIntoParent() [TestMethod] public void Ctor_RegistersItselfIntoParent() Ctor_Throws_IfConfigureWindow_FailsInCurses_1() [TestMethod] public void Ctor_Throws_IfConfigureWindow_FailsInCurses_1() Ctor_Throws_IfConfigureWindow_FailsInCurses_2() [TestMethod] public void Ctor_Throws_IfConfigureWindow_FailsInCurses_2() Ctor_Throws_IfScreenIsNull() [TestMethod] public void Ctor_Throws_IfScreenIsNull() Destroy_CallsCurses() [TestMethod] public void Destroy_CallsCurses() Destroy_DestroysChildren() [TestMethod] public void Destroy_DestroysChildren() Destroy_RemovesWindowFromParent() [TestMethod] public void Destroy_RemovesWindowFromParent() Duplicate_PreservesManagedCaret(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void Duplicate_PreservesManagedCaret(bool mc) Parameters mc bool Duplicate_ReturnsNewWindow_IfCursesSucceeds() [TestMethod] public void Duplicate_ReturnsNewWindow_IfCursesSucceeds() Duplicate_Throws_IfCursesFails() [TestMethod] public void Duplicate_Throws_IfCursesFails() Location_Get_Returns_IfCursesSucceeded() [TestMethod] public void Location_Get_Returns_IfCursesSucceeded() Location_Get_Throws_IfCursesFails_1() [TestMethod] public void Location_Get_Throws_IfCursesFails_1() Location_Get_Throws_IfCursesFails_2() [TestMethod] public void Location_Get_Throws_IfCursesFails_2() Location_Set_SetsValue_IfCursesSucceeded() [TestMethod] public void Location_Set_SetsValue_IfCursesSucceeded() Location_Set_Throws_IfCursesFails() [TestMethod] public void Location_Set_Throws_IfCursesFails() Location_Set_Throws_IfOutsideParent() [TestMethod] public void Location_Set_Throws_IfOutsideParent() Location_Set_UpdatesLocation_IfInsideParent() [TestMethod] public void Location_Set_UpdatesLocation_IfInsideParent() Origin_Calls_Location() [TestMethod] public void Origin_Calls_Location() Refresh1_WhenManaged_DoesNotTouchInvisibleWindowsAbove() [TestMethod] public void Refresh1_WhenManaged_DoesNotTouchInvisibleWindowsAbove() Refresh1_WhenManaged_DoesNothing_IfNotVisible() [TestMethod] public void Refresh1_WhenManaged_DoesNothing_IfNotVisible() Refresh1_WhenManaged_TouchesAndRefreshesAffectedWindowAndAbove() [TestMethod] public void Refresh1_WhenManaged_TouchesAndRefreshesAffectedWindowAndAbove() Refresh1_WhenUnmanaged_OnlyUpdatesWindow() [TestMethod] public void Refresh1_WhenUnmanaged_OnlyUpdatesWindow() Refresh2_WhenManaged_DoesNothing_IfNotVisible() [TestMethod] public void Refresh2_WhenManaged_DoesNothing_IfNotVisible() Refresh2_WhenManaged_TouchesAndRefreshesAffectedWindowAndAbove() [TestMethod] public void Refresh2_WhenManaged_TouchesAndRefreshesAffectedWindowAndAbove() Refresh2_WhenUnmanaged_OnlyRedrawsAffectedLinesOfWindow() [TestMethod] public void Refresh2_WhenUnmanaged_OnlyRedrawsAffectedLinesOfWindow() Screen_IsInitialized() [TestMethod] public void Screen_IsInitialized() SendToBack_WhenManaged_DoesNotTouchWindowsThatDontIntersect() [TestMethod] public void SendToBack_WhenManaged_DoesNotTouchWindowsThatDontIntersect() SendToBack_WhenManaged_DoesNotUpdate_IfInvisible() [TestMethod] public void SendToBack_WhenManaged_DoesNotUpdate_IfInvisible() SendToBack_WhenManaged_TouchesAndRefreshesAffectedWindowsAbove_IfNotInBack() [TestMethod] public void SendToBack_WhenManaged_TouchesAndRefreshesAffectedWindowsAbove_IfNotInBack() SendToBack_WhenManaged_WhenManaged_DoesNotDoAnything_IfInBack() [TestMethod] public void SendToBack_WhenManaged_WhenManaged_DoesNotDoAnything_IfInBack() SendToBack_WhenUnmanaged_Throws() [TestMethod] public void SendToBack_WhenUnmanaged_Throws() Size_Set_AdjustsAreaBasedOnParent() [TestMethod] public void Size_Set_AdjustsAreaBasedOnParent() Size_Set_SetsValue_IfCursesSucceeded() [TestMethod] public void Size_Set_SetsValue_IfCursesSucceeded() Size_Set_Throws_IfAdjustedArea_IsOutsideParent() [TestMethod] public void Size_Set_Throws_IfAdjustedArea_IsOutsideParent() Size_Set_Throws_IfCursesFails() [TestMethod] public void Size_Set_Throws_IfCursesFails() SubWindow_AdjustsArea_ToMatchParent() [TestMethod] public void SubWindow_AdjustsArea_ToMatchParent() SubWindow_PreservesManagedCaret(bool) [TestMethod] [DataRow(true)] [DataRow(false)] public void SubWindow_PreservesManagedCaret(bool mc) Parameters mc bool SubWindow_ReturnsNewWindow_IfCursesSucceeds() [TestMethod] public void SubWindow_ReturnsNewWindow_IfCursesSucceeds() SubWindow_Throws_IfAdjustedAreaIsEmpty() [TestMethod] public void SubWindow_Throws_IfAdjustedAreaIsEmpty() SubWindow_Throws_IfCursesFails() [TestMethod] public void SubWindow_Throws_IfCursesFails() SubWindows_ContainsTheChild_WhenPassedAsParent() [TestMethod] public void SubWindows_ContainsTheChild_WhenPassedAsParent() SubWindows_DoesNotContainTheChild_WhenChildDestroyed() [TestMethod] public void SubWindows_DoesNotContainTheChild_WhenChildDestroyed() SubWindows_IsEmpty_WhenCreated() [TestMethod] public void SubWindows_IsEmpty_WhenCreated() SubWindows_Throws_IfWindowIsDestroyed() [TestMethod] public void SubWindows_Throws_IfWindowIsDestroyed() TestCleanup() [TestCleanup] public void TestCleanup() TestInitialize() [TestInitialize] public void TestInitialize() ToString_ReturnsFormattedRepresentation() [TestMethod] public void ToString_ReturnsFormattedRepresentation() Visible_Get_WhenUnmanaged_Throws() [TestMethod] public void Visible_Get_WhenUnmanaged_Throws() Visible_Set_WhenUnmanaged_Throws() [TestMethod] public void Visible_Set_WhenUnmanaged_Throws() Visible_WhenManaged_IsTrueByDefault() [TestMethod] public void Visible_WhenManaged_IsTrueByDefault() Visible_WhenManaged_SetToFalse_DoesNothingIfAlreadyFalse() [TestMethod] public void Visible_WhenManaged_SetToFalse_DoesNothingIfAlreadyFalse() Visible_WhenManaged_SetToFalse_HidesTheWindow() [TestMethod] public void Visible_WhenManaged_SetToFalse_HidesTheWindow() Visible_WhenManaged_SetToTrue_DoesNothingIfAlreadyTrue() [TestMethod] public void Visible_WhenManaged_SetToTrue_DoesNothingIfAlreadyTrue() Visible_WhenManaged_SetToTrue_ShowsTheWindow() [TestMethod] public void Visible_WhenManaged_SetToTrue_ShowsTheWindow() Visible_WhenManaged_Set_SkipsOtherInvisibleWindows() [TestMethod] public void Visible_WhenManaged_Set_SkipsOtherInvisibleWindows()"
  },
  "api/Sharpie.Tests.html": {
    "href": "api/Sharpie.Tests.html",
    "title": "Namespace Sharpie.Tests | sharpie",
    "summary": "Namespace Sharpie.Tests Classes AsciiFontTests BaseCursesBackendTests CanvasTests ColorManagerTests ColorMixtureTests ComplexCharTests CursesBackendFlavorSelectorTests CursesBackendTests CursesExceptionTests CursesInitializationExceptionTests CursesMouseEventParserTests CursesMouseStateTests CursesOperationExceptionTests CursesSynchronizationExceptionTests DelegateEventTests DosCp866AsciiFontTests DotNetSystemAdapterInterfaceTests EventPumpTests EventTests FigletFontParserTests FigletFontTests FigletLayoutEvaluatorTests HelpersTests KeyEventTests KeySequenceResolverTests MouseActionEventTests MouseEventResolverTests MouseMoveEventTests NCursesBackendTests NCursesComplexCharTests NativeLibraryWrapperTests PadTests PdCursesBackendTests PdCursesMod32BackendTests ScreenTests SoftLabelKeyManagerTests StartEventTests StopEventTests StyleTests StyledTextTests SubPadTests SubWindowTests SurfaceDrawTextTests SurfaceTests SynchronizationTests TerminalMainLoopTests TerminalOptionsTests TerminalResizeEventTests TerminalSurfaceTests TerminalTests WindowTests"
  },
  "api/Sharpie.VideoAttribute.html": {
    "href": "api/Sharpie.VideoAttribute.html",
    "title": "Enum VideoAttribute | sharpie",
    "summary": "Enum VideoAttribute Namespace Sharpie Assembly sharpie.dll Defines the possible video attributes. [PublicAPI] [Flags] public enum VideoAttribute : uint Fields AltCharset = 64 Alternate character set. Blink = 8 Blinking text Bold = 32 Extra bright or bold text. Dim = 16 Half bright text. HorizontalHighlight = 512 Horizontal highlight. Invisible = 128 Invisible or blank mode. Italic = 32768 Italic highlight. LeftHighlight = 1024 Left highlight. LowHighlight = 2048 Low highlight. None = 0 No attributes, default text style. Protect = 256 Protected mode. Reverse = 4 Reverse-video text. RightHighlight = 4096 Right highlight. StandOut = 1 The best highlighting mode available. TopHighlight = 8192 Top highlight. Underline = 2 Underlined text. VerticalHighlight = 16384 Vertical highlight."
  },
  "api/Sharpie.Window.html": {
    "href": "api/Sharpie.Window.html",
    "title": "Class Window | sharpie",
    "summary": "Class Window Namespace Sharpie Assembly sharpie.dll Represents a Curses window and contains all it's functionality. [PublicAPI] public sealed class Window : TerminalSurface, IDisposable, IWindow, ITerminalSurface, ISurface, IDrawSurface Inheritance object Surface TerminalSurface Window Implements IDisposable IWindow ITerminalSurface ISurface IDrawSurface Inherited Members TerminalSurface.Terminal TerminalSurface.ImmediateRefresh Surface.Dispose() Surface.Handle Surface.ManagedCaret Surface.Scrollable Surface.Disposed Surface.Style Surface.ColorMixture Surface.Background Surface.CaretLocation Surface.Dirty Surface.LineDirty(int) Surface.EnableAttributes(VideoAttribute) Surface.DisableAttributes(VideoAttribute) Surface.ScrollUp(int) Surface.ScrollDown(int) Surface.InsertEmptyLines(int) Surface.DeleteLines(int) Surface.ChangeTextStyle(int, Style) Surface.WriteText(StyledText, bool) Surface.WriteText(string, Style, bool) Surface.WriteText(string, bool) Surface.NextLine() Surface.DrawText(IAsciiFont, string, Style, bool, bool) Surface.DrawText(IAsciiFont, string, bool, bool) Surface.DrawVerticalLine(int, Rune, Style) Surface.DrawVerticalLine(int) Surface.DrawHorizontalLine(int, Rune, Style) Surface.DrawHorizontalLine(int) Surface.DrawBorder(Rune, Rune, Rune, Rune, Rune, Rune, Rune, Rune, Style) Surface.DrawBorder() Surface.RemoveText(int) Surface.GetText(int) Surface.Clear(ClearStrategy) Surface.Replace(ISurface, ReplaceStrategy) Surface.Replace(ISurface, Rectangle, Point, ReplaceStrategy) Surface.MarkDirty(int, int) Surface.MarkDirty() Surface.IsPointWithin(Point) Surface.IsRectangleWithin(Rectangle) Surface.Draw(Point, Rectangle, IDrawable) Surface.Draw(Point, IDrawable) Surface.Destroy() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties Location Gets or sets the location of the window within its parent. public Point Location { get; set; } Property Value Point Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException The value is outside the parent's bounds. ObjectDisposedException Window is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Origin Returns the value of Location. protected override Point Origin { get; } Property Value Point Exceptions CursesOperationException A Curses error occured. Screen The parent screen of this window. public Screen Screen { get; } Property Value Screen Size Gets or sets the size of the window. public Size Size { get; set; } Property Value Size Remarks This operation is not thread safe. The new size will be adjusted to match the parent's available space. Exceptions ArgumentOutOfRangeException The value is outside the bounds. ObjectDisposedException Window is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. SubWindows Lists of children of this object. public IEnumerable<ISubWindow> SubWindows { get; } Property Value IEnumerable<ISubWindow> Remarks This operation is not thread safe. Exceptions ObjectDisposedException Window is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. Visible Gets or sets the value indicating if the window is visible. public bool Visible { get; set; } Property Value bool Remarks This operation is not thread safe. Exceptions ObjectDisposedException Window is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Methods BringToFront() Send the window to the front of the Z-order. public void BringToFront() Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Delete() Deletes the surface from the curses backend. protected override void Delete() Duplicate() Duplicates and existing window, including its attributes. public IWindow Duplicate() Returns IWindow A new window object. Remarks This operation is not thread safe. Exceptions ObjectDisposedException Screen is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. Refresh() Redraws all the dirty lines of the surface to the terminal. If AtomicRefresh() is active, all refreshes are batched together until the lock is released. public override void Refresh() Remarks This operation is not thread safe. Exceptions ObjectDisposedException Surface is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. CursesOperationException A Curses error occured. Refresh(int, int) Redraws the given lines of the window to the terminal. public override void Refresh(int y, int count) Parameters y int The starting line to refresh. count int The number of lines to refresh. Remarks This operation is not thread safe. Exceptions ArgumentOutOfRangeException Thrown if y or count are negative. InvalidOperationException Thrown if an atomic refresh is in progress. ObjectDisposedException Window is no longer usable. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. CursesOperationException A Curses error occured. SendToBack() Send the window to the back of the Z-order. public void SendToBack() Remarks This operation is not thread safe. Exceptions CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. SubWindow(Rectangle) Creates a new sub-window in the parent window. public ISubWindow SubWindow(Rectangle area) Parameters area Rectangle The area of the window to put the sub-window in. Returns ISubWindow A new window object. Exceptions ObjectDisposedException Screen is no longer usable. ArgumentOutOfRangeException The area is outside the bounds of the parent. CursesSynchronizationException Thrown if this operation was expected to run on the main thread/context but wasn't. CursesOperationException A Curses error occured. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Sharpie.html": {
    "href": "api/Sharpie.html",
    "title": "Namespace Sharpie | sharpie",
    "summary": "Namespace Sharpie Classes Canvas A general-purpose drawing surface that can be latter draw onto any object that implements IDrawSurface. Supports multiple types of drawing operations most commonly used in terminal apps. ColorManager Exposes functionality to manage colors. ControlCharacter Defines a list of special control characters in ASCII. CursesException A generic Curses exception, base for all other curses errors. CursesInitializationException Exception thrown if Curses failed to initialize. CursesOperationException A Curses exception raised when an operation fails. CursesSynchronizationException Exception thrown if operation performed in an unauthorized context (such as different thread). DelegateEvent Special event that delegates an object to the main application context. Event An event from the terminal. EventPump The event \"pump\" class listens to all events from Curses, processes them and passes them along to consumers. KeyEvent Defines a key event. KeySequenceResolver Contains the definitions and implementations of input middlewares. MouseActionEvent Contains the details of a Curses event. MouseMoveEvent Defines a mouse move event. Pad Represents a Curses pad, which is a special type of off-screen window. Screen The main Curses screen class. Implements screen-related functionality. Only one instance of this class can be active at one time. SoftLabelKeyManager Adds support for soft function keys. StartEvent Generated automatically when EventPump starts listening for events. StopEvent Generated automatically when EventPump stops listening for events. SubPad Represents a Curses sub-pad and contains all it's functionality. SubWindow Represents a Curses sub-window and contains all it's functionality. Surface Represents a surface and contains all its functionality. Terminal This class allows the developer to interact with the terminal and its settings. This is the main class that is used in a Curses-based application. TerminalOptions Stores the terminal options. TerminalResizeEvent The terminal resized event. TerminalSurface Represents a screen-bound surface and contains all its functionality. Window Represents a Curses window and contains all it's functionality. Structs ColorMixture Defines a color pair (foreground and background colors). Style Represents the style of the text (attributes and colors). StyledText Describes a text with mixed in styles. Can be used by WriteText(StyledText, bool). Enums Canvas.CheckGlyphStyle The possible shapes used by the check. Canvas.FillStyle The types fills. Canvas.GlyphSize Describes the size of a glyph. Canvas.GradientGlyphStyle The gradient style. Canvas.LineStyle The possible line styles used in Line(PointF, float, Orientation, LineStyle, Style). Canvas.Orientation Describes the available text orientations. Canvas.ShadeGlyphStyle The types of possible shades. Canvas.TriangleGlyphStyle Describes the orientation of a glyph. CaretMode Defines the caret mode. ClearStrategy Defines the possible strategies of clearing contents of a window. ColorMode Defines the color mode of the terminal. EventType Defines the possible event types. Key Defines the possible key types. ModifierKey Defines the possible modifier keys. MouseButton Defines the possible mouse buttons. MouseButtonState Defines the possible mouse button states. ReplaceStrategy Defines the possible strategies or replacing the contents of a window with the contents of another window. SoftLabelKeyAlignment Defines the alignment of labels in a SoftLabelKeyManager. SoftLabelKeyMode Defines the possible strategies of clearing contents of a window. StandardColor Defines the well-known standard video colors. VideoAttribute Defines the possible video attributes. Delegates ResolveEscapeSequenceFunc Defines the next delegate used to resolve key sequences."
  },
  "lib/README.html": {
    "href": "lib/README.html",
    "title": "Unofficial Curses Native Libraries | sharpie",
    "summary": "Unofficial Curses Native Libraries This directory contains unofficial builds of the native libraries supported by Sharpie. All libraries are built using GitHub workflows. These libraries are provided AS IS with NO WARRANTY whatsoever from my side. NCurses NCurses libraries are built for Linux, MacOs and Windows using this workflow. You can check it out to see the used compilation settings. The original source repository is located here License Copyright 2018-2021,2022 Thomas E. Dickey Copyright 1998-2017,2018 Free Software Foundation, Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, distribute with modifications, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Except as contained in this notice, the name(s) of the above copyright holders shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Software without prior written authorization. PDCurses NCurses libraries are built for Linux, MacOs and Windows using this workflow. The original source repository is located here License The core package and most ports are in the public domain, but a few files in the demos and X11 directories are subject to copyright under licenses described there. This software is provided AS IS with NO WARRANTY whatsoever. PDCursesMod PDCursesMod libraries are built for Linux, MacOs and Windows using this workflow. The libpdcursesmod-vt-arm64.dylib library has been built on a Mac M1 locally. The pdcursesmod-vt-arm64.dll, pdcursesmod-wincon-arm64.dll and pdcursesmod-wingui-arm64.dll libraries have been built on a Windows 11 ARM locally. The original source repository is located here License The core package is in the public domain, but small portions of PDCursesMod are subject to copyright under various licenses. Each directory contains a README file, with a section titled \"Distribution Status\" which describes the status of the files in that directory. If you use PDCursesMod in an application, an acknowledgement would be appreciated, but is not mandatory. If you make corrections or enhancements to PDCursesMod, please forward them to the current maintainer for the benefit of other users. This software is provided AS IS with NO WARRANTY whatsoever."
  }
}